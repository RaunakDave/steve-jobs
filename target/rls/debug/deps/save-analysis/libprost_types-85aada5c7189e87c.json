{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0","program":"/Users/raunak/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","prost_types","--edition=2018","/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=85aada5c7189e87c","-C","extra-filename=-85aada5c7189e87c","--out-dir","/Users/raunak/Downloads/steve-jobs/target/rls/debug/deps","-L","dependency=/Users/raunak/Downloads/steve-jobs/target/rls/debug/deps","--extern","bytes=/Users/raunak/Downloads/steve-jobs/target/rls/debug/deps/libbytes-6673d75ff2d67cca.rmeta","--extern","prost=/Users/raunak/Downloads/steve-jobs/target/rls/debug/deps/libprost-0e36ac0bf243e9aa.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/raunak/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/raunak/Downloads/steve-jobs/target/rls/debug/deps/libprost_types-85aada5c7189e87c.rmeta"},"prelude":{"crate_id":{"name":"prost_types","disambiguator":[3352643017684931944,12585108845589614960]},"crate_root":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src","external_crates":[{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[4672134039341031826,9334730820037710618]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7812355786254722365,11069232910465240897]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3504492067546965715,14807348065712645406]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":4,"id":{"name":"prost","disambiguator":[3412792538940922092,10475529730047978637]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":5,"id":{"name":"std","disambiguator":[2014432421693201618,6405737037534390335]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":6,"id":{"name":"alloc","disambiguator":[10363351663236916098,4373568221634206951]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":7,"id":{"name":"libc","disambiguator":[10398940938279845199,16184156993696304634]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":8,"id":{"name":"unwind","disambiguator":[724492824811583379,8144572066648184623]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":9,"id":{"name":"cfg_if","disambiguator":[15416939533143646956,6942433971967440675]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":10,"id":{"name":"hashbrown","disambiguator":[16970633403645001861,1360756374950165595]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5199069202728777874,5034187042864704623]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[3933903632706657361,17777720043096733358]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":13,"id":{"name":"std_detect","disambiguator":[1064452323391549649,8830000606501382885]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":14,"id":{"name":"addr2line","disambiguator":[3322092396504496203,10665470569546149906]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":15,"id":{"name":"gimli","disambiguator":[15191776587043837065,7596571186965316671]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":16,"id":{"name":"object","disambiguator":[9467777605309881795,12208806100407000479]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[16274892358024576666,2987381920905251631]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":18,"id":{"name":"prost_derive","disambiguator":[10756931966321977354,953799872357960546]}},{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","num":19,"id":{"name":"bytes","disambiguator":[11677002215660164033,13497384843559897858]}}],"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":0,"byte_end":8321,"line_start":1,"line_end":246,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":0,"byte_end":8321,"line_start":1,"line_end":246,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":148},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":213},{"krate":0,"index":26},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":482},{"krate":0,"index":27},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":653},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":679},{"krate":0,"index":681},{"krate":0,"index":701},{"krate":0,"index":28},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":797},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":836},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":917},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":1174},{"krate":0,"index":29},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1316},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1422},{"krate":0,"index":30},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1549},{"krate":0,"index":1551},{"krate":0,"index":1571},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1584},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1608},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1619},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1643},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1654},{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1694},{"krate":0,"index":31},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1822},{"krate":0,"index":32},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":33},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1970},{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":34},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2061},{"krate":0,"index":2071},{"krate":0,"index":2073},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2088},{"krate":0,"index":2097},{"krate":0,"index":2099},{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2111},{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2148},{"krate":0,"index":2157},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2214},{"krate":0,"index":35},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2357},{"krate":0,"index":2371},{"krate":0,"index":2373},{"krate":0,"index":2384},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2410},{"krate":0,"index":2412},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2439},{"krate":0,"index":2441},{"krate":0,"index":2447},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2465},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2475},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2482},{"krate":0,"index":2483},{"krate":0,"index":2486},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2517},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2534},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2570},{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2587},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2614},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2641},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2671},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2705},{"krate":0,"index":2714},{"krate":0,"index":2716},{"krate":0,"index":36},{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2778},{"krate":0,"index":2787},{"krate":0,"index":2789},{"krate":0,"index":2792},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2805},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":2817},{"krate":0,"index":2819},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2828},{"krate":0,"index":2838},{"krate":0,"index":2840},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":25}],"decl_id":null,"docs":" Protocol Buffers well-known types.","sig":null,"attributes":[{"value":"/ Protocol Buffers well-known types.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":62,"byte_end":100,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":101,"byte_end":104,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Note that the documentation for the types defined in this crate are generated from the Protobuf","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":105,"byte_end":204,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ definitions, so code examples are not in Rust.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":205,"byte_end":255,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":256,"byte_end":259,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See the [Protobuf reference][1] for more information about well-known types.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":260,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [1]: https://developers.google.com/protocol-buffers/docs/reference/google.protobuf","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":345,"byte_end":431,"line_start":10,"line_end":10,"column_start":1,"column_end":87}},{"value":"no_std","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":467,"byte_end":473,"line_start":12,"line_end":12,"column_start":35,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714601,"byte_end":8714618,"line_start":4,"line_end":4,"column_start":12,"column_end":29},"name":"FileDescriptorSet","qualname":"::FileDescriptorSet","value":"FileDescriptorSet { file }","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":" The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n","sig":null,"attributes":[{"value":"/ The protocol compiler can output a FileDescriptorSet containing the .proto","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714444,"byte_end":8714522,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"/ files it parses.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714523,"byte_end":8714543,"line_start":2,"line_end":2,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":57},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714670,"byte_end":8714674,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"name":"file","qualname":"::FileDescriptorSet::file","value":"prost::alloc::vec::Vec<FileDescriptorProto>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714625,"byte_end":8714661,"line_start":5,"line_end":5,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714820,"byte_end":8714839,"line_start":10,"line_end":10,"column_start":12,"column_end":31},"name":"FileDescriptorProto","qualname":"::FileDescriptorProto","value":"FileDescriptorProto { name, package, dependency, public_dependency, weak_dependency, message_type, enum_type, service, extension, options, source_code_info, syntax }","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" Describes a complete .proto file.\n","sig":null,"attributes":[{"value":"/ Describes a complete .proto file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714725,"byte_end":8714762,"line_start":8,"line_end":8,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":152},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714941,"byte_end":8714945,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::FileDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" file name, relative to root of source tree\n","sig":null,"attributes":[{"value":"/ file name, relative to root of source tree","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714846,"byte_end":8714892,"line_start":11,"line_end":11,"column_start":5,"column_end":51}},{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714897,"byte_end":8714932,"line_start":12,"line_end":12,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":153},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715087,"byte_end":8715094,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"package","qualname":"::FileDescriptorProto::package","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" e.g. \"foo\", \"foo.bar\", etc.\n","sig":null,"attributes":[{"value":"/ e.g. \"foo\", \"foo.bar\", etc.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715007,"byte_end":8715038,"line_start":14,"line_end":14,"column_start":5,"column_end":36}},{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715043,"byte_end":8715078,"line_start":15,"line_end":15,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":154},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715246,"byte_end":8715256,"line_start":19,"line_end":19,"column_start":9,"column_end":19},"name":"dependency","qualname":"::FileDescriptorProto::dependency","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Names of files imported by this file.\n","sig":null,"attributes":[{"value":"/ Names of files imported by this file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715156,"byte_end":8715197,"line_start":17,"line_end":17,"column_start":5,"column_end":46}},{"value":"prost(string, repeated, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715202,"byte_end":8715237,"line_start":18,"line_end":18,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":155},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715455,"byte_end":8715472,"line_start":22,"line_end":22,"column_start":9,"column_end":26},"name":"public_dependency","qualname":"::FileDescriptorProto::public_dependency","value":"prost::alloc::vec::Vec<i32>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Indexes of the public imported files in the dependency list above.\n","sig":null,"attributes":[{"value":"/ Indexes of the public imported files in the dependency list above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715320,"byte_end":8715390,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"prost(int32, repeated, packed = \"false\", tag = \"10\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715395,"byte_end":8715446,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":156},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715692,"byte_end":8715707,"line_start":26,"line_end":26,"column_start":9,"column_end":24},"name":"weak_dependency","qualname":"::FileDescriptorProto::weak_dependency","value":"prost::alloc::vec::Vec<i32>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n","sig":null,"attributes":[{"value":"/ Indexes of the weak imported files in the dependency list.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715509,"byte_end":8715571,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ For Google-internal migration only. Do not use.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715576,"byte_end":8715627,"line_start":24,"line_end":24,"column_start":5,"column_end":56}},{"value":"prost(int32, repeated, packed = \"false\", tag = \"11\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715632,"byte_end":8715683,"line_start":25,"line_end":25,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":157},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715837,"byte_end":8715849,"line_start":29,"line_end":29,"column_start":9,"column_end":21},"name":"message_type","qualname":"::FileDescriptorProto::message_type","value":"prost::alloc::vec::Vec<DescriptorProto>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" All top-level definitions in this file.\n","sig":null,"attributes":[{"value":"/ All top-level definitions in this file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715744,"byte_end":8715787,"line_start":27,"line_end":27,"column_start":5,"column_end":48}},{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715792,"byte_end":8715828,"line_start":28,"line_end":28,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":158},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715943,"byte_end":8715952,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"name":"enum_type","qualname":"::FileDescriptorProto::enum_type","value":"prost::alloc::vec::Vec<EnumDescriptorProto>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715898,"byte_end":8715934,"line_start":30,"line_end":30,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":159},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716050,"byte_end":8716057,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"name":"service","qualname":"::FileDescriptorProto::service","value":"prost::alloc::vec::Vec<ServiceDescriptorProto>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716005,"byte_end":8716041,"line_start":32,"line_end":32,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":160},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716158,"byte_end":8716167,"line_start":35,"line_end":35,"column_start":9,"column_end":18},"name":"extension","qualname":"::FileDescriptorProto::extension","value":"prost::alloc::vec::Vec<FieldDescriptorProto>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716113,"byte_end":8716149,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":161},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716266,"byte_end":8716273,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"name":"options","qualname":"::FileDescriptorProto::options","value":"core::option::Option<FileOptions>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"8\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716221,"byte_end":8716257,"line_start":36,"line_end":36,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":162},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716619,"byte_end":8716635,"line_start":43,"line_end":43,"column_start":9,"column_end":25},"name":"source_code_info","qualname":"::FileDescriptorProto::source_code_info","value":"core::option::Option<SourceCodeInfo>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n","sig":null,"attributes":[{"value":"/ This field contains optional information about the original source code.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716316,"byte_end":8716392,"line_start":38,"line_end":38,"column_start":5,"column_end":81}},{"value":"/ You may safely remove this entire field without harming runtime","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716397,"byte_end":8716464,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/ functionality of the descriptors -- the information is needed only by","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716469,"byte_end":8716542,"line_start":40,"line_end":40,"column_start":5,"column_end":78}},{"value":"/ development tools.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716547,"byte_end":8716569,"line_start":41,"line_end":41,"column_start":5,"column_end":27}},{"value":"prost(message, optional, tag = \"9\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716574,"byte_end":8716610,"line_start":42,"line_end":42,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":163},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716820,"byte_end":8716826,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"syntax","qualname":"::FileDescriptorProto::syntax","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The syntax of the proto file.\n The supported values are \"proto2\" and \"proto3\".\n","sig":null,"attributes":[{"value":"/ The syntax of the proto file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716681,"byte_end":8716714,"line_start":44,"line_end":44,"column_start":5,"column_end":38}},{"value":"/ The supported values are \"proto2\" and \"proto3\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716719,"byte_end":8716770,"line_start":45,"line_end":45,"column_start":5,"column_end":56}},{"value":"prost(string, optional, tag = \"12\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716775,"byte_end":8716811,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8714941,"byte_end":8714945,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"<FileDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8715087,"byte_end":8715094,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"package","qualname":"<FileDescriptorProto>::package","value":"pub fn package(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `package`, or the default value if `package` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716820,"byte_end":8716826,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"syntax","qualname":"<FileDescriptorProto>::syntax","value":"pub fn syntax(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `syntax`, or the default value if `syntax` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":164},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716973,"byte_end":8716988,"line_start":51,"line_end":51,"column_start":12,"column_end":27},"name":"DescriptorProto","qualname":"::DescriptorProto","value":"DescriptorProto { name, field, extension, nested_type, enum_type, extension_range, oneof_decl, options, reserved_range, reserved_name }","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224}],"decl_id":null,"docs":" Describes a message type.\n","sig":null,"attributes":[{"value":"/ Describes a message type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716886,"byte_end":8716915,"line_start":49,"line_end":49,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":215},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717039,"byte_end":8717043,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"name","qualname":"::DescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8716995,"byte_end":8717030,"line_start":52,"line_end":52,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":216},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717150,"byte_end":8717155,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"field","qualname":"::DescriptorProto::field","value":"prost::alloc::vec::Vec<FieldDescriptorProto>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717105,"byte_end":8717141,"line_start":54,"line_end":54,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":217},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717254,"byte_end":8717263,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"name":"extension","qualname":"::DescriptorProto::extension","value":"prost::alloc::vec::Vec<FieldDescriptorProto>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717209,"byte_end":8717245,"line_start":56,"line_end":56,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":218},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717362,"byte_end":8717373,"line_start":59,"line_end":59,"column_start":9,"column_end":20},"name":"nested_type","qualname":"::DescriptorProto::nested_type","value":"prost::alloc::vec::Vec<DescriptorProto>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717317,"byte_end":8717353,"line_start":58,"line_end":58,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":219},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717467,"byte_end":8717476,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"enum_type","qualname":"::DescriptorProto::enum_type","value":"prost::alloc::vec::Vec<EnumDescriptorProto>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717422,"byte_end":8717458,"line_start":60,"line_end":60,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":220},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717574,"byte_end":8717589,"line_start":63,"line_end":63,"column_start":9,"column_end":24},"name":"extension_range","qualname":"::DescriptorProto::extension_range","value":"prost::alloc::vec::Vec<descriptor_proto::ExtensionRange>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717529,"byte_end":8717565,"line_start":62,"line_end":62,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":221},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717700,"byte_end":8717710,"line_start":65,"line_end":65,"column_start":9,"column_end":19},"name":"oneof_decl","qualname":"::DescriptorProto::oneof_decl","value":"prost::alloc::vec::Vec<OneofDescriptorProto>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"8\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717655,"byte_end":8717691,"line_start":64,"line_end":64,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":222},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717809,"byte_end":8717816,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"options","qualname":"::DescriptorProto::options","value":"core::option::Option<MessageOptions>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717764,"byte_end":8717800,"line_start":66,"line_end":66,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":223},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717907,"byte_end":8717921,"line_start":69,"line_end":69,"column_start":9,"column_end":23},"name":"reserved_range","qualname":"::DescriptorProto::reserved_range","value":"prost::alloc::vec::Vec<descriptor_proto::ReservedRange>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"9\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717862,"byte_end":8717898,"line_start":68,"line_end":68,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":224},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718162,"byte_end":8718175,"line_start":73,"line_end":73,"column_start":9,"column_end":22},"name":"reserved_name","qualname":"::DescriptorProto::reserved_name","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n","sig":null,"attributes":[{"value":"/ Reserved field names, which may not be used by fields in the same message.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717986,"byte_end":8718064,"line_start":70,"line_end":70,"column_start":5,"column_end":83}},{"value":"/ A given name may only be reserved once.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718069,"byte_end":8718112,"line_start":71,"line_end":71,"column_start":5,"column_end":48}},{"value":"prost(string, repeated, tag = \"10\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718117,"byte_end":8718153,"line_start":72,"line_end":72,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8717039,"byte_end":8717043,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"name","qualname":"<DescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718301,"byte_end":8718317,"line_start":76,"line_end":76,"column_start":9,"column_end":25},"name":"descriptor_proto","qualname":"::descriptor_proto","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":268},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":315}],"decl_id":null,"docs":" Nested message and enum types in `DescriptorProto`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `DescriptorProto`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718237,"byte_end":8718292,"line_start":75,"line_end":75,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":225},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718385,"byte_end":8718399,"line_start":78,"line_end":78,"column_start":16,"column_end":30},"name":"ExtensionRange","qualname":"::descriptor_proto::ExtensionRange","value":"ExtensionRange { start, end, options }","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":271},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718480,"byte_end":8718485,"line_start":81,"line_end":81,"column_start":13,"column_end":18},"name":"start","qualname":"::descriptor_proto::ExtensionRange::start","value":"core::option::Option<i32>","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"/ Inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718410,"byte_end":8718424,"line_start":79,"line_end":79,"column_start":9,"column_end":23}},{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718433,"byte_end":8718467,"line_start":80,"line_end":80,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":272},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718594,"byte_end":8718597,"line_start":84,"line_end":84,"column_start":13,"column_end":16},"name":"end","qualname":"::descriptor_proto::ExtensionRange::end","value":"core::option::Option<i32>","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Exclusive.\n","sig":null,"attributes":[{"value":"/ Exclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718524,"byte_end":8718538,"line_start":82,"line_end":82,"column_start":9,"column_end":23}},{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718547,"byte_end":8718581,"line_start":83,"line_end":83,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":273},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718685,"byte_end":8718692,"line_start":86,"line_end":86,"column_start":13,"column_end":20},"name":"options","qualname":"::descriptor_proto::ExtensionRange::options","value":"core::option::Option<ExtensionRangeOptions>","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718636,"byte_end":8718672,"line_start":85,"line_end":85,"column_start":9,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718480,"byte_end":8718485,"line_start":81,"line_end":81,"column_start":13,"column_end":18},"name":"start","qualname":"<ExtensionRange>::start","value":"pub fn start(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `start`, or the default value if `start` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718594,"byte_end":8718597,"line_start":84,"line_end":84,"column_start":13,"column_end":16},"name":"end","qualname":"<ExtensionRange>::end","value":"pub fn end(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `end`, or the default value if `end` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718995,"byte_end":8719008,"line_start":92,"line_end":92,"column_start":16,"column_end":29},"name":"ReservedRange","qualname":"::descriptor_proto::ReservedRange","value":"ReservedRange { start, end }","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319}],"decl_id":null,"docs":" Range of reserved tag numbers. Reserved tag numbers may not be used by\n fields or extension ranges in the same message. Reserved ranges may\n not overlap.\n","sig":null,"attributes":[{"value":"/ Range of reserved tag numbers. Reserved tag numbers may not be used by","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718758,"byte_end":8718832,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ fields or extension ranges in the same message. Reserved ranges may","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718837,"byte_end":8718908,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ not overlap.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8718913,"byte_end":8718929,"line_start":90,"line_end":90,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":318},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719089,"byte_end":8719094,"line_start":95,"line_end":95,"column_start":13,"column_end":18},"name":"start","qualname":"::descriptor_proto::ReservedRange::start","value":"core::option::Option<i32>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"/ Inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719019,"byte_end":8719033,"line_start":93,"line_end":93,"column_start":9,"column_end":23}},{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719042,"byte_end":8719076,"line_start":94,"line_end":94,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":319},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719203,"byte_end":8719206,"line_start":98,"line_end":98,"column_start":13,"column_end":16},"name":"end","qualname":"::descriptor_proto::ReservedRange::end","value":"core::option::Option<i32>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Exclusive.\n","sig":null,"attributes":[{"value":"/ Exclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719133,"byte_end":8719147,"line_start":96,"line_end":96,"column_start":9,"column_end":23}},{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719156,"byte_end":8719190,"line_start":97,"line_end":97,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719089,"byte_end":8719094,"line_start":95,"line_end":95,"column_start":13,"column_end":18},"name":"start","qualname":"<ReservedRange>::start","value":"pub fn start(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `start`, or the default value if `start` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719203,"byte_end":8719206,"line_start":98,"line_end":98,"column_start":13,"column_end":16},"name":"end","qualname":"<ReservedRange>::end","value":"pub fn end(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `end`, or the default value if `end` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":320},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719302,"byte_end":8719323,"line_start":102,"line_end":102,"column_start":12,"column_end":33},"name":"ExtensionRangeOptions","qualname":"::ExtensionRangeOptions","value":"ExtensionRangeOptions { uninterpreted_option }","parent":null,"children":[{"krate":0,"index":340}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":340},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719449,"byte_end":8719469,"line_start":105,"line_end":105,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::ExtensionRangeOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719330,"byte_end":8719397,"line_start":103,"line_end":103,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719402,"byte_end":8719440,"line_start":104,"line_end":104,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":341},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719617,"byte_end":8719637,"line_start":109,"line_end":109,"column_start":12,"column_end":32},"name":"FieldDescriptorProto","qualname":"::FieldDescriptorProto","value":"FieldDescriptorProto { name, number, label, r#type, type_name, extendee, default_value, oneof_index, json_name, options, proto3_optional }","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505}],"decl_id":null,"docs":" Describes a field within a message.\n","sig":null,"attributes":[{"value":"/ Describes a field within a message.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719520,"byte_end":8719559,"line_start":107,"line_end":107,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":495},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719688,"byte_end":8719692,"line_start":111,"line_end":111,"column_start":9,"column_end":13},"name":"name","qualname":"::FieldDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719644,"byte_end":8719679,"line_start":110,"line_end":110,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":496},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719797,"byte_end":8719803,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"name":"number","qualname":"::FieldDescriptorProto::number","value":"core::option::Option<i32>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719754,"byte_end":8719788,"line_start":112,"line_end":112,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":497},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719919,"byte_end":8719924,"line_start":115,"line_end":115,"column_start":9,"column_end":14},"name":"label","qualname":"::FieldDescriptorProto::label","value":"core::option::Option<i32>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(enumeration = \"field_descriptor_proto::Label\", optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719838,"byte_end":8719910,"line_start":114,"line_end":114,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":498},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720194,"byte_end":8720200,"line_start":119,"line_end":119,"column_start":9,"column_end":15},"name":"r#type","qualname":"::FieldDescriptorProto::r#type","value":"core::option::Option<i32>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n","sig":null,"attributes":[{"value":"/ If type_name is set, this need not be set.  If both this and type_name","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719959,"byte_end":8720033,"line_start":116,"line_end":116,"column_start":5,"column_end":79}},{"value":"/ are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720038,"byte_end":8720109,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"prost(enumeration = \"field_descriptor_proto::Type\", optional, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720114,"byte_end":8720185,"line_start":118,"line_end":118,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":499},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720610,"byte_end":8720619,"line_start":126,"line_end":126,"column_start":9,"column_end":18},"name":"type_name","qualname":"::FieldDescriptorProto::type_name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n","sig":null,"attributes":[{"value":"/ For message and enum types, this is the name of the type.  If the name","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720235,"byte_end":8720309,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720314,"byte_end":8720388,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ rules are used to find the type (i.e. first the nested types within this","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720393,"byte_end":8720469,"line_start":122,"line_end":122,"column_start":5,"column_end":81}},{"value":"/ message are searched, then within the parent, on up to the root","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720474,"byte_end":8720541,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/ namespace).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720546,"byte_end":8720561,"line_start":124,"line_end":124,"column_start":5,"column_end":20}},{"value":"prost(string, optional, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720566,"byte_end":8720601,"line_start":125,"line_end":125,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":500},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720851,"byte_end":8720859,"line_start":130,"line_end":130,"column_start":9,"column_end":17},"name":"extendee","qualname":"::FieldDescriptorProto::extendee","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n","sig":null,"attributes":[{"value":"/ For extensions, this is the name of the type being extended.  It is","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720681,"byte_end":8720752,"line_start":127,"line_end":127,"column_start":5,"column_end":76}},{"value":"/ resolved in the same manner as type_name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720757,"byte_end":8720802,"line_start":128,"line_end":128,"column_start":5,"column_end":50}},{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720807,"byte_end":8720842,"line_start":129,"line_end":129,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":501},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721290,"byte_end":8721303,"line_start":137,"line_end":137,"column_start":9,"column_end":22},"name":"default_value","qualname":"::FieldDescriptorProto::default_value","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n","sig":null,"attributes":[{"value":"/ For numeric types, contains the original text representation of the value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720921,"byte_end":8720999,"line_start":131,"line_end":131,"column_start":5,"column_end":83}},{"value":"/ For booleans, \"true\" or \"false\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721004,"byte_end":8721040,"line_start":132,"line_end":132,"column_start":5,"column_end":41}},{"value":"/ For strings, contains the default text contents (not escaped in any way).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721045,"byte_end":8721122,"line_start":133,"line_end":133,"column_start":5,"column_end":82}},{"value":"/ For bytes, contains the C escaped value.  All bytes >= 128 are escaped.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721127,"byte_end":8721202,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ TODO(kenton):  Base-64 encode?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721207,"byte_end":8721241,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"prost(string, optional, tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721246,"byte_end":8721281,"line_start":136,"line_end":136,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":502},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721540,"byte_end":8721551,"line_start":141,"line_end":141,"column_start":9,"column_end":20},"name":"oneof_index","qualname":"::FieldDescriptorProto::oneof_index","value":"core::option::Option<i32>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n","sig":null,"attributes":[{"value":"/ If set, gives the index of a oneof in the containing type's oneof_decl","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721365,"byte_end":8721439,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/ list.  This field is a member of that oneof.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721444,"byte_end":8721492,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"prost(int32, optional, tag = \"9\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721497,"byte_end":8721531,"line_start":140,"line_end":140,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":503},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721894,"byte_end":8721903,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"name":"json_name","qualname":"::FieldDescriptorProto::json_name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n","sig":null,"attributes":[{"value":"/ JSON name of this field. The value is set by protocol compiler. If the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721586,"byte_end":8721660,"line_start":142,"line_end":142,"column_start":5,"column_end":79}},{"value":"/ user has set a \"json_name\" option on this field, that option's value","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721665,"byte_end":8721737,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/ will be used. Otherwise, it's deduced from the field's name by converting","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721742,"byte_end":8721819,"line_start":144,"line_end":144,"column_start":5,"column_end":82}},{"value":"/ it to camelCase.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721824,"byte_end":8721844,"line_start":145,"line_end":145,"column_start":5,"column_end":25}},{"value":"prost(string, optional, tag = \"10\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721849,"byte_end":8721885,"line_start":146,"line_end":146,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":504},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722010,"byte_end":8722017,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"name":"options","qualname":"::FieldDescriptorProto::options","value":"core::option::Option<FieldOptions>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"8\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721965,"byte_end":8722001,"line_start":148,"line_end":148,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":505},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723439,"byte_end":8723454,"line_start":172,"line_end":172,"column_start":9,"column_end":24},"name":"proto3_optional","qualname":"::FieldDescriptorProto::proto3_optional","value":"core::option::Option<bool>","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" If true, this is a proto3 \"optional\". When a proto3 field is optional, it\n tracks presence regardless of field type.","sig":null,"attributes":[{"value":"/ If true, this is a proto3 \"optional\". When a proto3 field is optional, it","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722061,"byte_end":8722138,"line_start":150,"line_end":150,"column_start":5,"column_end":82}},{"value":"/ tracks presence regardless of field type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722143,"byte_end":8722188,"line_start":151,"line_end":151,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722193,"byte_end":8722196,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ When proto3_optional is true, this field must be belong to a oneof to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722201,"byte_end":8722274,"line_start":153,"line_end":153,"column_start":5,"column_end":78}},{"value":"/ signal to old proto3 clients that presence is tracked for this field. This","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722279,"byte_end":8722357,"line_start":154,"line_end":154,"column_start":5,"column_end":83}},{"value":"/ oneof is known as a \"synthetic\" oneof, and this field must be its sole","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722362,"byte_end":8722436,"line_start":155,"line_end":155,"column_start":5,"column_end":79}},{"value":"/ member (each proto3 optional field gets its own synthetic oneof). Synthetic","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722441,"byte_end":8722520,"line_start":156,"line_end":156,"column_start":5,"column_end":84}},{"value":"/ oneofs exist in the descriptor only, and do not generate any API. Synthetic","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722525,"byte_end":8722604,"line_start":157,"line_end":157,"column_start":5,"column_end":84}},{"value":"/ oneofs must be ordered after all \"real\" oneofs.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722609,"byte_end":8722660,"line_start":158,"line_end":158,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722665,"byte_end":8722668,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ For message fields, proto3_optional doesn't create any semantic change,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722673,"byte_end":8722748,"line_start":160,"line_end":160,"column_start":5,"column_end":80}},{"value":"/ since non-repeated message fields always track presence. However it still","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722753,"byte_end":8722830,"line_start":161,"line_end":161,"column_start":5,"column_end":82}},{"value":"/ indicates the semantic detail of whether the user wrote \"optional\" or not.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722835,"byte_end":8722913,"line_start":162,"line_end":162,"column_start":5,"column_end":83}},{"value":"/ This can be useful for round-tripping the .proto file. For consistency we","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8722918,"byte_end":8722995,"line_start":163,"line_end":163,"column_start":5,"column_end":82}},{"value":"/ give message fields a synthetic oneof also, even though it is not required","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723000,"byte_end":8723078,"line_start":164,"line_end":164,"column_start":5,"column_end":83}},{"value":"/ to track presence. This is especially important because the parser can't","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723083,"byte_end":8723159,"line_start":165,"line_end":165,"column_start":5,"column_end":81}},{"value":"/ tell if a field is a message or an enum, so it must always create a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723164,"byte_end":8723235,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ synthetic oneof.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723240,"byte_end":8723260,"line_start":167,"line_end":167,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723265,"byte_end":8723268,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Proto2 optional fields do not set this flag, because they already indicate","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723273,"byte_end":8723351,"line_start":169,"line_end":169,"column_start":5,"column_end":83}},{"value":"/ optional with `LABEL_OPTIONAL`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723356,"byte_end":8723391,"line_start":170,"line_end":170,"column_start":5,"column_end":40}},{"value":"prost(bool, optional, tag = \"17\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723396,"byte_end":8723430,"line_start":171,"line_end":171,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719688,"byte_end":8719692,"line_start":111,"line_end":111,"column_start":9,"column_end":13},"name":"name","qualname":"<FieldDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720851,"byte_end":8720859,"line_start":130,"line_end":130,"column_start":9,"column_end":17},"name":"extendee","qualname":"<FieldDescriptorProto>::extendee","value":"pub fn extendee(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `extendee`, or the default value if `extendee` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719797,"byte_end":8719803,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"name":"number","qualname":"<FieldDescriptorProto>::number","value":"pub fn number(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `number`, or the default value if `number` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8719919,"byte_end":8719924,"line_start":115,"line_end":115,"column_start":9,"column_end":14},"name":"label","qualname":"<FieldDescriptorProto>::label","value":"pub fn label(&Self) -> field_descriptor_proto::Label","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `label`, or the default if the field is unset or set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720194,"byte_end":8720200,"line_start":119,"line_end":119,"column_start":9,"column_end":15},"name":"type","qualname":"<FieldDescriptorProto>::type","value":"pub fn r#type(&Self) -> field_descriptor_proto::Type","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `type`, or the default if the field is unset or set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8720610,"byte_end":8720619,"line_start":126,"line_end":126,"column_start":9,"column_end":18},"name":"type_name","qualname":"<FieldDescriptorProto>::type_name","value":"pub fn type_name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `type_name`, or the default value if `type_name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721290,"byte_end":8721303,"line_start":137,"line_end":137,"column_start":9,"column_end":22},"name":"default_value","qualname":"<FieldDescriptorProto>::default_value","value":"pub fn default_value(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `default_value`, or the default value if `default_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721540,"byte_end":8721551,"line_start":141,"line_end":141,"column_start":9,"column_end":20},"name":"oneof_index","qualname":"<FieldDescriptorProto>::oneof_index","value":"pub fn oneof_index(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `oneof_index`, or the default value if `oneof_index` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8721894,"byte_end":8721903,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"name":"json_name","qualname":"<FieldDescriptorProto>::json_name","value":"pub fn json_name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `json_name`, or the default value if `json_name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723439,"byte_end":8723454,"line_start":172,"line_end":172,"column_start":9,"column_end":24},"name":"proto3_optional","qualname":"<FieldDescriptorProto>::proto3_optional","value":"pub fn proto3_optional(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `proto3_optional`, or the default value if `proto3_optional` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723557,"byte_end":8723579,"line_start":175,"line_end":175,"column_start":9,"column_end":31},"name":"field_descriptor_proto","qualname":"::field_descriptor_proto","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":619}],"decl_id":null,"docs":" Nested message and enum types in `FieldDescriptorProto`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `FieldDescriptorProto`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723488,"byte_end":8723548,"line_start":174,"line_end":174,"column_start":1,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":507},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723810,"byte_end":8723816,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"name":"Double","qualname":"::field_descriptor_proto::Type::Double","value":"Type::Double","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" 0 is reserved for errors.\n Order is weird for historical reasons.\n","sig":null,"attributes":[{"value":"/ 0 is reserved for errors.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723721,"byte_end":8723750,"line_start":179,"line_end":179,"column_start":9,"column_end":38}},{"value":"/ Order is weird for historical reasons.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723759,"byte_end":8723801,"line_start":180,"line_end":180,"column_start":9,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":510},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723830,"byte_end":8723835,"line_start":182,"line_end":182,"column_start":9,"column_end":14},"name":"Float","qualname":"::field_descriptor_proto::Type::Float","value":"Type::Float","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":513},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723974,"byte_end":8723979,"line_start":185,"line_end":185,"column_start":9,"column_end":14},"name":"Int64","qualname":"::field_descriptor_proto::Type::Int64","value":"Type::Int64","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n","sig":null,"attributes":[{"value":"/ Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723849,"byte_end":8723925,"line_start":183,"line_end":183,"column_start":9,"column_end":85}},{"value":"/ negative values are likely.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723934,"byte_end":8723965,"line_start":184,"line_end":184,"column_start":9,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":516},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723993,"byte_end":8723999,"line_start":186,"line_end":186,"column_start":9,"column_end":15},"name":"Uint64","qualname":"::field_descriptor_proto::Type::Uint64","value":"Type::Uint64","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":519},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724138,"byte_end":8724143,"line_start":189,"line_end":189,"column_start":9,"column_end":14},"name":"Int32","qualname":"::field_descriptor_proto::Type::Int32","value":"Type::Int32","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n","sig":null,"attributes":[{"value":"/ Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724013,"byte_end":8724089,"line_start":187,"line_end":187,"column_start":9,"column_end":85}},{"value":"/ negative values are likely.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724098,"byte_end":8724129,"line_start":188,"line_end":188,"column_start":9,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":522},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724157,"byte_end":8724164,"line_start":190,"line_end":190,"column_start":9,"column_end":16},"name":"Fixed64","qualname":"::field_descriptor_proto::Type::Fixed64","value":"Type::Fixed64","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724178,"byte_end":8724185,"line_start":191,"line_end":191,"column_start":9,"column_end":16},"name":"Fixed32","qualname":"::field_descriptor_proto::Type::Fixed32","value":"Type::Fixed32","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":528},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724199,"byte_end":8724203,"line_start":192,"line_end":192,"column_start":9,"column_end":13},"name":"Bool","qualname":"::field_descriptor_proto::Type::Bool","value":"Type::Bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724217,"byte_end":8724223,"line_start":193,"line_end":193,"column_start":9,"column_end":15},"name":"String","qualname":"::field_descriptor_proto::Type::String","value":"Type::String","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":534},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724490,"byte_end":8724495,"line_start":198,"line_end":198,"column_start":9,"column_end":14},"name":"Group","qualname":"::field_descriptor_proto::Type::Group","value":"Type::Group","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Tag-delimited aggregate.\n Group type is deprecated and not supported in proto3. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.\n","sig":null,"attributes":[{"value":"/ Tag-delimited aggregate.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724237,"byte_end":8724265,"line_start":194,"line_end":194,"column_start":9,"column_end":37}},{"value":"/ Group type is deprecated and not supported in proto3. However, Proto3","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724274,"byte_end":8724347,"line_start":195,"line_end":195,"column_start":9,"column_end":82}},{"value":"/ implementations should still be able to parse the group wire format and","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724356,"byte_end":8724431,"line_start":196,"line_end":196,"column_start":9,"column_end":84}},{"value":"/ treat group fields as unknown fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724440,"byte_end":8724481,"line_start":197,"line_end":197,"column_start":9,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":537},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724550,"byte_end":8724557,"line_start":200,"line_end":200,"column_start":9,"column_end":16},"name":"Message","qualname":"::field_descriptor_proto::Type::Message","value":"Type::Message","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Length-delimited aggregate.\n","sig":null,"attributes":[{"value":"/ Length-delimited aggregate.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724510,"byte_end":8724541,"line_start":199,"line_end":199,"column_start":9,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":540},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724602,"byte_end":8724607,"line_start":202,"line_end":202,"column_start":9,"column_end":14},"name":"Bytes","qualname":"::field_descriptor_proto::Type::Bytes","value":"Type::Bytes","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" New in version 2.\n","sig":null,"attributes":[{"value":"/ New in version 2.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724572,"byte_end":8724593,"line_start":201,"line_end":201,"column_start":9,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724622,"byte_end":8724628,"line_start":203,"line_end":203,"column_start":9,"column_end":15},"name":"Uint32","qualname":"::field_descriptor_proto::Type::Uint32","value":"Type::Uint32","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":546},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724643,"byte_end":8724647,"line_start":204,"line_end":204,"column_start":9,"column_end":13},"name":"Enum","qualname":"::field_descriptor_proto::Type::Enum","value":"Type::Enum","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":549},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724662,"byte_end":8724670,"line_start":205,"line_end":205,"column_start":9,"column_end":17},"name":"Sfixed32","qualname":"::field_descriptor_proto::Type::Sfixed32","value":"Type::Sfixed32","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":552},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724685,"byte_end":8724693,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"name":"Sfixed64","qualname":"::field_descriptor_proto::Type::Sfixed64","value":"Type::Sfixed64","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":555},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724742,"byte_end":8724748,"line_start":208,"line_end":208,"column_start":9,"column_end":15},"name":"Sint32","qualname":"::field_descriptor_proto::Type::Sint32","value":"Type::Sint32","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Uses ZigZag encoding.\n","sig":null,"attributes":[{"value":"/ Uses ZigZag encoding.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724708,"byte_end":8724733,"line_start":207,"line_end":207,"column_start":9,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":558},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724797,"byte_end":8724803,"line_start":210,"line_end":210,"column_start":9,"column_end":15},"name":"Sint64","qualname":"::field_descriptor_proto::Type::Sint64","value":"Type::Sint64","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Uses ZigZag encoding.\n","sig":null,"attributes":[{"value":"/ Uses ZigZag encoding.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724763,"byte_end":8724788,"line_start":209,"line_end":209,"column_start":9,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":506},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723706,"byte_end":8723710,"line_start":178,"line_end":178,"column_start":14,"column_end":18},"name":"Type","qualname":"::field_descriptor_proto::Type","value":"pub enum Type {\n    Double = ,\n    Float = ,\n    Int64 = ,\n    Uint64 = ,\n    Int32 = ,\n    Fixed64 = ,\n    Fixed32 = ,\n    Bool = ,\n    String = ,\n    Group = ,\n    Message = ,\n    Bytes = ,\n    Uint32 = ,\n    Enum = ,\n    Sfixed32 = ,\n    Sfixed64 = ,\n    Sint32 = ,\n    Sint64 = ,\n}","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8723680,"byte_end":8723692,"line_start":177,"line_end":177,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":587},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724993,"byte_end":8725001,"line_start":216,"line_end":216,"column_start":9,"column_end":17},"name":"Optional","qualname":"::field_descriptor_proto::Label::Optional","value":"Label::Optional","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":" 0 is reserved for errors\n","sig":null,"attributes":[{"value":"/ 0 is reserved for errors","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724956,"byte_end":8724984,"line_start":215,"line_end":215,"column_start":9,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":590},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725015,"byte_end":8725023,"line_start":217,"line_end":217,"column_start":9,"column_end":17},"name":"Required","qualname":"::field_descriptor_proto::Label::Required","value":"Label::Required","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":593},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725037,"byte_end":8725045,"line_start":218,"line_end":218,"column_start":9,"column_end":17},"name":"Repeated","qualname":"::field_descriptor_proto::Label::Repeated","value":"Label::Repeated","parent":{"krate":0,"index":586},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":586},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724940,"byte_end":8724945,"line_start":214,"line_end":214,"column_start":14,"column_end":19},"name":"Label","qualname":"::field_descriptor_proto::Label","value":"pub enum Label { Optional = , Required = , Repeated = , }","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8724914,"byte_end":8724926,"line_start":213,"line_end":213,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":621},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725139,"byte_end":8725159,"line_start":223,"line_end":223,"column_start":12,"column_end":32},"name":"OneofDescriptorProto","qualname":"::OneofDescriptorProto","value":"OneofDescriptorProto { name, options }","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"decl_id":null,"docs":" Describes a oneof.\n","sig":null,"attributes":[{"value":"/ Describes a oneof.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725059,"byte_end":8725081,"line_start":221,"line_end":221,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":655},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725210,"byte_end":8725214,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"name":"name","qualname":"::OneofDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":621},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725166,"byte_end":8725201,"line_start":224,"line_end":224,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":656},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725321,"byte_end":8725328,"line_start":227,"line_end":227,"column_start":9,"column_end":16},"name":"options","qualname":"::OneofDescriptorProto::options","value":"core::option::Option<OneofOptions>","parent":{"krate":0,"index":621},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725276,"byte_end":8725312,"line_start":226,"line_end":226,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725210,"byte_end":8725214,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"name":"name","qualname":"<OneofDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":657},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725455,"byte_end":8725474,"line_start":231,"line_end":231,"column_start":12,"column_end":31},"name":"EnumDescriptorProto","qualname":"::EnumDescriptorProto","value":"EnumDescriptorProto { name, value, options, reserved_range, reserved_name }","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707}],"decl_id":null,"docs":" Describes an enum type.\n","sig":null,"attributes":[{"value":"/ Describes an enum type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725370,"byte_end":8725397,"line_start":229,"line_end":229,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":703},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725525,"byte_end":8725529,"line_start":233,"line_end":233,"column_start":9,"column_end":13},"name":"name","qualname":"::EnumDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725481,"byte_end":8725516,"line_start":232,"line_end":232,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":704},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725636,"byte_end":8725641,"line_start":235,"line_end":235,"column_start":9,"column_end":14},"name":"value","qualname":"::EnumDescriptorProto::value","value":"prost::alloc::vec::Vec<EnumValueDescriptorProto>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725591,"byte_end":8725627,"line_start":234,"line_end":234,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":705},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725744,"byte_end":8725751,"line_start":237,"line_end":237,"column_start":9,"column_end":16},"name":"options","qualname":"::EnumDescriptorProto::options","value":"core::option::Option<EnumOptions>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725699,"byte_end":8725735,"line_start":236,"line_end":236,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":706},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726015,"byte_end":8726029,"line_start":242,"line_end":242,"column_start":9,"column_end":23},"name":"reserved_range","qualname":"::EnumDescriptorProto::reserved_range","value":"prost::alloc::vec::Vec<enum_descriptor_proto::EnumReservedRange>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n","sig":null,"attributes":[{"value":"/ Range of reserved numeric values. Reserved numeric values may not be used","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725794,"byte_end":8725871,"line_start":238,"line_end":238,"column_start":5,"column_end":82}},{"value":"/ by enum values in the same enum declaration. Reserved ranges may not","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725876,"byte_end":8725948,"line_start":239,"line_end":239,"column_start":5,"column_end":77}},{"value":"/ overlap.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725953,"byte_end":8725965,"line_start":240,"line_end":240,"column_start":5,"column_end":17}},{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725970,"byte_end":8726006,"line_start":241,"line_end":241,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":707},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726255,"byte_end":8726268,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"name":"reserved_name","qualname":"::EnumDescriptorProto::reserved_name","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n","sig":null,"attributes":[{"value":"/ Reserved enum value names, which may not be reused. A given name may only","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726103,"byte_end":8726180,"line_start":243,"line_end":243,"column_start":5,"column_end":82}},{"value":"/ be reserved once.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726185,"byte_end":8726206,"line_start":244,"line_end":244,"column_start":5,"column_end":26}},{"value":"prost(string, repeated, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726211,"byte_end":8726246,"line_start":245,"line_end":245,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8725525,"byte_end":8725529,"line_start":233,"line_end":233,"column_start":9,"column_end":13},"name":"name","qualname":"<EnumDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726398,"byte_end":8726419,"line_start":249,"line_end":249,"column_start":9,"column_end":30},"name":"enum_descriptor_proto","qualname":"::enum_descriptor_proto","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":749}],"decl_id":null,"docs":" Nested message and enum types in `EnumDescriptorProto`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `EnumDescriptorProto`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726330,"byte_end":8726389,"line_start":248,"line_end":248,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":708},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726815,"byte_end":8726832,"line_start":257,"line_end":257,"column_start":16,"column_end":33},"name":"EnumReservedRange","qualname":"::enum_descriptor_proto::EnumReservedRange","value":"EnumReservedRange { start, end }","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":753}],"decl_id":null,"docs":" Range of reserved numeric values. Reserved values may not be used by\n entries in the same enum. Reserved ranges may not overlap.","sig":null,"attributes":[{"value":"/ Range of reserved numeric values. Reserved values may not be used by","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726426,"byte_end":8726498,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ entries in the same enum. Reserved ranges may not overlap.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726503,"byte_end":8726565,"line_start":251,"line_end":251,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726570,"byte_end":8726573,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Note that this is distinct from DescriptorProto.ReservedRange in that it","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726578,"byte_end":8726654,"line_start":253,"line_end":253,"column_start":5,"column_end":81}},{"value":"/ is inclusive such that it can appropriately represent the entire int32","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726659,"byte_end":8726733,"line_start":254,"line_end":254,"column_start":5,"column_end":79}},{"value":"/ domain.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726738,"byte_end":8726749,"line_start":255,"line_end":255,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":752},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726913,"byte_end":8726918,"line_start":260,"line_end":260,"column_start":13,"column_end":18},"name":"start","qualname":"::enum_descriptor_proto::EnumReservedRange::start","value":"core::option::Option<i32>","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"/ Inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726843,"byte_end":8726857,"line_start":258,"line_end":258,"column_start":9,"column_end":23}},{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726866,"byte_end":8726900,"line_start":259,"line_end":259,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":753},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727027,"byte_end":8727030,"line_start":263,"line_end":263,"column_start":13,"column_end":16},"name":"end","qualname":"::enum_descriptor_proto::EnumReservedRange::end","value":"core::option::Option<i32>","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":" Inclusive.\n","sig":null,"attributes":[{"value":"/ Inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726957,"byte_end":8726971,"line_start":261,"line_end":261,"column_start":9,"column_end":23}},{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726980,"byte_end":8727014,"line_start":262,"line_end":262,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8726913,"byte_end":8726918,"line_start":260,"line_end":260,"column_start":13,"column_end":18},"name":"start","qualname":"<EnumReservedRange>::start","value":"pub fn start(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `start`, or the default value if `start` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727027,"byte_end":8727030,"line_start":263,"line_end":263,"column_start":13,"column_end":16},"name":"end","qualname":"<EnumReservedRange>::end","value":"pub fn end(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `end`, or the default value if `end` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727164,"byte_end":8727188,"line_start":268,"line_end":268,"column_start":12,"column_end":36},"name":"EnumValueDescriptorProto","qualname":"::EnumValueDescriptorProto","value":"EnumValueDescriptorProto { name, number, options }","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802}],"decl_id":null,"docs":" Describes a value within an enum.\n","sig":null,"attributes":[{"value":"/ Describes a value within an enum.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727069,"byte_end":8727106,"line_start":266,"line_end":266,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":800},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727239,"byte_end":8727243,"line_start":270,"line_end":270,"column_start":9,"column_end":13},"name":"name","qualname":"::EnumValueDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727195,"byte_end":8727230,"line_start":269,"line_end":269,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":801},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727348,"byte_end":8727354,"line_start":272,"line_end":272,"column_start":9,"column_end":15},"name":"number","qualname":"::EnumValueDescriptorProto::number","value":"core::option::Option<i32>","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727305,"byte_end":8727339,"line_start":271,"line_end":271,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":802},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727434,"byte_end":8727441,"line_start":274,"line_end":274,"column_start":9,"column_end":16},"name":"options","qualname":"::EnumValueDescriptorProto::options","value":"core::option::Option<EnumValueOptions>","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727389,"byte_end":8727425,"line_start":273,"line_end":273,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727239,"byte_end":8727243,"line_start":270,"line_end":270,"column_start":9,"column_end":13},"name":"name","qualname":"<EnumValueDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727348,"byte_end":8727354,"line_start":272,"line_end":272,"column_start":9,"column_end":15},"name":"number","qualname":"<EnumValueDescriptorProto>::number","value":"pub fn number(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `number`, or the default value if `number` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":803},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727569,"byte_end":8727591,"line_start":278,"line_end":278,"column_start":12,"column_end":34},"name":"ServiceDescriptorProto","qualname":"::ServiceDescriptorProto","value":"ServiceDescriptorProto { name, method, options }","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"decl_id":null,"docs":" Describes a service.\n","sig":null,"attributes":[{"value":"/ Describes a service.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727487,"byte_end":8727511,"line_start":276,"line_end":276,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":838},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727642,"byte_end":8727646,"line_start":280,"line_end":280,"column_start":9,"column_end":13},"name":"name","qualname":"::ServiceDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727598,"byte_end":8727633,"line_start":279,"line_end":279,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":839},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727753,"byte_end":8727759,"line_start":282,"line_end":282,"column_start":9,"column_end":15},"name":"method","qualname":"::ServiceDescriptorProto::method","value":"prost::alloc::vec::Vec<MethodDescriptorProto>","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727708,"byte_end":8727744,"line_start":281,"line_end":281,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":840},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727859,"byte_end":8727866,"line_start":284,"line_end":284,"column_start":9,"column_end":16},"name":"options","qualname":"::ServiceDescriptorProto::options","value":"core::option::Option<ServiceOptions>","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727814,"byte_end":8727850,"line_start":283,"line_end":283,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727642,"byte_end":8727646,"line_start":280,"line_end":280,"column_start":9,"column_end":13},"name":"name","qualname":"<ServiceDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":841},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728004,"byte_end":8728025,"line_start":288,"line_end":288,"column_start":12,"column_end":33},"name":"MethodDescriptorProto","qualname":"::MethodDescriptorProto","value":"MethodDescriptorProto { name, input_type, output_type, options, client_streaming, server_streaming }","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"decl_id":null,"docs":" Describes a method of a service.\n","sig":null,"attributes":[{"value":"/ Describes a method of a service.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8727910,"byte_end":8727946,"line_start":286,"line_end":286,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":923},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728076,"byte_end":8728080,"line_start":290,"line_end":290,"column_start":9,"column_end":13},"name":"name","qualname":"::MethodDescriptorProto::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728032,"byte_end":8728067,"line_start":289,"line_end":289,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":924},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728336,"byte_end":8728346,"line_start":294,"line_end":294,"column_start":9,"column_end":19},"name":"input_type","qualname":"::MethodDescriptorProto::input_type","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":" Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n","sig":null,"attributes":[{"value":"/ Input and output type names.  These are resolved in the same way as","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728142,"byte_end":8728213,"line_start":291,"line_end":291,"column_start":5,"column_end":76}},{"value":"/ FieldDescriptorProto.type_name, but must refer to a message type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728218,"byte_end":8728287,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728292,"byte_end":8728327,"line_start":293,"line_end":293,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":925},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728452,"byte_end":8728463,"line_start":296,"line_end":296,"column_start":9,"column_end":20},"name":"output_type","qualname":"::MethodDescriptorProto::output_type","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728408,"byte_end":8728443,"line_start":295,"line_end":295,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":926},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728570,"byte_end":8728577,"line_start":298,"line_end":298,"column_start":9,"column_end":16},"name":"options","qualname":"::MethodDescriptorProto::options","value":"core::option::Option<MethodOptions>","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728525,"byte_end":8728561,"line_start":297,"line_end":297,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":927},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728743,"byte_end":8728759,"line_start":301,"line_end":301,"column_start":9,"column_end":25},"name":"client_streaming","qualname":"::MethodDescriptorProto::client_streaming","value":"core::option::Option<bool>","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":" Identifies if client streams multiple client messages\n","sig":null,"attributes":[{"value":"/ Identifies if client streams multiple client messages","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728622,"byte_end":8728679,"line_start":299,"line_end":299,"column_start":5,"column_end":62}},{"value":"prost(bool, optional, tag = \"5\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728684,"byte_end":8728734,"line_start":300,"line_end":300,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":928},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728916,"byte_end":8728932,"line_start":304,"line_end":304,"column_start":9,"column_end":25},"name":"server_streaming","qualname":"::MethodDescriptorProto::server_streaming","value":"core::option::Option<bool>","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":" Identifies if server streams multiple server messages\n","sig":null,"attributes":[{"value":"/ Identifies if server streams multiple server messages","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728795,"byte_end":8728852,"line_start":302,"line_end":302,"column_start":5,"column_end":62}},{"value":"prost(bool, optional, tag = \"6\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728857,"byte_end":8728907,"line_start":303,"line_end":303,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728076,"byte_end":8728080,"line_start":290,"line_end":290,"column_start":9,"column_end":13},"name":"name","qualname":"<MethodDescriptorProto>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728336,"byte_end":8728346,"line_start":294,"line_end":294,"column_start":9,"column_end":19},"name":"input_type","qualname":"<MethodDescriptorProto>::input_type","value":"pub fn input_type(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `input_type`, or the default value if `input_type` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728452,"byte_end":8728463,"line_start":296,"line_end":296,"column_start":9,"column_end":20},"name":"output_type","qualname":"<MethodDescriptorProto>::output_type","value":"pub fn output_type(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `output_type`, or the default value if `output_type` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728743,"byte_end":8728759,"line_start":301,"line_end":301,"column_start":9,"column_end":25},"name":"client_streaming","qualname":"<MethodDescriptorProto>::client_streaming","value":"pub fn client_streaming(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `client_streaming`, or the default value if `client_streaming` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8728916,"byte_end":8728932,"line_start":304,"line_end":304,"column_start":9,"column_end":25},"name":"server_streaming","qualname":"<MethodDescriptorProto>::server_streaming","value":"pub fn server_streaming(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `server_streaming`, or the default value if `server_streaming` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":929},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8730907,"byte_end":8730918,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"FileOptions","qualname":"::FileOptions","value":"FileOptions { java_package, java_outer_classname, java_multiple_files, java_generate_equals_and_hash, java_string_check_utf8, optimize_for, go_package, cc_generic_services, java_generic_services, py_generic_services, php_generic_services, deprecated, cc_enable_arenas, objc_class_prefix, csharp_namespace, swift_prefix, php_class_prefix, php_namespace, php_metadata_namespace, ruby_package, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1196},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731226,"byte_end":8731238,"line_start":345,"line_end":345,"column_start":9,"column_end":21},"name":"java_package","qualname":"::FileOptions::java_package","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n","sig":null,"attributes":[{"value":"/ Sets the Java package where classes generated from this .proto will be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8730925,"byte_end":8730999,"line_start":340,"line_end":340,"column_start":5,"column_end":79}},{"value":"/ placed.  By default, the proto package is used, but this is often","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731004,"byte_end":8731073,"line_start":341,"line_end":341,"column_start":5,"column_end":74}},{"value":"/ inappropriate because proto packages do not normally start with backwards","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731078,"byte_end":8731155,"line_start":342,"line_end":342,"column_start":5,"column_end":82}},{"value":"/ domain names.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731160,"byte_end":8731177,"line_start":343,"line_end":343,"column_start":5,"column_end":22}},{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731182,"byte_end":8731217,"line_start":344,"line_end":344,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1197},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731683,"byte_end":8731703,"line_start":352,"line_end":352,"column_start":9,"column_end":29},"name":"java_outer_classname","qualname":"::FileOptions::java_outer_classname","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n","sig":null,"attributes":[{"value":"/ If set, all the classes from the .proto file are wrapped in a single","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731300,"byte_end":8731372,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/ outer class with the given name.  This applies to both Proto1","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731377,"byte_end":8731442,"line_start":347,"line_end":347,"column_start":5,"column_end":70}},{"value":"/ (equivalent to the old \"--one_java_file\" option) and Proto2 (where","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731447,"byte_end":8731517,"line_start":348,"line_end":348,"column_start":5,"column_end":75}},{"value":"/ a .proto always translates to a single class, but you may want to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731522,"byte_end":8731591,"line_start":349,"line_end":349,"column_start":5,"column_end":74}},{"value":"/ explicitly choose the class name).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731596,"byte_end":8731634,"line_start":350,"line_end":350,"column_start":5,"column_end":43}},{"value":"prost(string, optional, tag = \"8\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731639,"byte_end":8731674,"line_start":351,"line_end":351,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732271,"byte_end":8732290,"line_start":360,"line_end":360,"column_start":9,"column_end":28},"name":"java_multiple_files","qualname":"::FileOptions::java_multiple_files","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n","sig":null,"attributes":[{"value":"/ If set true, then the Java code generator will generate a separate .java","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731765,"byte_end":8731841,"line_start":353,"line_end":353,"column_start":5,"column_end":81}},{"value":"/ file for each top-level message, enum, and service defined in the .proto","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731846,"byte_end":8731922,"line_start":354,"line_end":354,"column_start":5,"column_end":81}},{"value":"/ file.  Thus, these types will *not* be nested inside the outer class","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731927,"byte_end":8731999,"line_start":355,"line_end":355,"column_start":5,"column_end":77}},{"value":"/ named by java_outer_classname.  However, the outer class will still be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732004,"byte_end":8732078,"line_start":356,"line_end":356,"column_start":5,"column_end":79}},{"value":"/ generated to contain the file's getDescriptor() method as well as any","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732083,"byte_end":8732156,"line_start":357,"line_end":357,"column_start":5,"column_end":78}},{"value":"/ top-level extensions defined in the file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732161,"byte_end":8732206,"line_start":358,"line_end":358,"column_start":5,"column_end":50}},{"value":"prost(bool, optional, tag = \"10\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732211,"byte_end":8732262,"line_start":359,"line_end":359,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1199},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732421,"byte_end":8732450,"line_start":364,"line_end":364,"column_start":9,"column_end":38},"name":"java_generate_equals_and_hash","qualname":"::FileOptions::java_generate_equals_and_hash","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" This option does nothing.\n","sig":null,"attributes":[{"value":"/ This option does nothing.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732326,"byte_end":8732355,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"deprecated","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732360,"byte_end":8732373,"line_start":362,"line_end":362,"column_start":5,"column_end":18}},{"value":"prost(bool, optional, tag = \"20\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732378,"byte_end":8732412,"line_start":363,"line_end":363,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1200},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732931,"byte_end":8732953,"line_start":372,"line_end":372,"column_start":9,"column_end":31},"name":"java_string_check_utf8","qualname":"::FileOptions::java_string_check_utf8","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" If set true, then the Java2 code generator will generate code that\n throws an exception whenever an attempt is made to assign a non-UTF-8\n byte sequence to a string field.\n Message reflection will do the same.\n However, an extension field still accepts non-UTF-8 byte sequences.\n This option has no effect on when used with the lite runtime.\n","sig":null,"attributes":[{"value":"/ If set true, then the Java2 code generator will generate code that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732486,"byte_end":8732556,"line_start":365,"line_end":365,"column_start":5,"column_end":75}},{"value":"/ throws an exception whenever an attempt is made to assign a non-UTF-8","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732561,"byte_end":8732634,"line_start":366,"line_end":366,"column_start":5,"column_end":78}},{"value":"/ byte sequence to a string field.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732639,"byte_end":8732675,"line_start":367,"line_end":367,"column_start":5,"column_end":41}},{"value":"/ Message reflection will do the same.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732680,"byte_end":8732720,"line_start":368,"line_end":368,"column_start":5,"column_end":45}},{"value":"/ However, an extension field still accepts non-UTF-8 byte sequences.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732725,"byte_end":8732796,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ This option has no effect on when used with the lite runtime.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732801,"byte_end":8732866,"line_start":370,"line_end":370,"column_start":5,"column_end":70}},{"value":"prost(bool, optional, tag = \"27\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732871,"byte_end":8732922,"line_start":371,"line_end":371,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733084,"byte_end":8733096,"line_start":374,"line_end":374,"column_start":9,"column_end":21},"name":"optimize_for","qualname":"::FileOptions::optimize_for","value":"core::option::Option<i32>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(enumeration = \"file_options::OptimizeMode\", optional, tag = \"9\",\n        default = \"Speed\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732989,"byte_end":8733075,"line_start":373,"line_end":373,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":1202},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733550,"byte_end":8733560,"line_start":381,"line_end":381,"column_start":9,"column_end":19},"name":"go_package","qualname":"::FileOptions::go_package","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n","sig":null,"attributes":[{"value":"/ Sets the Go package where structs generated from this .proto will be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733131,"byte_end":8733203,"line_start":375,"line_end":375,"column_start":5,"column_end":77}},{"value":"/ placed. If omitted, the Go package will be derived from the following:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733208,"byte_end":8733282,"line_start":376,"line_end":376,"column_start":5,"column_end":79}},{"value":"/   - The basename of the package import path, if provided.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733287,"byte_end":8733348,"line_start":377,"line_end":377,"column_start":5,"column_end":66}},{"value":"/   - Otherwise, the package statement in the .proto file, if present.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733353,"byte_end":8733425,"line_start":378,"line_end":378,"column_start":5,"column_end":77}},{"value":"/   - Otherwise, the basename of the .proto file, without extension.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733430,"byte_end":8733500,"line_start":379,"line_end":379,"column_start":5,"column_end":75}},{"value":"prost(string, optional, tag = \"11\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733505,"byte_end":8733541,"line_start":380,"line_end":380,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1203},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734333,"byte_end":8734352,"line_start":393,"line_end":393,"column_start":9,"column_end":28},"name":"cc_generic_services","qualname":"::FileOptions::cc_generic_services","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.","sig":null,"attributes":[{"value":"/ Should generic services be generated in each language?  \"Generic\" services","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733622,"byte_end":8733700,"line_start":382,"line_end":382,"column_start":5,"column_end":83}},{"value":"/ are not specific to any particular RPC system.  They are generated by the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733705,"byte_end":8733782,"line_start":383,"line_end":383,"column_start":5,"column_end":82}},{"value":"/ main code generators in each language (without additional plugins).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733787,"byte_end":8733858,"line_start":384,"line_end":384,"column_start":5,"column_end":76}},{"value":"/ Generic services were the only kind of service generation supported by","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733863,"byte_end":8733937,"line_start":385,"line_end":385,"column_start":5,"column_end":79}},{"value":"/ early versions of google.protobuf.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733942,"byte_end":8733980,"line_start":386,"line_end":386,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733985,"byte_end":8733988,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Generic services are now considered deprecated in favor of using plugins","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733993,"byte_end":8734069,"line_start":388,"line_end":388,"column_start":5,"column_end":81}},{"value":"/ that generate code specific to your particular RPC system.  Therefore,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734074,"byte_end":8734148,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ these default to false.  Old code which depends on generic services should","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734153,"byte_end":8734231,"line_start":390,"line_end":390,"column_start":5,"column_end":83}},{"value":"/ explicitly set them to true.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734236,"byte_end":8734268,"line_start":391,"line_end":391,"column_start":5,"column_end":37}},{"value":"prost(bool, optional, tag = \"16\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734273,"byte_end":8734324,"line_start":392,"line_end":392,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1204},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734448,"byte_end":8734469,"line_start":395,"line_end":395,"column_start":9,"column_end":30},"name":"java_generic_services","qualname":"::FileOptions::java_generic_services","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"17\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734388,"byte_end":8734439,"line_start":394,"line_end":394,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1205},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734565,"byte_end":8734584,"line_start":397,"line_end":397,"column_start":9,"column_end":28},"name":"py_generic_services","qualname":"::FileOptions::py_generic_services","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"18\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734505,"byte_end":8734556,"line_start":396,"line_end":396,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1206},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734680,"byte_end":8734700,"line_start":399,"line_end":399,"column_start":9,"column_end":29},"name":"php_generic_services","qualname":"::FileOptions::php_generic_services","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, optional, tag = \"42\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734620,"byte_end":8734671,"line_start":398,"line_end":398,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735052,"byte_end":8735062,"line_start":405,"line_end":405,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::FileOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n","sig":null,"attributes":[{"value":"/ Is this file deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734736,"byte_end":8734764,"line_start":400,"line_end":400,"column_start":5,"column_end":33}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734769,"byte_end":8734843,"line_start":401,"line_end":401,"column_start":5,"column_end":79}},{"value":"/ for everything in the file, or it will be completely ignored; in the very","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734848,"byte_end":8734925,"line_start":402,"line_end":402,"column_start":5,"column_end":82}},{"value":"/ least, this is a formalization for deprecating files.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734930,"byte_end":8734987,"line_start":403,"line_end":403,"column_start":5,"column_end":62}},{"value":"prost(bool, optional, tag = \"23\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734992,"byte_end":8735043,"line_start":404,"line_end":404,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1208},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735284,"byte_end":8735300,"line_start":409,"line_end":409,"column_start":9,"column_end":25},"name":"cc_enable_arenas","qualname":"::FileOptions::cc_enable_arenas","value":"core::option::Option<bool>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n","sig":null,"attributes":[{"value":"/ Enables the use of arenas for the proto messages in this file. This applies","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735098,"byte_end":8735177,"line_start":406,"line_end":406,"column_start":5,"column_end":84}},{"value":"/ only to generated classes for C++.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735182,"byte_end":8735220,"line_start":407,"line_end":407,"column_start":5,"column_end":43}},{"value":"prost(bool, optional, tag = \"31\", default = \"true\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735225,"byte_end":8735275,"line_start":408,"line_end":408,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735526,"byte_end":8735543,"line_start":413,"line_end":413,"column_start":9,"column_end":26},"name":"objc_class_prefix","qualname":"::FileOptions::objc_class_prefix","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n","sig":null,"attributes":[{"value":"/ Sets the objective c class prefix which is prepended to all objective c","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735336,"byte_end":8735411,"line_start":410,"line_end":410,"column_start":5,"column_end":80}},{"value":"/ generated classes from this .proto. There is no default.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735416,"byte_end":8735476,"line_start":411,"line_end":411,"column_start":5,"column_end":65}},{"value":"prost(string, optional, tag = \"36\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735481,"byte_end":8735517,"line_start":412,"line_end":412,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1210},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735716,"byte_end":8735732,"line_start":416,"line_end":416,"column_start":9,"column_end":25},"name":"csharp_namespace","qualname":"::FileOptions::csharp_namespace","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Namespace for generated classes; defaults to the package.\n","sig":null,"attributes":[{"value":"/ Namespace for generated classes; defaults to the package.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735605,"byte_end":8735666,"line_start":414,"line_end":414,"column_start":5,"column_end":66}},{"value":"prost(string, optional, tag = \"37\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735671,"byte_end":8735707,"line_start":415,"line_end":415,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1211},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736125,"byte_end":8736137,"line_start":422,"line_end":422,"column_start":9,"column_end":21},"name":"swift_prefix","qualname":"::FileOptions::swift_prefix","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n","sig":null,"attributes":[{"value":"/ By default Swift generators will take the proto package and CamelCase it","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735794,"byte_end":8735870,"line_start":417,"line_end":417,"column_start":5,"column_end":81}},{"value":"/ replacing '.' with underscore and use that to prefix the types/symbols","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735875,"byte_end":8735949,"line_start":418,"line_end":418,"column_start":5,"column_end":79}},{"value":"/ defined. When this options is provided, they will use this value instead","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735954,"byte_end":8736030,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ to prefix the types/symbols defined.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736035,"byte_end":8736075,"line_start":420,"line_end":420,"column_start":5,"column_end":45}},{"value":"prost(string, optional, tag = \"39\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736080,"byte_end":8736116,"line_start":421,"line_end":421,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1212},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736370,"byte_end":8736386,"line_start":426,"line_end":426,"column_start":9,"column_end":25},"name":"php_class_prefix","qualname":"::FileOptions::php_class_prefix","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n","sig":null,"attributes":[{"value":"/ Sets the php class prefix which is prepended to all php generated classes","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736199,"byte_end":8736276,"line_start":423,"line_end":423,"column_start":5,"column_end":82}},{"value":"/ from this .proto. Default is empty.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736281,"byte_end":8736320,"line_start":424,"line_end":424,"column_start":5,"column_end":44}},{"value":"prost(string, optional, tag = \"40\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736325,"byte_end":8736361,"line_start":425,"line_end":425,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1213},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736689,"byte_end":8736702,"line_start":431,"line_end":431,"column_start":9,"column_end":22},"name":"php_namespace","qualname":"::FileOptions::php_namespace","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n","sig":null,"attributes":[{"value":"/ Use this option to change the namespace of php generated classes. Default","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736448,"byte_end":8736525,"line_start":427,"line_end":427,"column_start":5,"column_end":82}},{"value":"/ is empty. When this option is empty, the package name will be used for","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736530,"byte_end":8736604,"line_start":428,"line_end":428,"column_start":5,"column_end":79}},{"value":"/ determining the namespace.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736609,"byte_end":8736639,"line_start":429,"line_end":429,"column_start":5,"column_end":35}},{"value":"prost(string, optional, tag = \"41\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736644,"byte_end":8736680,"line_start":430,"line_end":430,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1214},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737017,"byte_end":8737039,"line_start":436,"line_end":436,"column_start":9,"column_end":31},"name":"php_metadata_namespace","qualname":"::FileOptions::php_metadata_namespace","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.\n","sig":null,"attributes":[{"value":"/ Use this option to change the namespace of php generated metadata classes.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736764,"byte_end":8736842,"line_start":432,"line_end":432,"column_start":5,"column_end":83}},{"value":"/ Default is empty. When this option is empty, the proto file name will be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736847,"byte_end":8736923,"line_start":433,"line_end":433,"column_start":5,"column_end":81}},{"value":"/ used for determining the namespace.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736928,"byte_end":8736967,"line_start":434,"line_end":434,"column_start":5,"column_end":44}},{"value":"prost(string, optional, tag = \"44\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736972,"byte_end":8737008,"line_start":435,"line_end":435,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737346,"byte_end":8737358,"line_start":441,"line_end":441,"column_start":9,"column_end":21},"name":"ruby_package","qualname":"::FileOptions::ruby_package","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n","sig":null,"attributes":[{"value":"/ Use this option to change the package of ruby generated classes. Default","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737101,"byte_end":8737177,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/ is empty. When this option is not set, the package name will be used for","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737182,"byte_end":8737258,"line_start":438,"line_end":438,"column_start":5,"column_end":81}},{"value":"/ determining the ruby package.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737263,"byte_end":8737296,"line_start":439,"line_end":439,"column_start":5,"column_end":38}},{"value":"prost(string, optional, tag = \"45\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737301,"byte_end":8737337,"line_start":440,"line_end":440,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1216},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737591,"byte_end":8737611,"line_start":445,"line_end":445,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::FileOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737420,"byte_end":8737476,"line_start":442,"line_end":442,"column_start":5,"column_end":61}},{"value":"/ See the documentation for the \"Options\" section above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737481,"byte_end":8737539,"line_start":443,"line_end":443,"column_start":5,"column_end":63}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737544,"byte_end":8737582,"line_start":444,"line_end":444,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731226,"byte_end":8731238,"line_start":345,"line_end":345,"column_start":9,"column_end":21},"name":"java_package","qualname":"<FileOptions>::java_package","value":"pub fn java_package(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `java_package`, or the default value if `java_package` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8731683,"byte_end":8731703,"line_start":352,"line_end":352,"column_start":9,"column_end":29},"name":"java_outer_classname","qualname":"<FileOptions>::java_outer_classname","value":"pub fn java_outer_classname(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `java_outer_classname`, or the default value if `java_outer_classname` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733084,"byte_end":8733096,"line_start":374,"line_end":374,"column_start":9,"column_end":21},"name":"optimize_for","qualname":"<FileOptions>::optimize_for","value":"pub fn optimize_for(&Self) -> file_options::OptimizeMode","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `optimize_for`, or the default if the field is unset or set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732271,"byte_end":8732290,"line_start":360,"line_end":360,"column_start":9,"column_end":28},"name":"java_multiple_files","qualname":"<FileOptions>::java_multiple_files","value":"pub fn java_multiple_files(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `java_multiple_files`, or the default value if `java_multiple_files` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8733550,"byte_end":8733560,"line_start":381,"line_end":381,"column_start":9,"column_end":19},"name":"go_package","qualname":"<FileOptions>::go_package","value":"pub fn go_package(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `go_package`, or the default value if `go_package` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734333,"byte_end":8734352,"line_start":393,"line_end":393,"column_start":9,"column_end":28},"name":"cc_generic_services","qualname":"<FileOptions>::cc_generic_services","value":"pub fn cc_generic_services(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `cc_generic_services`, or the default value if `cc_generic_services` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734448,"byte_end":8734469,"line_start":395,"line_end":395,"column_start":9,"column_end":30},"name":"java_generic_services","qualname":"<FileOptions>::java_generic_services","value":"pub fn java_generic_services(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `java_generic_services`, or the default value if `java_generic_services` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734565,"byte_end":8734584,"line_start":397,"line_end":397,"column_start":9,"column_end":28},"name":"py_generic_services","qualname":"<FileOptions>::py_generic_services","value":"pub fn py_generic_services(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `py_generic_services`, or the default value if `py_generic_services` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732421,"byte_end":8732450,"line_start":364,"line_end":364,"column_start":9,"column_end":38},"name":"java_generate_equals_and_hash","qualname":"<FileOptions>::java_generate_equals_and_hash","value":"pub fn java_generate_equals_and_hash(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `java_generate_equals_and_hash`, or the default value if `java_generate_equals_and_hash` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735052,"byte_end":8735062,"line_start":405,"line_end":405,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<FileOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8732931,"byte_end":8732953,"line_start":372,"line_end":372,"column_start":9,"column_end":31},"name":"java_string_check_utf8","qualname":"<FileOptions>::java_string_check_utf8","value":"pub fn java_string_check_utf8(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `java_string_check_utf8`, or the default value if `java_string_check_utf8` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735284,"byte_end":8735300,"line_start":409,"line_end":409,"column_start":9,"column_end":25},"name":"cc_enable_arenas","qualname":"<FileOptions>::cc_enable_arenas","value":"pub fn cc_enable_arenas(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `cc_enable_arenas`, or the default value if `cc_enable_arenas` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735526,"byte_end":8735543,"line_start":413,"line_end":413,"column_start":9,"column_end":26},"name":"objc_class_prefix","qualname":"<FileOptions>::objc_class_prefix","value":"pub fn objc_class_prefix(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `objc_class_prefix`, or the default value if `objc_class_prefix` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8735716,"byte_end":8735732,"line_start":416,"line_end":416,"column_start":9,"column_end":25},"name":"csharp_namespace","qualname":"<FileOptions>::csharp_namespace","value":"pub fn csharp_namespace(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `csharp_namespace`, or the default value if `csharp_namespace` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736125,"byte_end":8736137,"line_start":422,"line_end":422,"column_start":9,"column_end":21},"name":"swift_prefix","qualname":"<FileOptions>::swift_prefix","value":"pub fn swift_prefix(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `swift_prefix`, or the default value if `swift_prefix` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736370,"byte_end":8736386,"line_start":426,"line_end":426,"column_start":9,"column_end":25},"name":"php_class_prefix","qualname":"<FileOptions>::php_class_prefix","value":"pub fn php_class_prefix(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `php_class_prefix`, or the default value if `php_class_prefix` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8736689,"byte_end":8736702,"line_start":431,"line_end":431,"column_start":9,"column_end":22},"name":"php_namespace","qualname":"<FileOptions>::php_namespace","value":"pub fn php_namespace(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `php_namespace`, or the default value if `php_namespace` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8734680,"byte_end":8734700,"line_start":399,"line_end":399,"column_start":9,"column_end":29},"name":"php_generic_services","qualname":"<FileOptions>::php_generic_services","value":"pub fn php_generic_services(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `php_generic_services`, or the default value if `php_generic_services` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737017,"byte_end":8737039,"line_start":436,"line_end":436,"column_start":9,"column_end":31},"name":"php_metadata_namespace","qualname":"<FileOptions>::php_metadata_namespace","value":"pub fn php_metadata_namespace(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `php_metadata_namespace`, or the default value if `php_metadata_namespace` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737346,"byte_end":8737358,"line_start":441,"line_end":441,"column_start":9,"column_end":21},"name":"ruby_package","qualname":"<FileOptions>::ruby_package","value":"pub fn ruby_package(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `ruby_package`, or the default value if `ruby_package` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737722,"byte_end":8737734,"line_start":448,"line_end":448,"column_start":9,"column_end":21},"name":"file_options","qualname":"::file_options","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1250}],"decl_id":null,"docs":" Nested message and enum types in `FileOptions`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `FileOptions`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737662,"byte_end":8737713,"line_start":447,"line_end":447,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1218},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738014,"byte_end":8738019,"line_start":454,"line_end":454,"column_start":9,"column_end":14},"name":"Speed","qualname":"::file_options::OptimizeMode::Speed","value":"OptimizeMode::Speed","parent":{"krate":0,"index":1217},"children":[],"decl_id":null,"docs":" Generate complete code for parsing, serialization,\n","sig":null,"attributes":[{"value":"/ Generate complete code for parsing, serialization,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737951,"byte_end":8738005,"line_start":453,"line_end":453,"column_start":9,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1221},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738120,"byte_end":8738128,"line_start":458,"line_end":458,"column_start":9,"column_end":17},"name":"CodeSize","qualname":"::file_options::OptimizeMode::CodeSize","value":"OptimizeMode::CodeSize","parent":{"krate":0,"index":1217},"children":[],"decl_id":null,"docs":" etc.","sig":null,"attributes":[{"value":"/ etc.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738033,"byte_end":8738041,"line_start":455,"line_end":455,"column_start":9,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738050,"byte_end":8738053,"line_start":456,"line_end":456,"column_start":9,"column_end":12}},{"value":"/ Use ReflectionOps to implement these methods.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738062,"byte_end":8738111,"line_start":457,"line_end":457,"column_start":9,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1224},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738208,"byte_end":8738219,"line_start":460,"line_end":460,"column_start":9,"column_end":20},"name":"LiteRuntime","qualname":"::file_options::OptimizeMode::LiteRuntime","value":"OptimizeMode::LiteRuntime","parent":{"krate":0,"index":1217},"children":[],"decl_id":null,"docs":" Generate code using MessageLite and the lite runtime.\n","sig":null,"attributes":[{"value":"/ Generate code using MessageLite and the lite runtime.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738142,"byte_end":8738199,"line_start":459,"line_end":459,"column_start":9,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":1217},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737928,"byte_end":8737940,"line_start":452,"line_end":452,"column_start":14,"column_end":26},"name":"OptimizeMode","qualname":"::file_options::OptimizeMode","value":"pub enum OptimizeMode { Speed = , CodeSize = , LiteRuntime = , }","parent":null,"children":[{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1224}],"decl_id":null,"docs":" Generated classes can be optimized for speed or code size.\n","sig":null,"attributes":[{"value":"/ Generated classes can be optimized for speed or code size.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737741,"byte_end":8737803,"line_start":449,"line_end":449,"column_start":5,"column_end":67}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8737902,"byte_end":8737914,"line_start":451,"line_end":451,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738290,"byte_end":8738304,"line_start":464,"line_end":464,"column_start":12,"column_end":26},"name":"MessageOptions","qualname":"::MessageOptions","value":"MessageOptions { message_set_wire_format, no_standard_descriptor_accessor, deprecated, map_entry, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739209,"byte_end":8739232,"line_start":484,"line_end":484,"column_start":9,"column_end":32},"name":"message_set_wire_format","qualname":"::MessageOptions::message_set_wire_format","value":"core::option::Option<bool>","parent":{"krate":0,"index":1252},"children":[],"decl_id":null,"docs":" Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.","sig":null,"attributes":[{"value":"/ Set true to use the old proto1 MessageSet wire format for extensions.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738311,"byte_end":8738384,"line_start":465,"line_end":465,"column_start":5,"column_end":78}},{"value":"/ This is provided for backwards-compatibility with the MessageSet wire","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738389,"byte_end":8738462,"line_start":466,"line_end":466,"column_start":5,"column_end":78}},{"value":"/ format.  You should not use this for any other reason:  It's less","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738467,"byte_end":8738536,"line_start":467,"line_end":467,"column_start":5,"column_end":74}},{"value":"/ efficient, has fewer features, and is more complicated.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738541,"byte_end":8738600,"line_start":468,"line_end":468,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738605,"byte_end":8738608,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ The message must be defined exactly as follows:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738613,"byte_end":8738664,"line_start":470,"line_end":470,"column_start":5,"column_end":56}},{"value":"/   message Foo {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738669,"byte_end":8738688,"line_start":471,"line_end":471,"column_start":5,"column_end":24}},{"value":"/     option message_set_wire_format = true;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738693,"byte_end":8738739,"line_start":472,"line_end":472,"column_start":5,"column_end":51}},{"value":"/     extensions 4 to max;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738744,"byte_end":8738772,"line_start":473,"line_end":473,"column_start":5,"column_end":33}},{"value":"/   }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738777,"byte_end":8738784,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ Note that the message cannot have any defined fields; MessageSets only","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738789,"byte_end":8738863,"line_start":475,"line_end":475,"column_start":5,"column_end":79}},{"value":"/ have extensions.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738868,"byte_end":8738888,"line_start":476,"line_end":476,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738893,"byte_end":8738896,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ All extensions of your type must be singular messages; e.g. they cannot","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738901,"byte_end":8738976,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"/ be int32s, enums, or repeated messages.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8738981,"byte_end":8739024,"line_start":479,"line_end":479,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739029,"byte_end":8739032,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Because this is an option, the above two restrictions are not enforced by","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739037,"byte_end":8739114,"line_start":481,"line_end":481,"column_start":5,"column_end":82}},{"value":"/ the protocol compiler.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739119,"byte_end":8739145,"line_start":482,"line_end":482,"column_start":5,"column_end":31}},{"value":"prost(bool, optional, tag = \"1\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739150,"byte_end":8739200,"line_start":483,"line_end":483,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1322},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739568,"byte_end":8739599,"line_start":489,"line_end":489,"column_start":9,"column_end":40},"name":"no_standard_descriptor_accessor","qualname":"::MessageOptions::no_standard_descriptor_accessor","value":"core::option::Option<bool>","parent":{"krate":0,"index":1252},"children":[],"decl_id":null,"docs":" Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n","sig":null,"attributes":[{"value":"/ Disables the generation of the standard \"descriptor()\" accessor, which can","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739268,"byte_end":8739346,"line_start":485,"line_end":485,"column_start":5,"column_end":83}},{"value":"/ conflict with a field of the same name.  This is meant to make migration","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739351,"byte_end":8739427,"line_start":486,"line_end":486,"column_start":5,"column_end":81}},{"value":"/ from proto1 easier; new code should avoid fields named \"descriptor\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739432,"byte_end":8739504,"line_start":487,"line_end":487,"column_start":5,"column_end":77}},{"value":"prost(bool, optional, tag = \"2\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739509,"byte_end":8739559,"line_start":488,"line_end":488,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739945,"byte_end":8739955,"line_start":495,"line_end":495,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::MessageOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":1252},"children":[],"decl_id":null,"docs":" Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n","sig":null,"attributes":[{"value":"/ Is this message deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739635,"byte_end":8739666,"line_start":490,"line_end":490,"column_start":5,"column_end":36}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739671,"byte_end":8739745,"line_start":491,"line_end":491,"column_start":5,"column_end":79}},{"value":"/ for the message, or it will be completely ignored; in the very least,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739750,"byte_end":8739823,"line_start":492,"line_end":492,"column_start":5,"column_end":78}},{"value":"/ this is a formalization for deprecating messages.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739828,"byte_end":8739881,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"prost(bool, optional, tag = \"3\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739886,"byte_end":8739936,"line_start":494,"line_end":494,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740965,"byte_end":8740974,"line_start":518,"line_end":518,"column_start":9,"column_end":18},"name":"map_entry","qualname":"::MessageOptions::map_entry","value":"core::option::Option<bool>","parent":{"krate":0,"index":1252},"children":[],"decl_id":null,"docs":" Whether the message is an automatically generated map entry type for the\n maps field.","sig":null,"attributes":[{"value":"/ Whether the message is an automatically generated map entry type for the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739991,"byte_end":8740067,"line_start":496,"line_end":496,"column_start":5,"column_end":81}},{"value":"/ maps field.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740072,"byte_end":8740087,"line_start":497,"line_end":497,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740092,"byte_end":8740095,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ For maps fields:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740100,"byte_end":8740120,"line_start":499,"line_end":499,"column_start":5,"column_end":25}},{"value":"/     map<KeyType, ValueType> map_field = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740125,"byte_end":8740171,"line_start":500,"line_end":500,"column_start":5,"column_end":51}},{"value":"/ The parsed descriptor looks like:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740176,"byte_end":8740213,"line_start":501,"line_end":501,"column_start":5,"column_end":42}},{"value":"/     message MapFieldEntry {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740218,"byte_end":8740249,"line_start":502,"line_end":502,"column_start":5,"column_end":36}},{"value":"/         option map_entry = true;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740254,"byte_end":8740290,"line_start":503,"line_end":503,"column_start":5,"column_end":41}},{"value":"/         optional KeyType key = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740295,"byte_end":8740332,"line_start":504,"line_end":504,"column_start":5,"column_end":42}},{"value":"/         optional ValueType value = 2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740337,"byte_end":8740378,"line_start":505,"line_end":505,"column_start":5,"column_end":46}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740383,"byte_end":8740392,"line_start":506,"line_end":506,"column_start":5,"column_end":14}},{"value":"/     repeated MapFieldEntry map_field = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740397,"byte_end":8740442,"line_start":507,"line_end":507,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740447,"byte_end":8740450,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ Implementations may choose not to generate the map_entry=true message, but","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740455,"byte_end":8740533,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/ use a native map in the target language to hold the keys and values.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740538,"byte_end":8740610,"line_start":510,"line_end":510,"column_start":5,"column_end":77}},{"value":"/ The reflection APIs in such implementations still need to work as","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740615,"byte_end":8740684,"line_start":511,"line_end":511,"column_start":5,"column_end":74}},{"value":"/ if the field is a repeated message field.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740689,"byte_end":8740734,"line_start":512,"line_end":512,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740739,"byte_end":8740742,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ NOTE: Do not set the option in .proto files. Always use the maps syntax","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740747,"byte_end":8740822,"line_start":514,"line_end":514,"column_start":5,"column_end":80}},{"value":"/ instead. The option should only be implicitly set by the proto compiler","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740827,"byte_end":8740902,"line_start":515,"line_end":515,"column_start":5,"column_end":80}},{"value":"/ parser.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740907,"byte_end":8740918,"line_start":516,"line_end":516,"column_start":5,"column_end":16}},{"value":"prost(bool, optional, tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740923,"byte_end":8740956,"line_start":517,"line_end":517,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741129,"byte_end":8741149,"line_start":521,"line_end":521,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::MessageOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1252},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741010,"byte_end":8741077,"line_start":519,"line_end":519,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741082,"byte_end":8741120,"line_start":520,"line_end":520,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739209,"byte_end":8739232,"line_start":484,"line_end":484,"column_start":9,"column_end":32},"name":"message_set_wire_format","qualname":"<MessageOptions>::message_set_wire_format","value":"pub fn message_set_wire_format(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `message_set_wire_format`, or the default value if `message_set_wire_format` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739568,"byte_end":8739599,"line_start":489,"line_end":489,"column_start":9,"column_end":40},"name":"no_standard_descriptor_accessor","qualname":"<MessageOptions>::no_standard_descriptor_accessor","value":"pub fn no_standard_descriptor_accessor(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `no_standard_descriptor_accessor`, or the default value if `no_standard_descriptor_accessor` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8739945,"byte_end":8739955,"line_start":495,"line_end":495,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<MessageOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8740965,"byte_end":8740974,"line_start":518,"line_end":518,"column_start":9,"column_end":18},"name":"map_entry","qualname":"<MessageOptions>::map_entry","value":"pub fn map_entry(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `map_entry`, or the default value if `map_entry` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741257,"byte_end":8741269,"line_start":524,"line_end":524,"column_start":12,"column_end":24},"name":"FieldOptions","qualname":"::FieldOptions","value":"FieldOptions { ctype, packed, jstype, lazy, deprecated, weak, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741670,"byte_end":8741675,"line_start":530,"line_end":530,"column_start":9,"column_end":14},"name":"ctype","qualname":"::FieldOptions::ctype","value":"core::option::Option<i32>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n","sig":null,"attributes":[{"value":"/ The ctype option instructs the C++ code generator to use a different","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741276,"byte_end":8741348,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/ representation of the field than it normally would.  See the specific","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741353,"byte_end":8741426,"line_start":526,"line_end":526,"column_start":5,"column_end":78}},{"value":"/ options below.  This option is not yet implemented in the open source","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741431,"byte_end":8741504,"line_start":527,"line_end":527,"column_start":5,"column_end":78}},{"value":"/ release -- sorry, we'll try to include it in a future version!","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741509,"byte_end":8741575,"line_start":528,"line_end":528,"column_start":5,"column_end":71}},{"value":"prost(enumeration = \"field_options::CType\", optional, tag = \"1\", default =\n        \"String\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741580,"byte_end":8741661,"line_start":529,"line_end":529,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742118,"byte_end":8742124,"line_start":537,"line_end":537,"column_start":9,"column_end":15},"name":"packed","qualname":"::FieldOptions::packed","value":"core::option::Option<bool>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.\n","sig":null,"attributes":[{"value":"/ The packed option can be enabled for repeated primitive fields to enable","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741710,"byte_end":8741786,"line_start":531,"line_end":531,"column_start":5,"column_end":81}},{"value":"/ a more efficient representation on the wire. Rather than repeatedly","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741791,"byte_end":8741862,"line_start":532,"line_end":532,"column_start":5,"column_end":76}},{"value":"/ writing the tag and type for each element, the entire array is encoded as","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741867,"byte_end":8741944,"line_start":533,"line_end":533,"column_start":5,"column_end":82}},{"value":"/ a single length-delimited blob. In proto3, only explicit setting it to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741949,"byte_end":8742023,"line_start":534,"line_end":534,"column_start":5,"column_end":79}},{"value":"/ false will avoid using packed encoding.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742028,"byte_end":8742071,"line_start":535,"line_end":535,"column_start":5,"column_end":48}},{"value":"prost(bool, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742076,"byte_end":8742109,"line_start":536,"line_end":536,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1433},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742981,"byte_end":8742987,"line_start":550,"line_end":550,"column_start":9,"column_end":15},"name":"jstype","qualname":"::FieldOptions::jstype","value":"core::option::Option<i32>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.","sig":null,"attributes":[{"value":"/ The jstype option determines the JavaScript type used for values of the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742160,"byte_end":8742235,"line_start":538,"line_end":538,"column_start":5,"column_end":80}},{"value":"/ field.  The option is permitted only for 64 bit integral and fixed types","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742240,"byte_end":8742316,"line_start":539,"line_end":539,"column_start":5,"column_end":81}},{"value":"/ (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742321,"byte_end":8742399,"line_start":540,"line_end":540,"column_start":5,"column_end":83}},{"value":"/ is represented as JavaScript string, which avoids loss of precision that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742404,"byte_end":8742480,"line_start":541,"line_end":541,"column_start":5,"column_end":81}},{"value":"/ can happen when a large value is converted to a floating point JavaScript.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742485,"byte_end":8742563,"line_start":542,"line_end":542,"column_start":5,"column_end":83}},{"value":"/ Specifying JS_NUMBER for the jstype causes the generated JavaScript code to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742568,"byte_end":8742647,"line_start":543,"line_end":543,"column_start":5,"column_end":84}},{"value":"/ use the JavaScript \"number\" type.  The behavior of the default option","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742652,"byte_end":8742725,"line_start":544,"line_end":544,"column_start":5,"column_end":78}},{"value":"/ JS_NORMAL is implementation dependent.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742730,"byte_end":8742772,"line_start":545,"line_end":545,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742777,"byte_end":8742780,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ This option is an enum to permit additional types to be added, e.g.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742785,"byte_end":8742856,"line_start":547,"line_end":547,"column_start":5,"column_end":76}},{"value":"/ goog.math.Integer.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742861,"byte_end":8742883,"line_start":548,"line_end":548,"column_start":5,"column_end":27}},{"value":"prost(enumeration = \"field_options::JsType\", optional, tag = \"6\", default =\n        \"JsNormal\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742888,"byte_end":8742972,"line_start":549,"line_end":549,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1434},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744909,"byte_end":8744913,"line_start":580,"line_end":580,"column_start":9,"column_end":13},"name":"lazy","qualname":"::FieldOptions::lazy","value":"core::option::Option<bool>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.","sig":null,"attributes":[{"value":"/ Should this field be parsed lazily?  Lazy applies only to message-type","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743022,"byte_end":8743096,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"/ fields.  It means that when the outer message is initially parsed, the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743101,"byte_end":8743175,"line_start":552,"line_end":552,"column_start":5,"column_end":79}},{"value":"/ inner message's contents will not be parsed but instead stored in encoded","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743180,"byte_end":8743257,"line_start":553,"line_end":553,"column_start":5,"column_end":82}},{"value":"/ form.  The inner message will actually be parsed when it is first accessed.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743262,"byte_end":8743341,"line_start":554,"line_end":554,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743346,"byte_end":8743349,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ This is only a hint.  Implementations are free to choose whether to use","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743354,"byte_end":8743429,"line_start":556,"line_end":556,"column_start":5,"column_end":80}},{"value":"/ eager or lazy parsing regardless of the value of this option.  However,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743434,"byte_end":8743509,"line_start":557,"line_end":557,"column_start":5,"column_end":80}},{"value":"/ setting this option true suggests that the protocol author believes that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743514,"byte_end":8743590,"line_start":558,"line_end":558,"column_start":5,"column_end":81}},{"value":"/ using lazy parsing on this field is worth the additional bookkeeping","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743595,"byte_end":8743667,"line_start":559,"line_end":559,"column_start":5,"column_end":77}},{"value":"/ overhead typically needed to implement it.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743672,"byte_end":8743718,"line_start":560,"line_end":560,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743723,"byte_end":8743726,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ This option does not affect the public interface of any generated code;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743731,"byte_end":8743806,"line_start":562,"line_end":562,"column_start":5,"column_end":80}},{"value":"/ all method signatures remain the same.  Furthermore, thread-safety of the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743811,"byte_end":8743888,"line_start":563,"line_end":563,"column_start":5,"column_end":82}},{"value":"/ interface is not affected by this option; const methods remain safe to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743893,"byte_end":8743967,"line_start":564,"line_end":564,"column_start":5,"column_end":79}},{"value":"/ call from multiple threads concurrently, while non-const methods continue","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8743972,"byte_end":8744049,"line_start":565,"line_end":565,"column_start":5,"column_end":82}},{"value":"/ to require exclusive access.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744054,"byte_end":8744086,"line_start":566,"line_end":566,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744091,"byte_end":8744094,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744099,"byte_end":8744102,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Note that implementations may choose not to check required fields within","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744107,"byte_end":8744183,"line_start":569,"line_end":569,"column_start":5,"column_end":81}},{"value":"/ a lazy sub-message.  That is, calling IsInitialized() on the outer message","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744188,"byte_end":8744266,"line_start":570,"line_end":570,"column_start":5,"column_end":83}},{"value":"/ may return true even if the inner message has missing required fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744271,"byte_end":8744345,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ This is necessary because otherwise the inner message would have to be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744350,"byte_end":8744424,"line_start":572,"line_end":572,"column_start":5,"column_end":79}},{"value":"/ parsed in order to perform the check, defeating the purpose of lazy","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744429,"byte_end":8744500,"line_start":573,"line_end":573,"column_start":5,"column_end":76}},{"value":"/ parsing.  An implementation which chooses not to check required fields","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744505,"byte_end":8744579,"line_start":574,"line_end":574,"column_start":5,"column_end":79}},{"value":"/ must be consistent about it.  That is, for any particular sub-message, the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744584,"byte_end":8744662,"line_start":575,"line_end":575,"column_start":5,"column_end":83}},{"value":"/ implementation must either *always* check its required fields, or *never*","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744667,"byte_end":8744744,"line_start":576,"line_end":576,"column_start":5,"column_end":82}},{"value":"/ check its required fields, regardless of whether or not the message has","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744749,"byte_end":8744824,"line_start":577,"line_end":577,"column_start":5,"column_end":80}},{"value":"/ been parsed.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744829,"byte_end":8744845,"line_start":578,"line_end":578,"column_start":5,"column_end":21}},{"value":"prost(bool, optional, tag = \"5\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744850,"byte_end":8744900,"line_start":579,"line_end":579,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1435},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745253,"byte_end":8745263,"line_start":586,"line_end":586,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::FieldOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n","sig":null,"attributes":[{"value":"/ Is this field deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744949,"byte_end":8744978,"line_start":581,"line_end":581,"column_start":5,"column_end":34}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744983,"byte_end":8745057,"line_start":582,"line_end":582,"column_start":5,"column_end":79}},{"value":"/ for accessors, or it will be completely ignored; in the very least, this","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745062,"byte_end":8745138,"line_start":583,"line_end":583,"column_start":5,"column_end":81}},{"value":"/ is a formalization for deprecating fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745143,"byte_end":8745189,"line_start":584,"line_end":584,"column_start":5,"column_end":51}},{"value":"prost(bool, optional, tag = \"3\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745194,"byte_end":8745244,"line_start":585,"line_end":585,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1436},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745415,"byte_end":8745419,"line_start":589,"line_end":589,"column_start":9,"column_end":13},"name":"weak","qualname":"::FieldOptions::weak","value":"core::option::Option<bool>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" For Google-internal migration only. Do not use.\n","sig":null,"attributes":[{"value":"/ For Google-internal migration only. Do not use.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745299,"byte_end":8745350,"line_start":587,"line_end":587,"column_start":5,"column_end":56}},{"value":"prost(bool, optional, tag = \"10\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745355,"byte_end":8745406,"line_start":588,"line_end":588,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1437},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745574,"byte_end":8745594,"line_start":592,"line_end":592,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::FieldOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745455,"byte_end":8745522,"line_start":590,"line_end":590,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745527,"byte_end":8745565,"line_start":591,"line_end":591,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8741670,"byte_end":8741675,"line_start":530,"line_end":530,"column_start":9,"column_end":14},"name":"ctype","qualname":"<FieldOptions>::ctype","value":"pub fn ctype(&Self) -> field_options::CType","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `ctype`, or the default if the field is unset or set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742118,"byte_end":8742124,"line_start":537,"line_end":537,"column_start":9,"column_end":15},"name":"packed","qualname":"<FieldOptions>::packed","value":"pub fn packed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `packed`, or the default value if `packed` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745253,"byte_end":8745263,"line_start":586,"line_end":586,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<FieldOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8744909,"byte_end":8744913,"line_start":580,"line_end":580,"column_start":9,"column_end":13},"name":"lazy","qualname":"<FieldOptions>::lazy","value":"pub fn lazy(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `lazy`, or the default value if `lazy` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8742981,"byte_end":8742987,"line_start":550,"line_end":550,"column_start":9,"column_end":15},"name":"jstype","qualname":"<FieldOptions>::jstype","value":"pub fn jstype(&Self) -> field_options::JsType","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `jstype`, or the default if the field is unset or set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745415,"byte_end":8745419,"line_start":589,"line_end":589,"column_start":9,"column_end":13},"name":"weak","qualname":"<FieldOptions>::weak","value":"pub fn weak(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `weak`, or the default value if `weak` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745706,"byte_end":8745719,"line_start":595,"line_end":595,"column_start":9,"column_end":22},"name":"field_options","qualname":"::field_options","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1438},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1469},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1506}],"decl_id":null,"docs":" Nested message and enum types in `FieldOptions`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `FieldOptions`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745645,"byte_end":8745697,"line_start":594,"line_end":594,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745888,"byte_end":8745894,"line_start":600,"line_end":600,"column_start":9,"column_end":15},"name":"String","qualname":"::field_options::CType::String","value":"CType::String","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":" Default mode.\n","sig":null,"attributes":[{"value":"/ Default mode.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745862,"byte_end":8745879,"line_start":599,"line_end":599,"column_start":9,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1442},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745908,"byte_end":8745912,"line_start":601,"line_end":601,"column_start":9,"column_end":13},"name":"Cord","qualname":"::field_options::CType::Cord","value":"CType::Cord","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1445},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745926,"byte_end":8745937,"line_start":602,"line_end":602,"column_start":9,"column_end":20},"name":"StringPiece","qualname":"::field_options::CType::StringPiece","value":"CType::StringPiece","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1438},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745846,"byte_end":8745851,"line_start":598,"line_end":598,"column_start":14,"column_end":19},"name":"CType","qualname":"::field_options::CType","value":"pub enum CType { String = , Cord = , StringPiece = , }","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1442},{"krate":0,"index":1445}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8745820,"byte_end":8745832,"line_start":597,"line_end":597,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1474},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746124,"byte_end":8746132,"line_start":608,"line_end":608,"column_start":9,"column_end":17},"name":"JsNormal","qualname":"::field_options::JsType::JsNormal","value":"JsType::JsNormal","parent":{"krate":0,"index":1473},"children":[],"decl_id":null,"docs":" Use the default type.\n","sig":null,"attributes":[{"value":"/ Use the default type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746090,"byte_end":8746115,"line_start":607,"line_end":607,"column_start":9,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746182,"byte_end":8746190,"line_start":610,"line_end":610,"column_start":9,"column_end":17},"name":"JsString","qualname":"::field_options::JsType::JsString","value":"JsType::JsString","parent":{"krate":0,"index":1473},"children":[],"decl_id":null,"docs":" Use JavaScript strings.\n","sig":null,"attributes":[{"value":"/ Use JavaScript strings.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746146,"byte_end":8746173,"line_start":609,"line_end":609,"column_start":9,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746240,"byte_end":8746248,"line_start":612,"line_end":612,"column_start":9,"column_end":17},"name":"JsNumber","qualname":"::field_options::JsType::JsNumber","value":"JsType::JsNumber","parent":{"krate":0,"index":1473},"children":[],"decl_id":null,"docs":" Use JavaScript numbers.\n","sig":null,"attributes":[{"value":"/ Use JavaScript numbers.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746204,"byte_end":8746231,"line_start":611,"line_end":611,"column_start":9,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1473},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746073,"byte_end":8746079,"line_start":606,"line_end":606,"column_start":14,"column_end":20},"name":"JsType","qualname":"::field_options::JsType","value":"pub enum JsType { JsNormal = , JsString = , JsNumber = , }","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1477},{"krate":0,"index":1480}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746047,"byte_end":8746059,"line_start":605,"line_end":605,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1508},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746319,"byte_end":8746331,"line_start":616,"line_end":616,"column_start":12,"column_end":24},"name":"OneofOptions","qualname":"::OneofOptions","value":"OneofOptions { uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1528}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746457,"byte_end":8746477,"line_start":619,"line_end":619,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::OneofOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1508},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746338,"byte_end":8746405,"line_start":617,"line_end":617,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746410,"byte_end":8746448,"line_start":618,"line_end":618,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746585,"byte_end":8746596,"line_start":622,"line_end":622,"column_start":12,"column_end":23},"name":"EnumOptions","qualname":"::EnumOptions","value":"EnumOptions { allow_alias, deprecated, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746741,"byte_end":8746752,"line_start":626,"line_end":626,"column_start":9,"column_end":20},"name":"allow_alias","qualname":"::EnumOptions::allow_alias","value":"core::option::Option<bool>","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Set this option to true to allow mapping different tag names to the same\n value.\n","sig":null,"attributes":[{"value":"/ Set this option to true to allow mapping different tag names to the same","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746603,"byte_end":8746679,"line_start":623,"line_end":623,"column_start":5,"column_end":81}},{"value":"/ value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746684,"byte_end":8746694,"line_start":624,"line_end":624,"column_start":5,"column_end":15}},{"value":"prost(bool, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746699,"byte_end":8746732,"line_start":625,"line_end":625,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747089,"byte_end":8747099,"line_start":632,"line_end":632,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::EnumOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n","sig":null,"attributes":[{"value":"/ Is this enum deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746788,"byte_end":8746816,"line_start":627,"line_end":627,"column_start":5,"column_end":33}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746821,"byte_end":8746895,"line_start":628,"line_end":628,"column_start":5,"column_end":79}},{"value":"/ for the enum, or it will be completely ignored; in the very least, this","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746900,"byte_end":8746975,"line_start":629,"line_end":629,"column_start":5,"column_end":80}},{"value":"/ is a formalization for deprecating enums.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746980,"byte_end":8747025,"line_start":630,"line_end":630,"column_start":5,"column_end":50}},{"value":"prost(bool, optional, tag = \"3\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747030,"byte_end":8747080,"line_start":631,"line_end":631,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747254,"byte_end":8747274,"line_start":635,"line_end":635,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::EnumOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1529},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747135,"byte_end":8747202,"line_start":633,"line_end":633,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747207,"byte_end":8747245,"line_start":634,"line_end":634,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8746741,"byte_end":8746752,"line_start":626,"line_end":626,"column_start":9,"column_end":20},"name":"allow_alias","qualname":"<EnumOptions>::allow_alias","value":"pub fn allow_alias(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `allow_alias`, or the default value if `allow_alias` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747089,"byte_end":8747099,"line_start":632,"line_end":632,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<EnumOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747382,"byte_end":8747398,"line_start":638,"line_end":638,"column_start":12,"column_end":28},"name":"EnumValueOptions","qualname":"::EnumValueOptions","value":"EnumValueOptions { deprecated, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1611}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747724,"byte_end":8747734,"line_start":644,"line_end":644,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::EnumValueOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n","sig":null,"attributes":[{"value":"/ Is this enum value deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747405,"byte_end":8747439,"line_start":639,"line_end":639,"column_start":5,"column_end":39}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747444,"byte_end":8747518,"line_start":640,"line_end":640,"column_start":5,"column_end":79}},{"value":"/ for the enum value, or it will be completely ignored; in the very least,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747523,"byte_end":8747599,"line_start":641,"line_end":641,"column_start":5,"column_end":81}},{"value":"/ this is a formalization for deprecating enum values.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747604,"byte_end":8747660,"line_start":642,"line_end":642,"column_start":5,"column_end":61}},{"value":"prost(bool, optional, tag = \"1\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747665,"byte_end":8747715,"line_start":643,"line_end":643,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1611},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747889,"byte_end":8747909,"line_start":647,"line_end":647,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::EnumValueOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747770,"byte_end":8747837,"line_start":645,"line_end":645,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747842,"byte_end":8747880,"line_start":646,"line_end":646,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8747724,"byte_end":8747734,"line_start":644,"line_end":644,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<EnumValueOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748017,"byte_end":8748031,"line_start":650,"line_end":650,"column_start":12,"column_end":26},"name":"ServiceOptions","qualname":"::ServiceOptions","value":"ServiceOptions { deprecated, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1646}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1645},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748606,"byte_end":8748616,"line_start":661,"line_end":661,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::ServiceOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":1612},"children":[],"decl_id":null,"docs":" Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n","sig":null,"attributes":[{"value":"/ Is this service deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748295,"byte_end":8748326,"line_start":656,"line_end":656,"column_start":5,"column_end":36}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748331,"byte_end":8748405,"line_start":657,"line_end":657,"column_start":5,"column_end":79}},{"value":"/ for the service, or it will be completely ignored; in the very least,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748410,"byte_end":8748483,"line_start":658,"line_end":658,"column_start":5,"column_end":78}},{"value":"/ this is a formalization for deprecating services.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748488,"byte_end":8748541,"line_start":659,"line_end":659,"column_start":5,"column_end":58}},{"value":"prost(bool, optional, tag = \"33\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748546,"byte_end":8748597,"line_start":660,"line_end":660,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748771,"byte_end":8748791,"line_start":664,"line_end":664,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::ServiceOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1612},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748652,"byte_end":8748719,"line_start":662,"line_end":662,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748724,"byte_end":8748762,"line_start":663,"line_end":663,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748606,"byte_end":8748616,"line_start":661,"line_end":661,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<ServiceOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1647},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8748899,"byte_end":8748912,"line_start":667,"line_end":667,"column_start":12,"column_end":25},"name":"MethodOptions","qualname":"::MethodOptions","value":"MethodOptions { deprecated, idempotency_level, uninterpreted_option }","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749484,"byte_end":8749494,"line_start":678,"line_end":678,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::MethodOptions::deprecated","value":"core::option::Option<bool>","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n","sig":null,"attributes":[{"value":"/ Is this method deprecated?","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749176,"byte_end":8749206,"line_start":673,"line_end":673,"column_start":5,"column_end":35}},{"value":"/ Depending on the target platform, this can emit Deprecated annotations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749211,"byte_end":8749285,"line_start":674,"line_end":674,"column_start":5,"column_end":79}},{"value":"/ for the method, or it will be completely ignored; in the very least,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749290,"byte_end":8749362,"line_start":675,"line_end":675,"column_start":5,"column_end":77}},{"value":"/ this is a formalization for deprecating methods.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749367,"byte_end":8749419,"line_start":676,"line_end":676,"column_start":5,"column_end":57}},{"value":"prost(bool, optional, tag = \"33\", default = \"false\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749424,"byte_end":8749475,"line_start":677,"line_end":677,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1699},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749645,"byte_end":8749662,"line_start":680,"line_end":680,"column_start":9,"column_end":26},"name":"idempotency_level","qualname":"::MethodOptions::idempotency_level","value":"core::option::Option<i32>","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(enumeration = \"method_options::IdempotencyLevel\", optional, tag =\n        \"34\", default = \"IdempotencyUnknown\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749530,"byte_end":8749636,"line_start":679,"line_end":679,"column_start":5,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":1700},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749816,"byte_end":8749836,"line_start":683,"line_end":683,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::MethodOptions::uninterpreted_option","value":"prost::alloc::vec::Vec<UninterpretedOption>","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" The parser stores options it doesn't recognize here. See above.\n","sig":null,"attributes":[{"value":"/ The parser stores options it doesn't recognize here. See above.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749697,"byte_end":8749764,"line_start":681,"line_end":681,"column_start":5,"column_end":72}},{"value":"prost(message, repeated, tag = \"999\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749769,"byte_end":8749807,"line_start":682,"line_end":682,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749484,"byte_end":8749494,"line_start":678,"line_end":678,"column_start":9,"column_end":19},"name":"deprecated","qualname":"<MethodOptions>::deprecated","value":"pub fn deprecated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `deprecated`, or the default value if `deprecated` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749645,"byte_end":8749662,"line_start":680,"line_end":680,"column_start":9,"column_end":26},"name":"idempotency_level","qualname":"<MethodOptions>::idempotency_level","value":"pub fn idempotency_level(&Self) -> method_options::IdempotencyLevel","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `idempotency_level`, or the default if the field is unset or set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":31},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749949,"byte_end":8749963,"line_start":686,"line_end":686,"column_start":9,"column_end":23},"name":"method_options","qualname":"::method_options","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1734}],"decl_id":null,"docs":" Nested message and enum types in `MethodOptions`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `MethodOptions`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749887,"byte_end":8749940,"line_start":685,"line_end":685,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1702},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750361,"byte_end":8750379,"line_start":693,"line_end":693,"column_start":9,"column_end":27},"name":"IdempotencyUnknown","qualname":"::method_options::IdempotencyLevel::IdempotencyUnknown","value":"IdempotencyLevel::IdempotencyUnknown","parent":{"krate":0,"index":1701},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750424,"byte_end":8750437,"line_start":695,"line_end":695,"column_start":9,"column_end":22},"name":"NoSideEffects","qualname":"::method_options::IdempotencyLevel::NoSideEffects","value":"IdempotencyLevel::NoSideEffects","parent":{"krate":0,"index":1701},"children":[],"decl_id":null,"docs":" implies idempotent\n","sig":null,"attributes":[{"value":"/ implies idempotent","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750393,"byte_end":8750415,"line_start":694,"line_end":694,"column_start":9,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1708},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750501,"byte_end":8750511,"line_start":697,"line_end":697,"column_start":9,"column_end":19},"name":"Idempotent","qualname":"::method_options::IdempotencyLevel::Idempotent","value":"IdempotencyLevel::Idempotent","parent":{"krate":0,"index":1701},"children":[],"decl_id":null,"docs":" idempotent, but may have side effects\n","sig":null,"attributes":[{"value":"/ idempotent, but may have side effects","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750451,"byte_end":8750492,"line_start":696,"line_end":696,"column_start":9,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750334,"byte_end":8750350,"line_start":692,"line_end":692,"column_start":14,"column_end":30},"name":"IdempotencyLevel","qualname":"::method_options::IdempotencyLevel","value":"pub enum IdempotencyLevel {\n    IdempotencyUnknown = ,\n    NoSideEffects = ,\n    Idempotent = ,\n}","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1708}],"decl_id":null,"docs":" Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n or neither? HTTP based RPC implementation may choose GET verb for safe\n methods, and PUT verb for idempotent methods instead of the default POST.\n","sig":null,"attributes":[{"value":"/ Is this method side-effect-free (or safe in HTTP parlance), or idempotent,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8749970,"byte_end":8750048,"line_start":687,"line_end":687,"column_start":5,"column_end":83}},{"value":"/ or neither? HTTP based RPC implementation may choose GET verb for safe","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750053,"byte_end":8750127,"line_start":688,"line_end":688,"column_start":5,"column_end":79}},{"value":"/ methods, and PUT verb for idempotent methods instead of the default POST.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750132,"byte_end":8750209,"line_start":689,"line_end":689,"column_start":5,"column_end":82}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750308,"byte_end":8750320,"line_start":691,"line_end":691,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1736},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750980,"byte_end":8750999,"line_start":707,"line_end":707,"column_start":12,"column_end":31},"name":"UninterpretedOption","qualname":"::UninterpretedOption","value":"UninterpretedOption { name, identifier_value, positive_int_value, negative_int_value, double_value, string_value, aggregate_value }","parent":null,"children":[{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835}],"decl_id":null,"docs":" A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n","sig":null,"attributes":[{"value":"/ A message representing a option the parser does not recognize. This only","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750525,"byte_end":8750601,"line_start":700,"line_end":700,"column_start":1,"column_end":77}},{"value":"/ appears in options protos created by the compiler::Parser class.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750602,"byte_end":8750670,"line_start":701,"line_end":701,"column_start":1,"column_end":69}},{"value":"/ DescriptorPool resolves these when building Descriptor objects. Therefore,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750671,"byte_end":8750749,"line_start":702,"line_end":702,"column_start":1,"column_end":79}},{"value":"/ options protos in descriptor objects (e.g. returned by Descriptor::options(),","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750750,"byte_end":8750831,"line_start":703,"line_end":703,"column_start":1,"column_end":82}},{"value":"/ or produced by Descriptor::CopyTo()) will never have UninterpretedOptions","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750832,"byte_end":8750909,"line_start":704,"line_end":704,"column_start":1,"column_end":78}},{"value":"/ in them.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8750910,"byte_end":8750922,"line_start":705,"line_end":705,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":1829},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751051,"byte_end":8751055,"line_start":709,"line_end":709,"column_start":9,"column_end":13},"name":"name","qualname":"::UninterpretedOption::name","value":"prost::alloc::vec::Vec<uninterpreted_option::NamePart>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751006,"byte_end":8751042,"line_start":708,"line_end":708,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1830},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751318,"byte_end":8751334,"line_start":713,"line_end":713,"column_start":9,"column_end":25},"name":"identifier_value","qualname":"::UninterpretedOption::identifier_value","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n","sig":null,"attributes":[{"value":"/ The value of the uninterpreted option, in whatever type the tokenizer","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751119,"byte_end":8751192,"line_start":710,"line_end":710,"column_start":5,"column_end":78}},{"value":"/ identified it as during parsing. Exactly one of these should be set.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751197,"byte_end":8751269,"line_start":711,"line_end":711,"column_start":5,"column_end":77}},{"value":"prost(string, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751274,"byte_end":8751309,"line_start":712,"line_end":712,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1831},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751440,"byte_end":8751458,"line_start":715,"line_end":715,"column_start":9,"column_end":27},"name":"positive_int_value","qualname":"::UninterpretedOption::positive_int_value","value":"core::option::Option<u64>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(uint64, optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751396,"byte_end":8751431,"line_start":714,"line_end":714,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1832},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751536,"byte_end":8751554,"line_start":717,"line_end":717,"column_start":9,"column_end":27},"name":"negative_int_value","qualname":"::UninterpretedOption::negative_int_value","value":"core::option::Option<i64>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int64, optional, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751493,"byte_end":8751527,"line_start":716,"line_end":716,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1833},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751633,"byte_end":8751645,"line_start":719,"line_end":719,"column_start":9,"column_end":21},"name":"double_value","qualname":"::UninterpretedOption::double_value","value":"core::option::Option<f64>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(double, optional, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751589,"byte_end":8751624,"line_start":718,"line_end":718,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1834},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751729,"byte_end":8751741,"line_start":721,"line_end":721,"column_start":9,"column_end":21},"name":"string_value","qualname":"::UninterpretedOption::string_value","value":"core::option::Option<prost::alloc::vec::Vec<u8>>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bytes = \"vec\", optional, tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751680,"byte_end":8751720,"line_start":720,"line_end":720,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1835},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751845,"byte_end":8751860,"line_start":723,"line_end":723,"column_start":9,"column_end":24},"name":"aggregate_value","qualname":"::UninterpretedOption::aggregate_value","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"8\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751801,"byte_end":8751836,"line_start":722,"line_end":722,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751318,"byte_end":8751334,"line_start":713,"line_end":713,"column_start":9,"column_end":25},"name":"identifier_value","qualname":"<UninterpretedOption>::identifier_value","value":"pub fn identifier_value(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `identifier_value`, or the default value if `identifier_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751440,"byte_end":8751458,"line_start":715,"line_end":715,"column_start":9,"column_end":27},"name":"positive_int_value","qualname":"<UninterpretedOption>::positive_int_value","value":"pub fn positive_int_value(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `positive_int_value`, or the default value if `positive_int_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751536,"byte_end":8751554,"line_start":717,"line_end":717,"column_start":9,"column_end":27},"name":"negative_int_value","qualname":"<UninterpretedOption>::negative_int_value","value":"pub fn negative_int_value(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `negative_int_value`, or the default value if `negative_int_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751633,"byte_end":8751645,"line_start":719,"line_end":719,"column_start":9,"column_end":21},"name":"double_value","qualname":"<UninterpretedOption>::double_value","value":"pub fn double_value(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `double_value`, or the default value if `double_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751729,"byte_end":8751741,"line_start":721,"line_end":721,"column_start":9,"column_end":21},"name":"string_value","qualname":"<UninterpretedOption>::string_value","value":"pub fn string_value(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `string_value`, or the default value if `string_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751845,"byte_end":8751860,"line_start":723,"line_end":723,"column_start":9,"column_end":24},"name":"aggregate_value","qualname":"<UninterpretedOption>::aggregate_value","value":"pub fn aggregate_value(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `aggregate_value`, or the default value if `aggregate_value` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751988,"byte_end":8752008,"line_start":726,"line_end":726,"column_start":9,"column_end":29},"name":"uninterpreted_option","qualname":"::uninterpreted_option","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1853},{"krate":0,"index":1855}],"decl_id":null,"docs":" Nested message and enum types in `UninterpretedOption`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `UninterpretedOption`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8751920,"byte_end":8751979,"line_start":725,"line_end":725,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1836},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752425,"byte_end":8752433,"line_start":733,"line_end":733,"column_start":16,"column_end":24},"name":"NamePart","qualname":"::uninterpreted_option::NamePart","value":"NamePart { name_part, is_extension }","parent":null,"children":[{"krate":0,"index":1861},{"krate":0,"index":1862}],"decl_id":null,"docs":" The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n","sig":null,"attributes":[{"value":"/ The name of the uninterpreted option.  Each string represents a segment in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752015,"byte_end":8752093,"line_start":727,"line_end":727,"column_start":5,"column_end":83}},{"value":"/ a dot-separated name.  is_extension is true iff a segment represents an","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752098,"byte_end":8752173,"line_start":728,"line_end":728,"column_start":5,"column_end":80}},{"value":"/ extension (denoted with parentheses in options specs in .proto files).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752178,"byte_end":8752252,"line_start":729,"line_end":729,"column_start":5,"column_end":79}},{"value":"/ E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752257,"byte_end":8752330,"line_start":730,"line_end":730,"column_start":5,"column_end":78}},{"value":"/ \"foo.(bar.baz).qux\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752335,"byte_end":8752359,"line_start":731,"line_end":731,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1861},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752492,"byte_end":8752501,"line_start":735,"line_end":735,"column_start":13,"column_end":22},"name":"name_part","qualname":"::uninterpreted_option::NamePart::name_part","value":"prost::alloc::string::String","parent":{"krate":0,"index":1836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, required, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752444,"byte_end":8752479,"line_start":734,"line_end":734,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752589,"byte_end":8752601,"line_start":737,"line_end":737,"column_start":13,"column_end":25},"name":"is_extension","qualname":"::uninterpreted_option::NamePart::is_extension","value":"bool","parent":{"krate":0,"index":1836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(bool, required, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752543,"byte_end":8752576,"line_start":736,"line_end":736,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752887,"byte_end":8752901,"line_start":746,"line_end":746,"column_start":12,"column_end":26},"name":"SourceCodeInfo","qualname":"::SourceCodeInfo","value":"SourceCodeInfo { location }","parent":null,"children":[{"krate":0,"index":1883}],"decl_id":null,"docs":" Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n","sig":null,"attributes":[{"value":"/ Encapsulates information about the original source file from which a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752718,"byte_end":8752790,"line_start":743,"line_end":743,"column_start":1,"column_end":73}},{"value":"/ FileDescriptorProto was generated.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752791,"byte_end":8752829,"line_start":744,"line_end":744,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755417,"byte_end":8755425,"line_start":791,"line_end":791,"column_start":9,"column_end":17},"name":"location","qualname":"::SourceCodeInfo::location","value":"prost::alloc::vec::Vec<source_code_info::Location>","parent":{"krate":0,"index":1863},"children":[],"decl_id":null,"docs":" A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.","sig":null,"attributes":[{"value":"/ A Location identifies a piece of source code in a .proto file which","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752908,"byte_end":8752979,"line_start":747,"line_end":747,"column_start":5,"column_end":76}},{"value":"/ corresponds to a particular definition.  This information is intended","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8752984,"byte_end":8753057,"line_start":748,"line_end":748,"column_start":5,"column_end":78}},{"value":"/ to be useful to IDEs, code indexers, documentation generators, and similar","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753062,"byte_end":8753140,"line_start":749,"line_end":749,"column_start":5,"column_end":83}},{"value":"/ tools.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753145,"byte_end":8753155,"line_start":750,"line_end":750,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753160,"byte_end":8753163,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ For example, say we have a file like:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753168,"byte_end":8753209,"line_start":752,"line_end":752,"column_start":5,"column_end":46}},{"value":"/   message Foo {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753214,"byte_end":8753233,"line_start":753,"line_end":753,"column_start":5,"column_end":24}},{"value":"/     optional string foo = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753238,"byte_end":8753270,"line_start":754,"line_end":754,"column_start":5,"column_end":37}},{"value":"/   }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753275,"byte_end":8753282,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"/ Let's look at just the field definition:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753287,"byte_end":8753331,"line_start":756,"line_end":756,"column_start":5,"column_end":49}},{"value":"/   optional string foo = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753336,"byte_end":8753366,"line_start":757,"line_end":757,"column_start":5,"column_end":35}},{"value":"/   ^       ^^     ^^  ^  ^^^","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753371,"byte_end":8753402,"line_start":758,"line_end":758,"column_start":5,"column_end":36}},{"value":"/   a       bc     de  f  ghi","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753407,"byte_end":8753438,"line_start":759,"line_end":759,"column_start":5,"column_end":36}},{"value":"/ We have the following locations:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753443,"byte_end":8753479,"line_start":760,"line_end":760,"column_start":5,"column_end":41}},{"value":"/   span   path               represents","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753484,"byte_end":8753526,"line_start":761,"line_end":761,"column_start":5,"column_end":47}},{"value":"/   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753531,"byte_end":8753590,"line_start":762,"line_end":762,"column_start":5,"column_end":64}},{"value":"/   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753595,"byte_end":8753648,"line_start":763,"line_end":763,"column_start":5,"column_end":58}},{"value":"/   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753653,"byte_end":8753703,"line_start":764,"line_end":764,"column_start":5,"column_end":55}},{"value":"/   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753708,"byte_end":8753755,"line_start":765,"line_end":765,"column_start":5,"column_end":52}},{"value":"/   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753760,"byte_end":8753807,"line_start":766,"line_end":766,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753812,"byte_end":8753815,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ Notes:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753820,"byte_end":8753830,"line_start":768,"line_end":768,"column_start":5,"column_end":15}},{"value":"/ - A location may refer to a repeated field itself (i.e. not to any","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753835,"byte_end":8753905,"line_start":769,"line_end":769,"column_start":5,"column_end":75}},{"value":"/   particular index within it).  This is used whenever a set of elements are","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753910,"byte_end":8753989,"line_start":770,"line_end":770,"column_start":5,"column_end":84}},{"value":"/   logically enclosed in a single code segment.  For example, an entire","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8753994,"byte_end":8754068,"line_start":771,"line_end":771,"column_start":5,"column_end":79}},{"value":"/   extend block (possibly containing multiple extension definitions) will","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754073,"byte_end":8754149,"line_start":772,"line_end":772,"column_start":5,"column_end":81}},{"value":"/   have an outer location whose path refers to the \"extensions\" repeated","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754154,"byte_end":8754229,"line_start":773,"line_end":773,"column_start":5,"column_end":80}},{"value":"/   field without an index.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754234,"byte_end":8754263,"line_start":774,"line_end":774,"column_start":5,"column_end":34}},{"value":"/ - Multiple locations may have the same path.  This happens when a single","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754268,"byte_end":8754344,"line_start":775,"line_end":775,"column_start":5,"column_end":81}},{"value":"/   logical declaration is spread out across multiple places.  The most","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754349,"byte_end":8754422,"line_start":776,"line_end":776,"column_start":5,"column_end":78}},{"value":"/   obvious example is the \"extend\" block again -- there may be multiple","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754427,"byte_end":8754501,"line_start":777,"line_end":777,"column_start":5,"column_end":79}},{"value":"/   extend blocks in the same scope, each of which will have the same path.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754506,"byte_end":8754583,"line_start":778,"line_end":778,"column_start":5,"column_end":82}},{"value":"/ - A location's span is not always a subset of its parent's span.  For","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754588,"byte_end":8754661,"line_start":779,"line_end":779,"column_start":5,"column_end":78}},{"value":"/   example, the \"extendee\" of an extension declaration appears at the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754666,"byte_end":8754738,"line_start":780,"line_end":780,"column_start":5,"column_end":77}},{"value":"/   beginning of the \"extend\" block and is shared by all extensions within","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754743,"byte_end":8754819,"line_start":781,"line_end":781,"column_start":5,"column_end":81}},{"value":"/   the block.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754824,"byte_end":8754840,"line_start":782,"line_end":782,"column_start":5,"column_end":21}},{"value":"/ - Just because a location's span is a subset of some other location's span","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754845,"byte_end":8754923,"line_start":783,"line_end":783,"column_start":5,"column_end":83}},{"value":"/   does not mean that it is a descendant.  For example, a \"group\" defines","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8754928,"byte_end":8755004,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/   both a type and a field in a single declaration.  Thus, the locations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755009,"byte_end":8755084,"line_start":785,"line_end":785,"column_start":5,"column_end":80}},{"value":"/   corresponding to the type and field and their components will overlap.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755089,"byte_end":8755165,"line_start":786,"line_end":786,"column_start":5,"column_end":81}},{"value":"/ - Code which tries to interpret locations should probably be designed to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755170,"byte_end":8755246,"line_start":787,"line_end":787,"column_start":5,"column_end":81}},{"value":"/   ignore those that it doesn't understand, as more types of locations could","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755251,"byte_end":8755330,"line_start":788,"line_end":788,"column_start":5,"column_end":84}},{"value":"/   be recorded in the future.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755335,"byte_end":8755367,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755372,"byte_end":8755408,"line_start":790,"line_end":790,"column_start":5,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755546,"byte_end":8755562,"line_start":794,"line_end":794,"column_start":9,"column_end":25},"name":"source_code_info","qualname":"::source_code_info","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1906},{"krate":0,"index":1908},{"krate":0,"index":1955}],"decl_id":null,"docs":" Nested message and enum types in `SourceCodeInfo`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `SourceCodeInfo`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755483,"byte_end":8755537,"line_start":793,"line_end":793,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1884},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755630,"byte_end":8755638,"line_start":796,"line_end":796,"column_start":16,"column_end":24},"name":"Location","qualname":"::source_code_info::Location","value":"Location { path, span, leading_comments, trailing_comments, leading_detached_comments }","parent":null,"children":[{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756831,"byte_end":8756835,"line_start":821,"line_end":821,"column_start":13,"column_end":17},"name":"path","qualname":"::source_code_info::Location::path","value":"prost::alloc::vec::Vec<i32>","parent":{"krate":0,"index":1884},"children":[],"decl_id":null,"docs":" Identifies which part of the FileDescriptorProto was defined at this\n location.","sig":null,"attributes":[{"value":"/ Identifies which part of the FileDescriptorProto was defined at this","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755649,"byte_end":8755721,"line_start":797,"line_end":797,"column_start":9,"column_end":81}},{"value":"/ location.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755730,"byte_end":8755743,"line_start":798,"line_end":798,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755752,"byte_end":8755755,"line_start":799,"line_end":799,"column_start":9,"column_end":12}},{"value":"/ Each element is a field number or an index.  They form a path from","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755764,"byte_end":8755834,"line_start":800,"line_end":800,"column_start":9,"column_end":79}},{"value":"/ the root FileDescriptorProto to the place where the definition.  For","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755843,"byte_end":8755915,"line_start":801,"line_end":801,"column_start":9,"column_end":81}},{"value":"/ example, this path:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755924,"byte_end":8755947,"line_start":802,"line_end":802,"column_start":9,"column_end":32}},{"value":"/   [ 4, 3, 2, 7, 1 ]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755956,"byte_end":8755979,"line_start":803,"line_end":803,"column_start":9,"column_end":32}},{"value":"/ refers to:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8755988,"byte_end":8756002,"line_start":804,"line_end":804,"column_start":9,"column_end":23}},{"value":"/   file.message_type(3)  // 4, 3","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756011,"byte_end":8756046,"line_start":805,"line_end":805,"column_start":9,"column_end":44}},{"value":"/       .field(7)         // 2, 7","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756055,"byte_end":8756090,"line_start":806,"line_end":806,"column_start":9,"column_end":44}},{"value":"/       .name()           // 1","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756099,"byte_end":8756131,"line_start":807,"line_end":807,"column_start":9,"column_end":41}},{"value":"/ This is because FileDescriptorProto.message_type has field number 4:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756140,"byte_end":8756212,"line_start":808,"line_end":808,"column_start":9,"column_end":81}},{"value":"/   repeated DescriptorProto message_type = 4;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756221,"byte_end":8756269,"line_start":809,"line_end":809,"column_start":9,"column_end":57}},{"value":"/ and DescriptorProto.field has field number 2:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756278,"byte_end":8756327,"line_start":810,"line_end":810,"column_start":9,"column_end":58}},{"value":"/   repeated FieldDescriptorProto field = 2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756336,"byte_end":8756382,"line_start":811,"line_end":811,"column_start":9,"column_end":55}},{"value":"/ and FieldDescriptorProto.name has field number 1:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756391,"byte_end":8756444,"line_start":812,"line_end":812,"column_start":9,"column_end":62}},{"value":"/   optional string name = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756453,"byte_end":8756484,"line_start":813,"line_end":813,"column_start":9,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756493,"byte_end":8756496,"line_start":814,"line_end":814,"column_start":9,"column_end":12}},{"value":"/ Thus, the above path gives the location of a field name.  If we removed","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756505,"byte_end":8756580,"line_start":815,"line_end":815,"column_start":9,"column_end":84}},{"value":"/ the last element:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756589,"byte_end":8756610,"line_start":816,"line_end":816,"column_start":9,"column_end":30}},{"value":"/   [ 4, 3, 2, 7 ]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756619,"byte_end":8756639,"line_start":817,"line_end":817,"column_start":9,"column_end":29}},{"value":"/ this path refers to the whole field declaration (from the beginning","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756648,"byte_end":8756719,"line_start":818,"line_end":818,"column_start":9,"column_end":80}},{"value":"/ of the label to the terminating semicolon).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756728,"byte_end":8756775,"line_start":819,"line_end":819,"column_start":9,"column_end":56}},{"value":"prost(int32, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756784,"byte_end":8756818,"line_start":820,"line_end":820,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757299,"byte_end":8757303,"line_start":828,"line_end":828,"column_start":13,"column_end":17},"name":"span","qualname":"::source_code_info::Location::span","value":"prost::alloc::vec::Vec<i32>","parent":{"krate":0,"index":1884},"children":[],"decl_id":null,"docs":" Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n","sig":null,"attributes":[{"value":"/ Always has exactly three or four elements: start line, start column,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756876,"byte_end":8756948,"line_start":822,"line_end":822,"column_start":9,"column_end":81}},{"value":"/ end line (optional, otherwise assumed same as start line), end column.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8756957,"byte_end":8757031,"line_start":823,"line_end":823,"column_start":9,"column_end":83}},{"value":"/ These are packed into a single field for efficiency.  Note that line","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757040,"byte_end":8757112,"line_start":824,"line_end":824,"column_start":9,"column_end":81}},{"value":"/ and column numbers are zero-based -- typically you will want to add","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757121,"byte_end":8757192,"line_start":825,"line_end":825,"column_start":9,"column_end":80}},{"value":"/ 1 to each before displaying to a user.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757201,"byte_end":8757243,"line_start":826,"line_end":826,"column_start":9,"column_end":51}},{"value":"prost(int32, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757252,"byte_end":8757286,"line_start":827,"line_end":827,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1960},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759465,"byte_end":8759481,"line_start":877,"line_end":877,"column_start":13,"column_end":29},"name":"leading_comments","qualname":"::source_code_info::Location::leading_comments","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":1884},"children":[],"decl_id":null,"docs":" If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.","sig":null,"attributes":[{"value":"/ If this SourceCodeInfo represents a complete declaration, these are any","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757344,"byte_end":8757419,"line_start":829,"line_end":829,"column_start":9,"column_end":84}},{"value":"/ comments appearing before and after the declaration which appear to be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757428,"byte_end":8757502,"line_start":830,"line_end":830,"column_start":9,"column_end":83}},{"value":"/ attached to the declaration.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757511,"byte_end":8757543,"line_start":831,"line_end":831,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757552,"byte_end":8757555,"line_start":832,"line_end":832,"column_start":9,"column_end":12}},{"value":"/ A series of line comments appearing on consecutive lines, with no other","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757564,"byte_end":8757639,"line_start":833,"line_end":833,"column_start":9,"column_end":84}},{"value":"/ tokens appearing on those lines, will be treated as a single comment.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757648,"byte_end":8757721,"line_start":834,"line_end":834,"column_start":9,"column_end":82}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757730,"byte_end":8757733,"line_start":835,"line_end":835,"column_start":9,"column_end":12}},{"value":"/ leading_detached_comments will keep paragraphs of comments that appear","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757742,"byte_end":8757816,"line_start":836,"line_end":836,"column_start":9,"column_end":83}},{"value":"/ before (but not connected to) the current element. Each paragraph,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757825,"byte_end":8757895,"line_start":837,"line_end":837,"column_start":9,"column_end":79}},{"value":"/ separated by empty lines, will be one comment element in the repeated","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757904,"byte_end":8757977,"line_start":838,"line_end":838,"column_start":9,"column_end":82}},{"value":"/ field.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8757986,"byte_end":8757996,"line_start":839,"line_end":839,"column_start":9,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758005,"byte_end":8758008,"line_start":840,"line_end":840,"column_start":9,"column_end":12}},{"value":"/ Only the comment content is provided; comment markers (e.g. //) are","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758017,"byte_end":8758088,"line_start":841,"line_end":841,"column_start":9,"column_end":80}},{"value":"/ stripped out.  For block comments, leading whitespace and an asterisk","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758097,"byte_end":8758170,"line_start":842,"line_end":842,"column_start":9,"column_end":82}},{"value":"/ will be stripped from the beginning of each line other than the first.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758179,"byte_end":8758253,"line_start":843,"line_end":843,"column_start":9,"column_end":83}},{"value":"/ Newlines are included in the output.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758262,"byte_end":8758302,"line_start":844,"line_end":844,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758311,"byte_end":8758314,"line_start":845,"line_end":845,"column_start":9,"column_end":12}},{"value":"/ Examples:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758323,"byte_end":8758336,"line_start":846,"line_end":846,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758345,"byte_end":8758348,"line_start":847,"line_end":847,"column_start":9,"column_end":12}},{"value":"/   optional int32 foo = 1;  // Comment attached to foo.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758357,"byte_end":8758415,"line_start":848,"line_end":848,"column_start":9,"column_end":67}},{"value":"/   // Comment attached to bar.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758424,"byte_end":8758457,"line_start":849,"line_end":849,"column_start":9,"column_end":42}},{"value":"/   optional int32 bar = 2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758466,"byte_end":8758495,"line_start":850,"line_end":850,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758504,"byte_end":8758507,"line_start":851,"line_end":851,"column_start":9,"column_end":12}},{"value":"/   optional string baz = 3;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758516,"byte_end":8758546,"line_start":852,"line_end":852,"column_start":9,"column_end":39}},{"value":"/   // Comment attached to baz.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758555,"byte_end":8758588,"line_start":853,"line_end":853,"column_start":9,"column_end":42}},{"value":"/   // Another line attached to baz.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758597,"byte_end":8758635,"line_start":854,"line_end":854,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758644,"byte_end":8758647,"line_start":855,"line_end":855,"column_start":9,"column_end":12}},{"value":"/   // Comment attached to qux.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758656,"byte_end":8758689,"line_start":856,"line_end":856,"column_start":9,"column_end":42}},{"value":"/   //","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758698,"byte_end":8758706,"line_start":857,"line_end":857,"column_start":9,"column_end":17}},{"value":"/   // Another line attached to qux.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758715,"byte_end":8758753,"line_start":858,"line_end":858,"column_start":9,"column_end":47}},{"value":"/   optional double qux = 4;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758762,"byte_end":8758792,"line_start":859,"line_end":859,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758801,"byte_end":8758804,"line_start":860,"line_end":860,"column_start":9,"column_end":12}},{"value":"/   // Detached comment for corge. This is not leading or trailing comments","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758813,"byte_end":8758890,"line_start":861,"line_end":861,"column_start":9,"column_end":86}},{"value":"/   // to qux or corge because there are blank lines separating it from","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758899,"byte_end":8758972,"line_start":862,"line_end":862,"column_start":9,"column_end":82}},{"value":"/   // both.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8758981,"byte_end":8758995,"line_start":863,"line_end":863,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759004,"byte_end":8759007,"line_start":864,"line_end":864,"column_start":9,"column_end":12}},{"value":"/   // Detached comment for corge paragraph 2.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759016,"byte_end":8759064,"line_start":865,"line_end":865,"column_start":9,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759073,"byte_end":8759076,"line_start":866,"line_end":866,"column_start":9,"column_end":12}},{"value":"/   optional string corge = 5;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759085,"byte_end":8759117,"line_start":867,"line_end":867,"column_start":9,"column_end":41}},{"value":"/   /* Block comment attached","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759126,"byte_end":8759157,"line_start":868,"line_end":868,"column_start":9,"column_end":40}},{"value":"/    * to corge.  Leading asterisks","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759166,"byte_end":8759203,"line_start":869,"line_end":869,"column_start":9,"column_end":46}},{"value":"/    * will be removed. */","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759212,"byte_end":8759240,"line_start":870,"line_end":870,"column_start":9,"column_end":37}},{"value":"/   /* Block comment attached to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759249,"byte_end":8759283,"line_start":871,"line_end":871,"column_start":9,"column_end":43}},{"value":"/    * grault. */","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759292,"byte_end":8759311,"line_start":872,"line_end":872,"column_start":9,"column_end":28}},{"value":"/   optional int32 grault = 6;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759320,"byte_end":8759352,"line_start":873,"line_end":873,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759361,"byte_end":8759364,"line_start":874,"line_end":874,"column_start":9,"column_end":12}},{"value":"/   // ignored detached comments.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759373,"byte_end":8759408,"line_start":875,"line_end":875,"column_start":9,"column_end":44}},{"value":"prost(string, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759417,"byte_end":8759452,"line_start":876,"line_end":876,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1961},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759595,"byte_end":8759612,"line_start":879,"line_end":879,"column_start":13,"column_end":30},"name":"trailing_comments","qualname":"::source_code_info::Location::trailing_comments","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":1884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759547,"byte_end":8759582,"line_start":878,"line_end":878,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759726,"byte_end":8759751,"line_start":881,"line_end":881,"column_start":13,"column_end":38},"name":"leading_detached_comments","qualname":"::source_code_info::Location::leading_detached_comments","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":1884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(string, repeated, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759678,"byte_end":8759713,"line_start":880,"line_end":880,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759465,"byte_end":8759481,"line_start":877,"line_end":877,"column_start":13,"column_end":29},"name":"leading_comments","qualname":"<Location>::leading_comments","value":"pub fn leading_comments(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `leading_comments`, or the default value if `leading_comments` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759595,"byte_end":8759612,"line_start":879,"line_end":879,"column_start":13,"column_end":30},"name":"trailing_comments","qualname":"<Location>::trailing_comments","value":"pub fn trailing_comments(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `trailing_comments`, or the default value if `trailing_comments` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1963},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760108,"byte_end":8760125,"line_start":888,"line_end":888,"column_start":12,"column_end":29},"name":"GeneratedCodeInfo","qualname":"::GeneratedCodeInfo","value":"GeneratedCodeInfo { annotation }","parent":null,"children":[{"krate":0,"index":1983}],"decl_id":null,"docs":" Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n","sig":null,"attributes":[{"value":"/ Describes the relationship between generated code and its original source","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759819,"byte_end":8759896,"line_start":884,"line_end":884,"column_start":1,"column_end":78}},{"value":"/ file. A GeneratedCodeInfo message is associated with only one generated","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759897,"byte_end":8759972,"line_start":885,"line_end":885,"column_start":1,"column_end":76}},{"value":"/ source file, but may contain references to different source .proto files.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8759973,"byte_end":8760050,"line_start":886,"line_end":886,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1983},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760297,"byte_end":8760307,"line_start":892,"line_end":892,"column_start":9,"column_end":19},"name":"annotation","qualname":"::GeneratedCodeInfo::annotation","value":"prost::alloc::vec::Vec<generated_code_info::Annotation>","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":" An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n","sig":null,"attributes":[{"value":"/ An Annotation connects some span of text in generated code to an element","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760132,"byte_end":8760208,"line_start":889,"line_end":889,"column_start":5,"column_end":81}},{"value":"/ of its generating .proto file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760213,"byte_end":8760247,"line_start":890,"line_end":890,"column_start":5,"column_end":39}},{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760252,"byte_end":8760288,"line_start":891,"line_end":891,"column_start":5,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760436,"byte_end":8760455,"line_start":895,"line_end":895,"column_start":9,"column_end":28},"name":"generated_code_info","qualname":"::generated_code_info","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2046}],"decl_id":null,"docs":" Nested message and enum types in `GeneratedCodeInfo`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `GeneratedCodeInfo`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760370,"byte_end":8760427,"line_start":894,"line_end":894,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760523,"byte_end":8760533,"line_start":897,"line_end":897,"column_start":16,"column_end":26},"name":"Annotation","qualname":"::generated_code_info::Annotation","value":"Annotation { path, source_file, begin, end }","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2050},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760740,"byte_end":8760744,"line_start":901,"line_end":901,"column_start":13,"column_end":17},"name":"path","qualname":"::generated_code_info::Annotation::path","value":"prost::alloc::vec::Vec<i32>","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":" Identifies the element in the original source .proto file. This field\n is formatted the same as SourceCodeInfo.Location.path.\n","sig":null,"attributes":[{"value":"/ Identifies the element in the original source .proto file. This field","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760544,"byte_end":8760617,"line_start":898,"line_end":898,"column_start":9,"column_end":82}},{"value":"/ is formatted the same as SourceCodeInfo.Location.path.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760626,"byte_end":8760684,"line_start":899,"line_end":899,"column_start":9,"column_end":67}},{"value":"prost(int32, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760693,"byte_end":8760727,"line_start":900,"line_end":900,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":2051},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760907,"byte_end":8760918,"line_start":904,"line_end":904,"column_start":13,"column_end":24},"name":"source_file","qualname":"::generated_code_info::Annotation::source_file","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":" Identifies the filesystem path to the original source .proto.\n","sig":null,"attributes":[{"value":"/ Identifies the filesystem path to the original source .proto.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760785,"byte_end":8760850,"line_start":902,"line_end":902,"column_start":9,"column_end":74}},{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760859,"byte_end":8760894,"line_start":903,"line_end":903,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2052},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761156,"byte_end":8761161,"line_start":908,"line_end":908,"column_start":13,"column_end":18},"name":"begin","qualname":"::generated_code_info::Annotation::begin","value":"core::option::Option<i32>","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":" Identifies the starting offset in bytes in the generated code\n that relates to the identified object.\n","sig":null,"attributes":[{"value":"/ Identifies the starting offset in bytes in the generated code","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760984,"byte_end":8761049,"line_start":905,"line_end":905,"column_start":9,"column_end":74}},{"value":"/ that relates to the identified object.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761058,"byte_end":8761100,"line_start":906,"line_end":906,"column_start":9,"column_end":51}},{"value":"prost(int32, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761109,"byte_end":8761143,"line_start":907,"line_end":907,"column_start":9,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":2053},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761482,"byte_end":8761485,"line_start":913,"line_end":913,"column_start":13,"column_end":16},"name":"end","qualname":"::generated_code_info::Annotation::end","value":"core::option::Option<i32>","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":" Identifies the ending offset in bytes in the generated code that\n relates to the identified offset. The end offset should be one past\n the last relevant byte (so the length of the text = end - begin).\n","sig":null,"attributes":[{"value":"/ Identifies the ending offset in bytes in the generated code that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761200,"byte_end":8761268,"line_start":909,"line_end":909,"column_start":9,"column_end":77}},{"value":"/ relates to the identified offset. The end offset should be one past","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761277,"byte_end":8761348,"line_start":910,"line_end":910,"column_start":9,"column_end":80}},{"value":"/ the last relevant byte (so the length of the text = end - begin).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761357,"byte_end":8761426,"line_start":911,"line_end":911,"column_start":9,"column_end":78}},{"value":"prost(int32, optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761435,"byte_end":8761469,"line_start":912,"line_end":912,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2047},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8760907,"byte_end":8760918,"line_start":904,"line_end":904,"column_start":13,"column_end":24},"name":"source_file","qualname":"<Annotation>::source_file","value":"pub fn source_file(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `source_file`, or the default value if `source_file` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2048},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761156,"byte_end":8761161,"line_start":908,"line_end":908,"column_start":13,"column_end":18},"name":"begin","qualname":"<Annotation>::begin","value":"pub fn begin(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `begin`, or the default value if `begin` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761482,"byte_end":8761485,"line_start":913,"line_end":913,"column_start":13,"column_end":16},"name":"end","qualname":"<Annotation>::end","value":"pub fn end(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `end`, or the default value if `end` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763989,"byte_end":8763992,"line_start":1000,"line_end":1000,"column_start":12,"column_end":15},"name":"Any","qualname":"::Any","value":"Any { type_url, value }","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2080}],"decl_id":null,"docs":" `Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.","sig":null,"attributes":[{"value":"/ `Any` contains an arbitrary serialized protocol buffer message along with a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761524,"byte_end":8761603,"line_start":916,"line_end":916,"column_start":1,"column_end":80}},{"value":"/ URL that describes the type of the serialized message.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761604,"byte_end":8761662,"line_start":917,"line_end":917,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761663,"byte_end":8761666,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Protobuf library provides support to pack/unpack Any values in the form","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761667,"byte_end":8761742,"line_start":919,"line_end":919,"column_start":1,"column_end":76}},{"value":"/ of utility functions or additional generated methods of the Any type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761743,"byte_end":8761816,"line_start":920,"line_end":920,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761817,"byte_end":8761820,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ Example 1: Pack and unpack a message in C++.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761821,"byte_end":8761869,"line_start":922,"line_end":922,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761870,"byte_end":8761873,"line_start":923,"line_end":923,"column_start":1,"column_end":4}},{"value":"/     Foo foo = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761874,"byte_end":8761896,"line_start":924,"line_end":924,"column_start":1,"column_end":23}},{"value":"/     Any any;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761897,"byte_end":8761913,"line_start":925,"line_end":925,"column_start":1,"column_end":17}},{"value":"/     any.PackFrom(foo);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761914,"byte_end":8761940,"line_start":926,"line_end":926,"column_start":1,"column_end":27}},{"value":"/     ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761941,"byte_end":8761952,"line_start":927,"line_end":927,"column_start":1,"column_end":12}},{"value":"/     if (any.UnpackTo(&foo)) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761953,"byte_end":8761986,"line_start":928,"line_end":928,"column_start":1,"column_end":34}},{"value":"/       ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8761987,"byte_end":8762000,"line_start":929,"line_end":929,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762001,"byte_end":8762010,"line_start":930,"line_end":930,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762011,"byte_end":8762014,"line_start":931,"line_end":931,"column_start":1,"column_end":4}},{"value":"/ Example 2: Pack and unpack a message in Java.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762015,"byte_end":8762064,"line_start":932,"line_end":932,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762065,"byte_end":8762068,"line_start":933,"line_end":933,"column_start":1,"column_end":4}},{"value":"/     Foo foo = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762069,"byte_end":8762091,"line_start":934,"line_end":934,"column_start":1,"column_end":23}},{"value":"/     Any any = Any.pack(foo);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762092,"byte_end":8762124,"line_start":935,"line_end":935,"column_start":1,"column_end":33}},{"value":"/     ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762125,"byte_end":8762136,"line_start":936,"line_end":936,"column_start":1,"column_end":12}},{"value":"/     if (any.is(Foo.class)) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762137,"byte_end":8762169,"line_start":937,"line_end":937,"column_start":1,"column_end":33}},{"value":"/       foo = any.unpack(Foo.class);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762170,"byte_end":8762208,"line_start":938,"line_end":938,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762209,"byte_end":8762218,"line_start":939,"line_end":939,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762219,"byte_end":8762222,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/  Example 3: Pack and unpack a message in Python.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762223,"byte_end":8762275,"line_start":941,"line_end":941,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762276,"byte_end":8762279,"line_start":942,"line_end":942,"column_start":1,"column_end":4}},{"value":"/     foo = Foo(...)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762280,"byte_end":8762302,"line_start":943,"line_end":943,"column_start":1,"column_end":23}},{"value":"/     any = Any()","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762303,"byte_end":8762322,"line_start":944,"line_end":944,"column_start":1,"column_end":20}},{"value":"/     any.Pack(foo)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762323,"byte_end":8762344,"line_start":945,"line_end":945,"column_start":1,"column_end":22}},{"value":"/     ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762345,"byte_end":8762356,"line_start":946,"line_end":946,"column_start":1,"column_end":12}},{"value":"/     if any.Is(Foo.DESCRIPTOR):","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762357,"byte_end":8762391,"line_start":947,"line_end":947,"column_start":1,"column_end":35}},{"value":"/       any.Unpack(foo)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762392,"byte_end":8762417,"line_start":948,"line_end":948,"column_start":1,"column_end":26}},{"value":"/       ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762418,"byte_end":8762431,"line_start":949,"line_end":949,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762432,"byte_end":8762435,"line_start":950,"line_end":950,"column_start":1,"column_end":4}},{"value":"/  Example 4: Pack and unpack a message in Go","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762436,"byte_end":8762483,"line_start":951,"line_end":951,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762484,"byte_end":8762487,"line_start":952,"line_end":952,"column_start":1,"column_end":4}},{"value":"/      foo := &pb.Foo{...}","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762488,"byte_end":8762516,"line_start":953,"line_end":953,"column_start":1,"column_end":29}},{"value":"/      any, err := anypb.New(foo)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762517,"byte_end":8762552,"line_start":954,"line_end":954,"column_start":1,"column_end":36}},{"value":"/      if err != nil {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762553,"byte_end":8762577,"line_start":955,"line_end":955,"column_start":1,"column_end":25}},{"value":"/        ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762578,"byte_end":8762592,"line_start":956,"line_end":956,"column_start":1,"column_end":15}},{"value":"/      }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762593,"byte_end":8762603,"line_start":957,"line_end":957,"column_start":1,"column_end":11}},{"value":"/      ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762604,"byte_end":8762616,"line_start":958,"line_end":958,"column_start":1,"column_end":13}},{"value":"/      foo := &pb.Foo{}","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762617,"byte_end":8762642,"line_start":959,"line_end":959,"column_start":1,"column_end":26}},{"value":"/      if err := any.UnmarshalTo(foo); err != nil {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762643,"byte_end":8762696,"line_start":960,"line_end":960,"column_start":1,"column_end":54}},{"value":"/        ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762697,"byte_end":8762711,"line_start":961,"line_end":961,"column_start":1,"column_end":15}},{"value":"/      }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762712,"byte_end":8762722,"line_start":962,"line_end":962,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762723,"byte_end":8762726,"line_start":963,"line_end":963,"column_start":1,"column_end":4}},{"value":"/ The pack methods provided by protobuf library will by default use","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762727,"byte_end":8762796,"line_start":964,"line_end":964,"column_start":1,"column_end":70}},{"value":"/ 'type.googleapis.com/full.type.name' as the type URL and the unpack","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762797,"byte_end":8762868,"line_start":965,"line_end":965,"column_start":1,"column_end":72}},{"value":"/ methods only use the fully qualified type name after the last '/'","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762869,"byte_end":8762938,"line_start":966,"line_end":966,"column_start":1,"column_end":70}},{"value":"/ in the type URL, for example \"foo.bar.com/x/y.z\" will yield type","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8762939,"byte_end":8763007,"line_start":967,"line_end":967,"column_start":1,"column_end":69}},{"value":"/ name \"y.z\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763008,"byte_end":8763023,"line_start":968,"line_end":968,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763024,"byte_end":8763027,"line_start":969,"line_end":969,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763028,"byte_end":8763031,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/ JSON","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763032,"byte_end":8763040,"line_start":971,"line_end":971,"column_start":1,"column_end":9}},{"value":"/ ====","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763041,"byte_end":8763049,"line_start":972,"line_end":972,"column_start":1,"column_end":9}},{"value":"/ The JSON representation of an `Any` value uses the regular","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763050,"byte_end":8763112,"line_start":973,"line_end":973,"column_start":1,"column_end":63}},{"value":"/ representation of the deserialized, embedded message, with an","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763113,"byte_end":8763178,"line_start":974,"line_end":974,"column_start":1,"column_end":66}},{"value":"/ additional field `@type` which contains the type URL. Example:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763179,"byte_end":8763245,"line_start":975,"line_end":975,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763246,"byte_end":8763249,"line_start":976,"line_end":976,"column_start":1,"column_end":4}},{"value":"/     package google.profile;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763250,"byte_end":8763281,"line_start":977,"line_end":977,"column_start":1,"column_end":32}},{"value":"/     message Person {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763282,"byte_end":8763306,"line_start":978,"line_end":978,"column_start":1,"column_end":25}},{"value":"/       string first_name = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763307,"byte_end":8763339,"line_start":979,"line_end":979,"column_start":1,"column_end":33}},{"value":"/       string last_name = 2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763340,"byte_end":8763371,"line_start":980,"line_end":980,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763372,"byte_end":8763381,"line_start":981,"line_end":981,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763382,"byte_end":8763385,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/     {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763386,"byte_end":8763395,"line_start":983,"line_end":983,"column_start":1,"column_end":10}},{"value":"/       \"@type\": \"type.googleapis.com/google.profile.Person\",","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763396,"byte_end":8763459,"line_start":984,"line_end":984,"column_start":1,"column_end":64}},{"value":"/       \"firstName\": <string>,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763460,"byte_end":8763492,"line_start":985,"line_end":985,"column_start":1,"column_end":33}},{"value":"/       \"lastName\": <string>","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763493,"byte_end":8763523,"line_start":986,"line_end":986,"column_start":1,"column_end":31}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763524,"byte_end":8763533,"line_start":987,"line_end":987,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763534,"byte_end":8763537,"line_start":988,"line_end":988,"column_start":1,"column_end":4}},{"value":"/ If the embedded message type is well-known and has a custom JSON","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763538,"byte_end":8763606,"line_start":989,"line_end":989,"column_start":1,"column_end":69}},{"value":"/ representation, that representation will be embedded adding a field","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763607,"byte_end":8763678,"line_start":990,"line_end":990,"column_start":1,"column_end":72}},{"value":"/ `value` which holds the custom JSON in addition to the `@type`","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763679,"byte_end":8763745,"line_start":991,"line_end":991,"column_start":1,"column_end":67}},{"value":"/ field. Example (for message [google.protobuf.Duration][]):","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763746,"byte_end":8763808,"line_start":992,"line_end":992,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763809,"byte_end":8763812,"line_start":993,"line_end":993,"column_start":1,"column_end":4}},{"value":"/     {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763813,"byte_end":8763822,"line_start":994,"line_end":994,"column_start":1,"column_end":10}},{"value":"/       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763823,"byte_end":8763889,"line_start":995,"line_end":995,"column_start":1,"column_end":67}},{"value":"/       \"value\": \"1.212s\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763890,"byte_end":8763917,"line_start":996,"line_end":996,"column_start":1,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763918,"byte_end":8763927,"line_start":997,"line_end":997,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763928,"byte_end":8763931,"line_start":998,"line_end":998,"column_start":1,"column_end":4}}]},{"kind":"Field","id":{"krate":0,"index":2079},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765581,"byte_end":8765589,"line_start":1030,"line_end":1030,"column_start":9,"column_end":17},"name":"type_url","qualname":"::Any::type_url","value":"prost::alloc::string::String","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).","sig":null,"attributes":[{"value":"/ A URL/resource name that uniquely identifies the type of the serialized","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8763999,"byte_end":8764074,"line_start":1001,"line_end":1001,"column_start":5,"column_end":80}},{"value":"/ protocol buffer message. This string must contain at least","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764079,"byte_end":8764141,"line_start":1002,"line_end":1002,"column_start":5,"column_end":67}},{"value":"/ one \"/\" character. The last segment of the URL's path must represent","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764146,"byte_end":8764218,"line_start":1003,"line_end":1003,"column_start":5,"column_end":77}},{"value":"/ the fully qualified name of the type (as in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764223,"byte_end":8764270,"line_start":1004,"line_end":1004,"column_start":5,"column_end":52}},{"value":"/ `path/google.protobuf.Duration`). The name should be in a canonical form","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764275,"byte_end":8764351,"line_start":1005,"line_end":1005,"column_start":5,"column_end":81}},{"value":"/ (e.g., leading \".\" is not accepted).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764356,"byte_end":8764396,"line_start":1006,"line_end":1006,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764401,"byte_end":8764404,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ In practice, teams usually precompile into the binary all types that they","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764409,"byte_end":8764486,"line_start":1008,"line_end":1008,"column_start":5,"column_end":82}},{"value":"/ expect it to use in the context of Any. However, for URLs which use the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764491,"byte_end":8764566,"line_start":1009,"line_end":1009,"column_start":5,"column_end":80}},{"value":"/ scheme `http`, `https`, or no scheme, one can optionally set up a type","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764571,"byte_end":8764645,"line_start":1010,"line_end":1010,"column_start":5,"column_end":79}},{"value":"/ server that maps type URLs to message definitions as follows:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764650,"byte_end":8764715,"line_start":1011,"line_end":1011,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764720,"byte_end":8764723,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ * If no scheme is provided, `https` is assumed.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764728,"byte_end":8764779,"line_start":1013,"line_end":1013,"column_start":5,"column_end":56}},{"value":"/ * An HTTP GET on the URL must yield a [google.protobuf.Type][]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764784,"byte_end":8764850,"line_start":1014,"line_end":1014,"column_start":5,"column_end":71}},{"value":"/   value in binary format, or produce an error.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764855,"byte_end":8764905,"line_start":1015,"line_end":1015,"column_start":5,"column_end":55}},{"value":"/ * Applications are allowed to cache lookup results based on the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764910,"byte_end":8764977,"line_start":1016,"line_end":1016,"column_start":5,"column_end":72}},{"value":"/   URL, or have them precompiled into a binary to avoid any","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8764982,"byte_end":8765044,"line_start":1017,"line_end":1017,"column_start":5,"column_end":67}},{"value":"/   lookup. Therefore, binary compatibility needs to be preserved","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765049,"byte_end":8765116,"line_start":1018,"line_end":1018,"column_start":5,"column_end":72}},{"value":"/   on changes to types. (Use versioned type names to manage","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765121,"byte_end":8765183,"line_start":1019,"line_end":1019,"column_start":5,"column_end":67}},{"value":"/   breaking changes.)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765188,"byte_end":8765212,"line_start":1020,"line_end":1020,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765217,"byte_end":8765220,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ Note: this functionality is not currently available in the official","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765225,"byte_end":8765296,"line_start":1022,"line_end":1022,"column_start":5,"column_end":76}},{"value":"/ protobuf release, and it is not used for type URLs beginning with","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765301,"byte_end":8765370,"line_start":1023,"line_end":1023,"column_start":5,"column_end":74}},{"value":"/ type.googleapis.com.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765375,"byte_end":8765399,"line_start":1024,"line_end":1024,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765404,"byte_end":8765407,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ Schemes other than `http`, `https` (or the empty scheme) might be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765412,"byte_end":8765481,"line_start":1026,"line_end":1026,"column_start":5,"column_end":74}},{"value":"/ used with implementation specific semantics.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765486,"byte_end":8765534,"line_start":1027,"line_end":1027,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765539,"byte_end":8765542,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765547,"byte_end":8765572,"line_start":1029,"line_end":1029,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2080},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765746,"byte_end":8765751,"line_start":1033,"line_end":1033,"column_start":9,"column_end":14},"name":"value","qualname":"::Any::value","value":"prost::alloc::vec::Vec<u8>","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" Must be a valid serialized protocol buffer of the above specified type.\n","sig":null,"attributes":[{"value":"/ Must be a valid serialized protocol buffer of the above specified type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765627,"byte_end":8765702,"line_start":1031,"line_end":1031,"column_start":5,"column_end":80}},{"value":"prost(bytes = \"vec\", tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765707,"byte_end":8765737,"line_start":1032,"line_end":1032,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765967,"byte_end":8765980,"line_start":1038,"line_end":1038,"column_start":12,"column_end":25},"name":"SourceContext","qualname":"::SourceContext","value":"SourceContext { file_name }","parent":null,"children":[{"krate":0,"index":2103}],"decl_id":null,"docs":" `SourceContext` represents information about the source of a\n protobuf element, like the file in which it is defined.\n","sig":null,"attributes":[{"value":"/ `SourceContext` represents information about the source of a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765785,"byte_end":8765849,"line_start":1035,"line_end":1035,"column_start":1,"column_end":65}},{"value":"/ protobuf element, like the file in which it is defined.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765850,"byte_end":8765909,"line_start":1036,"line_end":1036,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2103},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766184,"byte_end":8766193,"line_start":1042,"line_end":1042,"column_start":9,"column_end":18},"name":"file_name","qualname":"::SourceContext::file_name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2081},"children":[],"decl_id":null,"docs":" The path-qualified name of the .proto file that contained the associated\n protobuf element.  For example: `\"google/protobuf/source_context.proto\"`.\n","sig":null,"attributes":[{"value":"/ The path-qualified name of the .proto file that contained the associated","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8765987,"byte_end":8766063,"line_start":1039,"line_end":1039,"column_start":5,"column_end":81}},{"value":"/ protobuf element.  For example: `\"google/protobuf/source_context.proto\"`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766068,"byte_end":8766145,"line_start":1040,"line_end":1040,"column_start":5,"column_end":82}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766150,"byte_end":8766175,"line_start":1041,"line_end":1041,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766322,"byte_end":8766326,"line_start":1046,"line_end":1046,"column_start":12,"column_end":16},"name":"Type","qualname":"::Type","value":"Type { name, fields, oneofs, options, source_context, syntax }","parent":null,"children":[{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156}],"decl_id":null,"docs":" A protocol buffer message type.\n","sig":null,"attributes":[{"value":"/ A protocol buffer message type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766229,"byte_end":8766264,"line_start":1044,"line_end":1044,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2151},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766409,"byte_end":8766413,"line_start":1049,"line_end":1049,"column_start":9,"column_end":13},"name":"name","qualname":"::Type::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" The fully qualified message name.\n","sig":null,"attributes":[{"value":"/ The fully qualified message name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766333,"byte_end":8766370,"line_start":1047,"line_end":1047,"column_start":5,"column_end":42}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766375,"byte_end":8766400,"line_start":1048,"line_end":1048,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2152},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766524,"byte_end":8766530,"line_start":1052,"line_end":1052,"column_start":9,"column_end":15},"name":"fields","qualname":"::Type::fields","value":"prost::alloc::vec::Vec<Field>","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" The list of fields.\n","sig":null,"attributes":[{"value":"/ The list of fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766451,"byte_end":8766474,"line_start":1050,"line_end":1050,"column_start":5,"column_end":28}},{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766479,"byte_end":8766515,"line_start":1051,"line_end":1051,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2153},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766686,"byte_end":8766692,"line_start":1055,"line_end":1055,"column_start":9,"column_end":15},"name":"oneofs","qualname":"::Type::oneofs","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" The list of types appearing in `oneof` definitions in this type.\n","sig":null,"attributes":[{"value":"/ The list of types appearing in `oneof` definitions in this type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766569,"byte_end":8766637,"line_start":1053,"line_end":1053,"column_start":5,"column_end":73}},{"value":"prost(string, repeated, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766642,"byte_end":8766677,"line_start":1054,"line_end":1054,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2154},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766838,"byte_end":8766845,"line_start":1058,"line_end":1058,"column_start":9,"column_end":16},"name":"options","qualname":"::Type::options","value":"prost::alloc::vec::Vec<Option>","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" The protocol buffer options.\n","sig":null,"attributes":[{"value":"/ The protocol buffer options.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766756,"byte_end":8766788,"line_start":1056,"line_end":1056,"column_start":5,"column_end":37}},{"value":"prost(message, repeated, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766793,"byte_end":8766829,"line_start":1057,"line_end":1057,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2155},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766958,"byte_end":8766972,"line_start":1061,"line_end":1061,"column_start":9,"column_end":23},"name":"source_context","qualname":"::Type::source_context","value":"core::option::Option<SourceContext>","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" The source context.\n","sig":null,"attributes":[{"value":"/ The source context.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766885,"byte_end":8766908,"line_start":1059,"line_end":1059,"column_start":5,"column_end":28}},{"value":"prost(message, optional, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8766913,"byte_end":8766949,"line_start":1060,"line_end":1060,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767092,"byte_end":8767098,"line_start":1064,"line_end":1064,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Type::syntax","value":"i32","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" The source syntax.\n","sig":null,"attributes":[{"value":"/ The source syntax.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767017,"byte_end":8767039,"line_start":1062,"line_end":1062,"column_start":5,"column_end":27}},{"value":"prost(enumeration = \"Syntax\", tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767044,"byte_end":8767083,"line_start":1063,"line_end":1063,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767092,"byte_end":8767098,"line_start":1064,"line_end":1064,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Type>::syntax","value":"pub fn syntax(&Self) -> Syntax","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `syntax`, or the default if the field is set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2157},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767202,"byte_end":8767207,"line_start":1068,"line_end":1068,"column_start":12,"column_end":17},"name":"Field","qualname":"::Field","value":"Field { kind, cardinality, number, name, type_url, oneof_index, packed, options, json_name, default_value }","parent":null,"children":[{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":2228}],"decl_id":null,"docs":" A single field of a message type.\n","sig":null,"attributes":[{"value":"/ A single field of a message type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767107,"byte_end":8767144,"line_start":1066,"line_end":1066,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767291,"byte_end":8767295,"line_start":1071,"line_end":1071,"column_start":9,"column_end":13},"name":"kind","qualname":"::Field::kind","value":"i32","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The field type.\n","sig":null,"attributes":[{"value":"/ The field type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767214,"byte_end":8767233,"line_start":1069,"line_end":1069,"column_start":5,"column_end":24}},{"value":"prost(enumeration = \"field::Kind\", tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767238,"byte_end":8767282,"line_start":1070,"line_end":1070,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767397,"byte_end":8767408,"line_start":1074,"line_end":1074,"column_start":9,"column_end":20},"name":"cardinality","qualname":"::Field::cardinality","value":"i32","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The field cardinality.\n","sig":null,"attributes":[{"value":"/ The field cardinality.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767306,"byte_end":8767332,"line_start":1072,"line_end":1072,"column_start":5,"column_end":31}},{"value":"prost(enumeration = \"field::Cardinality\", tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767337,"byte_end":8767388,"line_start":1073,"line_end":1073,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2221},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767478,"byte_end":8767484,"line_start":1077,"line_end":1077,"column_start":9,"column_end":15},"name":"number","qualname":"::Field::number","value":"i32","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The field number.\n","sig":null,"attributes":[{"value":"/ The field number.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767419,"byte_end":8767440,"line_start":1075,"line_end":1075,"column_start":5,"column_end":26}},{"value":"prost(int32, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767445,"byte_end":8767469,"line_start":1076,"line_end":1076,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2222},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767553,"byte_end":8767557,"line_start":1080,"line_end":1080,"column_start":9,"column_end":13},"name":"name","qualname":"::Field::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The field name.\n","sig":null,"attributes":[{"value":"/ The field name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767495,"byte_end":8767514,"line_start":1078,"line_end":1078,"column_start":5,"column_end":24}},{"value":"prost(string, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767519,"byte_end":8767544,"line_start":1079,"line_end":1079,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2223},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767779,"byte_end":8767787,"line_start":1084,"line_end":1084,"column_start":9,"column_end":17},"name":"type_url","qualname":"::Field::type_url","value":"prost::alloc::string::String","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The field type URL, without the scheme, for message or enumeration\n types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.\n","sig":null,"attributes":[{"value":"/ The field type URL, without the scheme, for message or enumeration","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767595,"byte_end":8767665,"line_start":1081,"line_end":1081,"column_start":5,"column_end":75}},{"value":"/ types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767670,"byte_end":8767740,"line_start":1082,"line_end":1082,"column_start":5,"column_end":75}},{"value":"prost(string, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767745,"byte_end":8767770,"line_start":1083,"line_end":1083,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2224},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768022,"byte_end":8768033,"line_start":1088,"line_end":1088,"column_start":9,"column_end":20},"name":"oneof_index","qualname":"::Field::oneof_index","value":"i32","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The index of the field type in `Type.oneofs`, for message or enumeration\n types. The first type has index 1; zero means the type is not in the list.\n","sig":null,"attributes":[{"value":"/ The index of the field type in `Type.oneofs`, for message or enumeration","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767825,"byte_end":8767901,"line_start":1085,"line_end":1085,"column_start":5,"column_end":81}},{"value":"/ types. The first type has index 1; zero means the type is not in the list.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767906,"byte_end":8767984,"line_start":1086,"line_end":1086,"column_start":5,"column_end":83}},{"value":"prost(int32, tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767989,"byte_end":8768013,"line_start":1087,"line_end":1087,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2225},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768139,"byte_end":8768145,"line_start":1091,"line_end":1091,"column_start":9,"column_end":15},"name":"packed","qualname":"::Field::packed","value":"bool","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" Whether to use alternative packed wire representation.\n","sig":null,"attributes":[{"value":"/ Whether to use alternative packed wire representation.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768044,"byte_end":8768102,"line_start":1089,"line_end":1089,"column_start":5,"column_end":63}},{"value":"prost(bool, tag = \"8\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768107,"byte_end":8768130,"line_start":1090,"line_end":1090,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768239,"byte_end":8768246,"line_start":1094,"line_end":1094,"column_start":9,"column_end":16},"name":"options","qualname":"::Field::options","value":"prost::alloc::vec::Vec<Option>","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The protocol buffer options.\n","sig":null,"attributes":[{"value":"/ The protocol buffer options.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768157,"byte_end":8768189,"line_start":1092,"line_end":1092,"column_start":5,"column_end":37}},{"value":"prost(message, repeated, tag = \"9\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768194,"byte_end":8768230,"line_start":1093,"line_end":1093,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2227},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768350,"byte_end":8768359,"line_start":1097,"line_end":1097,"column_start":9,"column_end":18},"name":"json_name","qualname":"::Field::json_name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The field JSON name.\n","sig":null,"attributes":[{"value":"/ The field JSON name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768286,"byte_end":8768310,"line_start":1095,"line_end":1095,"column_start":5,"column_end":29}},{"value":"prost(string, tag = \"10\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768315,"byte_end":8768341,"line_start":1096,"line_end":1096,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2228},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768513,"byte_end":8768526,"line_start":1100,"line_end":1100,"column_start":9,"column_end":22},"name":"default_value","qualname":"::Field::default_value","value":"prost::alloc::string::String","parent":{"krate":0,"index":2157},"children":[],"decl_id":null,"docs":" The string value of the default value of this field. Proto2 syntax only.\n","sig":null,"attributes":[{"value":"/ The string value of the default value of this field. Proto2 syntax only.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768397,"byte_end":8768473,"line_start":1098,"line_end":1098,"column_start":5,"column_end":81}},{"value":"prost(string, tag = \"11\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768478,"byte_end":8768504,"line_start":1099,"line_end":1099,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767291,"byte_end":8767295,"line_start":1071,"line_end":1071,"column_start":9,"column_end":13},"name":"kind","qualname":"<Field>::kind","value":"pub fn kind(&Self) -> field::Kind","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `kind`, or the default if the field is set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8767397,"byte_end":8767408,"line_start":1074,"line_end":1074,"column_start":9,"column_end":20},"name":"cardinality","qualname":"<Field>::cardinality","value":"pub fn cardinality(&Self) -> field::Cardinality","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `cardinality`, or the default if the field is set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":35},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768616,"byte_end":8768621,"line_start":1103,"line_end":1103,"column_start":9,"column_end":14},"name":"field","qualname":"::field","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2287},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2301},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2308},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2325},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2343},{"krate":0,"index":2346},{"krate":0,"index":2348}],"decl_id":null,"docs":" Nested message and enum types in `Field`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `Field`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768562,"byte_end":8768607,"line_start":1102,"line_end":1102,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2230},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768822,"byte_end":8768833,"line_start":1109,"line_end":1109,"column_start":9,"column_end":20},"name":"TypeUnknown","qualname":"::field::Kind::TypeUnknown","value":"Kind::TypeUnknown","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type unknown.\n","sig":null,"attributes":[{"value":"/ Field type unknown.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768790,"byte_end":8768813,"line_start":1108,"line_end":1108,"column_start":9,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2233},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768878,"byte_end":8768888,"line_start":1111,"line_end":1111,"column_start":9,"column_end":19},"name":"TypeDouble","qualname":"::field::Kind::TypeDouble","value":"Kind::TypeDouble","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type double.\n","sig":null,"attributes":[{"value":"/ Field type double.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768847,"byte_end":8768869,"line_start":1110,"line_end":1110,"column_start":9,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2236},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768932,"byte_end":8768941,"line_start":1113,"line_end":1113,"column_start":9,"column_end":18},"name":"TypeFloat","qualname":"::field::Kind::TypeFloat","value":"Kind::TypeFloat","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type float.\n","sig":null,"attributes":[{"value":"/ Field type float.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768902,"byte_end":8768923,"line_start":1112,"line_end":1112,"column_start":9,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768985,"byte_end":8768994,"line_start":1115,"line_end":1115,"column_start":9,"column_end":18},"name":"TypeInt64","qualname":"::field::Kind::TypeInt64","value":"Kind::TypeInt64","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type int64.\n","sig":null,"attributes":[{"value":"/ Field type int64.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768955,"byte_end":8768976,"line_start":1114,"line_end":1114,"column_start":9,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2242},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769039,"byte_end":8769049,"line_start":1117,"line_end":1117,"column_start":9,"column_end":19},"name":"TypeUint64","qualname":"::field::Kind::TypeUint64","value":"Kind::TypeUint64","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type uint64.\n","sig":null,"attributes":[{"value":"/ Field type uint64.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769008,"byte_end":8769030,"line_start":1116,"line_end":1116,"column_start":9,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2245},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769093,"byte_end":8769102,"line_start":1119,"line_end":1119,"column_start":9,"column_end":18},"name":"TypeInt32","qualname":"::field::Kind::TypeInt32","value":"Kind::TypeInt32","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type int32.\n","sig":null,"attributes":[{"value":"/ Field type int32.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769063,"byte_end":8769084,"line_start":1118,"line_end":1118,"column_start":9,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2248},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769148,"byte_end":8769159,"line_start":1121,"line_end":1121,"column_start":9,"column_end":20},"name":"TypeFixed64","qualname":"::field::Kind::TypeFixed64","value":"Kind::TypeFixed64","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type fixed64.\n","sig":null,"attributes":[{"value":"/ Field type fixed64.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769116,"byte_end":8769139,"line_start":1120,"line_end":1120,"column_start":9,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2251},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769205,"byte_end":8769216,"line_start":1123,"line_end":1123,"column_start":9,"column_end":20},"name":"TypeFixed32","qualname":"::field::Kind::TypeFixed32","value":"Kind::TypeFixed32","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type fixed32.\n","sig":null,"attributes":[{"value":"/ Field type fixed32.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769173,"byte_end":8769196,"line_start":1122,"line_end":1122,"column_start":9,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2254},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769259,"byte_end":8769267,"line_start":1125,"line_end":1125,"column_start":9,"column_end":17},"name":"TypeBool","qualname":"::field::Kind::TypeBool","value":"Kind::TypeBool","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type bool.\n","sig":null,"attributes":[{"value":"/ Field type bool.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769230,"byte_end":8769250,"line_start":1124,"line_end":1124,"column_start":9,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2257},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769312,"byte_end":8769322,"line_start":1127,"line_end":1127,"column_start":9,"column_end":19},"name":"TypeString","qualname":"::field::Kind::TypeString","value":"Kind::TypeString","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type string.\n","sig":null,"attributes":[{"value":"/ Field type string.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769281,"byte_end":8769303,"line_start":1126,"line_end":1126,"column_start":9,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2260},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769402,"byte_end":8769411,"line_start":1129,"line_end":1129,"column_start":9,"column_end":18},"name":"TypeGroup","qualname":"::field::Kind::TypeGroup","value":"Kind::TypeGroup","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type group. Proto2 syntax only, and deprecated.\n","sig":null,"attributes":[{"value":"/ Field type group. Proto2 syntax only, and deprecated.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769336,"byte_end":8769393,"line_start":1128,"line_end":1128,"column_start":9,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2263},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769458,"byte_end":8769469,"line_start":1131,"line_end":1131,"column_start":9,"column_end":20},"name":"TypeMessage","qualname":"::field::Kind::TypeMessage","value":"Kind::TypeMessage","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type message.\n","sig":null,"attributes":[{"value":"/ Field type message.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769426,"byte_end":8769449,"line_start":1130,"line_end":1130,"column_start":9,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2266},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769514,"byte_end":8769523,"line_start":1133,"line_end":1133,"column_start":9,"column_end":18},"name":"TypeBytes","qualname":"::field::Kind::TypeBytes","value":"Kind::TypeBytes","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type bytes.\n","sig":null,"attributes":[{"value":"/ Field type bytes.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769484,"byte_end":8769505,"line_start":1132,"line_end":1132,"column_start":9,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2269},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769569,"byte_end":8769579,"line_start":1135,"line_end":1135,"column_start":9,"column_end":19},"name":"TypeUint32","qualname":"::field::Kind::TypeUint32","value":"Kind::TypeUint32","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type uint32.\n","sig":null,"attributes":[{"value":"/ Field type uint32.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769538,"byte_end":8769560,"line_start":1134,"line_end":1134,"column_start":9,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2272},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769623,"byte_end":8769631,"line_start":1137,"line_end":1137,"column_start":9,"column_end":17},"name":"TypeEnum","qualname":"::field::Kind::TypeEnum","value":"Kind::TypeEnum","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type enum.\n","sig":null,"attributes":[{"value":"/ Field type enum.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769594,"byte_end":8769614,"line_start":1136,"line_end":1136,"column_start":9,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2275},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769679,"byte_end":8769691,"line_start":1139,"line_end":1139,"column_start":9,"column_end":21},"name":"TypeSfixed32","qualname":"::field::Kind::TypeSfixed32","value":"Kind::TypeSfixed32","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type sfixed32.\n","sig":null,"attributes":[{"value":"/ Field type sfixed32.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769646,"byte_end":8769670,"line_start":1138,"line_end":1138,"column_start":9,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769739,"byte_end":8769751,"line_start":1141,"line_end":1141,"column_start":9,"column_end":21},"name":"TypeSfixed64","qualname":"::field::Kind::TypeSfixed64","value":"Kind::TypeSfixed64","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type sfixed64.\n","sig":null,"attributes":[{"value":"/ Field type sfixed64.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769706,"byte_end":8769730,"line_start":1140,"line_end":1140,"column_start":9,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2281},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769797,"byte_end":8769807,"line_start":1143,"line_end":1143,"column_start":9,"column_end":19},"name":"TypeSint32","qualname":"::field::Kind::TypeSint32","value":"Kind::TypeSint32","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type sint32.\n","sig":null,"attributes":[{"value":"/ Field type sint32.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769766,"byte_end":8769788,"line_start":1142,"line_end":1142,"column_start":9,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2284},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769853,"byte_end":8769863,"line_start":1145,"line_end":1145,"column_start":9,"column_end":19},"name":"TypeSint64","qualname":"::field::Kind::TypeSint64","value":"Kind::TypeSint64","parent":{"krate":0,"index":2229},"children":[],"decl_id":null,"docs":" Field type sint64.\n","sig":null,"attributes":[{"value":"/ Field type sint64.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769822,"byte_end":8769844,"line_start":1144,"line_end":1144,"column_start":9,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":2229},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768775,"byte_end":8768779,"line_start":1107,"line_end":1107,"column_start":14,"column_end":18},"name":"Kind","qualname":"::field::Kind","value":"pub enum Kind {\n    TypeUnknown = ,\n    TypeDouble = ,\n    TypeFloat = ,\n    TypeInt64 = ,\n    TypeUint64 = ,\n    TypeInt32 = ,\n    TypeFixed64 = ,\n    TypeFixed32 = ,\n    TypeBool = ,\n    TypeString = ,\n    TypeGroup = ,\n    TypeMessage = ,\n    TypeBytes = ,\n    TypeUint32 = ,\n    TypeEnum = ,\n    TypeSfixed32 = ,\n    TypeSfixed64 = ,\n    TypeSint32 = ,\n    TypeSint64 = ,\n}","parent":null,"children":[{"krate":0,"index":2230},{"krate":0,"index":2233},{"krate":0,"index":2236},{"krate":0,"index":2239},{"krate":0,"index":2242},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2257},{"krate":0,"index":2260},{"krate":0,"index":2263},{"krate":0,"index":2266},{"krate":0,"index":2269},{"krate":0,"index":2272},{"krate":0,"index":2275},{"krate":0,"index":2278},{"krate":0,"index":2281},{"krate":0,"index":2284}],"decl_id":null,"docs":" Basic field types.\n","sig":null,"attributes":[{"value":"/ Basic field types.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768628,"byte_end":8768650,"line_start":1104,"line_end":1104,"column_start":5,"column_end":27}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8768749,"byte_end":8768761,"line_start":1106,"line_end":1106,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2313},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770131,"byte_end":8770138,"line_start":1152,"line_end":1152,"column_start":9,"column_end":16},"name":"Unknown","qualname":"::field::Cardinality::Unknown","value":"Cardinality::Unknown","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" For fields with unknown cardinality.\n","sig":null,"attributes":[{"value":"/ For fields with unknown cardinality.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770082,"byte_end":8770122,"line_start":1151,"line_end":1151,"column_start":9,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2316},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770185,"byte_end":8770193,"line_start":1154,"line_end":1154,"column_start":9,"column_end":17},"name":"Optional","qualname":"::field::Cardinality::Optional","value":"Cardinality::Optional","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" For optional fields.\n","sig":null,"attributes":[{"value":"/ For optional fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770152,"byte_end":8770176,"line_start":1153,"line_end":1153,"column_start":9,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770260,"byte_end":8770268,"line_start":1156,"line_end":1156,"column_start":9,"column_end":17},"name":"Required","qualname":"::field::Cardinality::Required","value":"Cardinality::Required","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" For required fields. Proto2 syntax only.\n","sig":null,"attributes":[{"value":"/ For required fields. Proto2 syntax only.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770207,"byte_end":8770251,"line_start":1155,"line_end":1155,"column_start":9,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2322},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770315,"byte_end":8770323,"line_start":1158,"line_end":1158,"column_start":9,"column_end":17},"name":"Repeated","qualname":"::field::Cardinality::Repeated","value":"Cardinality::Repeated","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" For repeated fields.\n","sig":null,"attributes":[{"value":"/ For repeated fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770282,"byte_end":8770306,"line_start":1157,"line_end":1157,"column_start":9,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":2312},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770060,"byte_end":8770071,"line_start":1150,"line_end":1150,"column_start":14,"column_end":25},"name":"Cardinality","qualname":"::field::Cardinality","value":"pub enum Cardinality { Unknown = , Optional = , Required = , Repeated = , }","parent":null,"children":[{"krate":0,"index":2313},{"krate":0,"index":2316},{"krate":0,"index":2319},{"krate":0,"index":2322}],"decl_id":null,"docs":" Whether a field is optional, required, or repeated.\n","sig":null,"attributes":[{"value":"/ Whether a field is optional, required, or repeated.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8769880,"byte_end":8769935,"line_start":1147,"line_end":1147,"column_start":5,"column_end":60}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770034,"byte_end":8770046,"line_start":1149,"line_end":1149,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":2350},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770420,"byte_end":8770424,"line_start":1163,"line_end":1163,"column_start":12,"column_end":16},"name":"Enum","qualname":"::Enum","value":"Enum { name, enumvalue, options, source_context, syntax }","parent":null,"children":[{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391}],"decl_id":null,"docs":" Enum type definition.\n","sig":null,"attributes":[{"value":"/ Enum type definition.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770337,"byte_end":8770362,"line_start":1161,"line_end":1161,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2387},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770489,"byte_end":8770493,"line_start":1166,"line_end":1166,"column_start":9,"column_end":13},"name":"name","qualname":"::Enum::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2350},"children":[],"decl_id":null,"docs":" Enum type name.\n","sig":null,"attributes":[{"value":"/ Enum type name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770431,"byte_end":8770450,"line_start":1164,"line_end":1164,"column_start":5,"column_end":24}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770455,"byte_end":8770480,"line_start":1165,"line_end":1165,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2388},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770608,"byte_end":8770617,"line_start":1169,"line_end":1169,"column_start":9,"column_end":18},"name":"enumvalue","qualname":"::Enum::enumvalue","value":"prost::alloc::vec::Vec<EnumValue>","parent":{"krate":0,"index":2350},"children":[],"decl_id":null,"docs":" Enum value definitions.\n","sig":null,"attributes":[{"value":"/ Enum value definitions.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770531,"byte_end":8770558,"line_start":1167,"line_end":1167,"column_start":5,"column_end":32}},{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770563,"byte_end":8770599,"line_start":1168,"line_end":1168,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770738,"byte_end":8770745,"line_start":1172,"line_end":1172,"column_start":9,"column_end":16},"name":"options","qualname":"::Enum::options","value":"prost::alloc::vec::Vec<Option>","parent":{"krate":0,"index":2350},"children":[],"decl_id":null,"docs":" Protocol buffer options.\n","sig":null,"attributes":[{"value":"/ Protocol buffer options.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770660,"byte_end":8770688,"line_start":1170,"line_end":1170,"column_start":5,"column_end":33}},{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770693,"byte_end":8770729,"line_start":1171,"line_end":1171,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2390},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770858,"byte_end":8770872,"line_start":1175,"line_end":1175,"column_start":9,"column_end":23},"name":"source_context","qualname":"::Enum::source_context","value":"core::option::Option<SourceContext>","parent":{"krate":0,"index":2350},"children":[],"decl_id":null,"docs":" The source context.\n","sig":null,"attributes":[{"value":"/ The source context.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770785,"byte_end":8770808,"line_start":1173,"line_end":1173,"column_start":5,"column_end":28}},{"value":"prost(message, optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770813,"byte_end":8770849,"line_start":1174,"line_end":1174,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770992,"byte_end":8770998,"line_start":1178,"line_end":1178,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Enum::syntax","value":"i32","parent":{"krate":0,"index":2350},"children":[],"decl_id":null,"docs":" The source syntax.\n","sig":null,"attributes":[{"value":"/ The source syntax.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770917,"byte_end":8770939,"line_start":1176,"line_end":1176,"column_start":5,"column_end":27}},{"value":"prost(enumeration = \"Syntax\", tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770944,"byte_end":8770983,"line_start":1177,"line_end":1177,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8770992,"byte_end":8770998,"line_start":1178,"line_end":1178,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Enum>::syntax","value":"pub fn syntax(&Self) -> Syntax","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `syntax`, or the default if the field is set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2392},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771091,"byte_end":8771100,"line_start":1182,"line_end":1182,"column_start":12,"column_end":21},"name":"EnumValue","qualname":"::EnumValue","value":"EnumValue { name, number, options }","parent":null,"children":[{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420}],"decl_id":null,"docs":" Enum value definition.\n","sig":null,"attributes":[{"value":"/ Enum value definition.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771007,"byte_end":8771033,"line_start":1180,"line_end":1180,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2418},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771166,"byte_end":8771170,"line_start":1185,"line_end":1185,"column_start":9,"column_end":13},"name":"name","qualname":"::EnumValue::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2392},"children":[],"decl_id":null,"docs":" Enum value name.\n","sig":null,"attributes":[{"value":"/ Enum value name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771107,"byte_end":8771127,"line_start":1183,"line_end":1183,"column_start":5,"column_end":25}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771132,"byte_end":8771157,"line_start":1184,"line_end":1184,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2419},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771268,"byte_end":8771274,"line_start":1188,"line_end":1188,"column_start":9,"column_end":15},"name":"number","qualname":"::EnumValue::number","value":"i32","parent":{"krate":0,"index":2392},"children":[],"decl_id":null,"docs":" Enum value number.\n","sig":null,"attributes":[{"value":"/ Enum value number.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771208,"byte_end":8771230,"line_start":1186,"line_end":1186,"column_start":5,"column_end":27}},{"value":"prost(int32, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771235,"byte_end":8771259,"line_start":1187,"line_end":1187,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2420},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771363,"byte_end":8771370,"line_start":1191,"line_end":1191,"column_start":9,"column_end":16},"name":"options","qualname":"::EnumValue::options","value":"prost::alloc::vec::Vec<Option>","parent":{"krate":0,"index":2392},"children":[],"decl_id":null,"docs":" Protocol buffer options.\n","sig":null,"attributes":[{"value":"/ Protocol buffer options.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771285,"byte_end":8771313,"line_start":1189,"line_end":1189,"column_start":5,"column_end":33}},{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771318,"byte_end":8771354,"line_start":1190,"line_end":1190,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2421},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771560,"byte_end":8771566,"line_start":1196,"line_end":1196,"column_start":12,"column_end":18},"name":"Option","qualname":"::Option","value":"Option { name, value }","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2446}],"decl_id":null,"docs":" A protocol buffer option, which can be attached to a message, field,\n enumeration, etc.\n","sig":null,"attributes":[{"value":"/ A protocol buffer option, which can be attached to a message, field,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771408,"byte_end":8771480,"line_start":1193,"line_end":1193,"column_start":1,"column_end":73}},{"value":"/ enumeration, etc.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771481,"byte_end":8771502,"line_start":1194,"line_end":1194,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2445},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771872,"byte_end":8771876,"line_start":1202,"line_end":1202,"column_start":9,"column_end":13},"name":"name","qualname":"::Option::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2421},"children":[],"decl_id":null,"docs":" The option's name. For protobuf built-in options (options defined in\n descriptor.proto), this is the short name. For example, `\"map_entry\"`.\n For custom options, it should be the fully-qualified name. For example,\n `\"google.api.http\"`.\n","sig":null,"attributes":[{"value":"/ The option's name. For protobuf built-in options (options defined in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771573,"byte_end":8771645,"line_start":1197,"line_end":1197,"column_start":5,"column_end":77}},{"value":"/ descriptor.proto), this is the short name. For example, `\"map_entry\"`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771650,"byte_end":8771724,"line_start":1198,"line_end":1198,"column_start":5,"column_end":79}},{"value":"/ For custom options, it should be the fully-qualified name. For example,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771729,"byte_end":8771804,"line_start":1199,"line_end":1199,"column_start":5,"column_end":80}},{"value":"/ `\"google.api.http\"`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771809,"byte_end":8771833,"line_start":1200,"line_end":1200,"column_start":5,"column_end":29}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771838,"byte_end":8771863,"line_start":1201,"line_end":1201,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2446},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772260,"byte_end":8772265,"line_start":1208,"line_end":1208,"column_start":9,"column_end":14},"name":"value","qualname":"::Option::value","value":"core::option::Option<Any>","parent":{"krate":0,"index":2421},"children":[],"decl_id":null,"docs":" The option's value packed in an Any message. If the value is a primitive,\n the corresponding wrapper type defined in google/protobuf/wrappers.proto\n should be used. If the value is an enum, it should be stored as an int32\n value using the google.protobuf.Int32Value type.\n","sig":null,"attributes":[{"value":"/ The option's value packed in an Any message. If the value is a primitive,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771914,"byte_end":8771991,"line_start":1203,"line_end":1203,"column_start":5,"column_end":82}},{"value":"/ the corresponding wrapper type defined in google/protobuf/wrappers.proto","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8771996,"byte_end":8772072,"line_start":1204,"line_end":1204,"column_start":5,"column_end":81}},{"value":"/ should be used. If the value is an enum, it should be stored as an int32","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772077,"byte_end":8772153,"line_start":1205,"line_end":1205,"column_start":5,"column_end":81}},{"value":"/ value using the google.protobuf.Int32Value type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772158,"byte_end":8772210,"line_start":1206,"line_end":1206,"column_start":5,"column_end":57}},{"value":"prost(message, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772215,"byte_end":8772251,"line_start":1207,"line_end":1207,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2448},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772510,"byte_end":8772516,"line_start":1215,"line_end":1215,"column_start":5,"column_end":11},"name":"Proto2","qualname":"::Syntax::Proto2","value":"Syntax::Proto2","parent":{"krate":0,"index":2447},"children":[],"decl_id":null,"docs":" Syntax `proto2`.\n","sig":null,"attributes":[{"value":"/ Syntax `proto2`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772485,"byte_end":8772505,"line_start":1214,"line_end":1214,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2451},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772551,"byte_end":8772557,"line_start":1217,"line_end":1217,"column_start":5,"column_end":11},"name":"Proto3","qualname":"::Syntax::Proto3","value":"Syntax::Proto3","parent":{"krate":0,"index":2447},"children":[],"decl_id":null,"docs":" Syntax `proto3`.\n","sig":null,"attributes":[{"value":"/ Syntax `proto3`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772526,"byte_end":8772546,"line_start":1216,"line_end":1216,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":2447},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772472,"byte_end":8772478,"line_start":1213,"line_end":1213,"column_start":10,"column_end":16},"name":"Syntax","qualname":"::Syntax","value":"pub enum Syntax { Proto2 = , Proto3 = , }","parent":null,"children":[{"krate":0,"index":2448},{"krate":0,"index":2451}],"decl_id":null,"docs":" The syntax in which a protocol buffer element is defined.\n","sig":null,"attributes":[{"value":"/ The syntax in which a protocol buffer element is defined.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772298,"byte_end":8772359,"line_start":1210,"line_end":1210,"column_start":1,"column_end":62}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772450,"byte_end":8772462,"line_start":1212,"line_end":1212,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":2479},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773191,"byte_end":8773194,"line_start":1229,"line_end":1229,"column_start":12,"column_end":15},"name":"Api","qualname":"::Api","value":"Api { name, methods, options, version, source_context, mixins, syntax }","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526}],"decl_id":null,"docs":" Api is a light-weight descriptor for an API Interface.","sig":null,"attributes":[{"value":"/ Api is a light-weight descriptor for an API Interface.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772565,"byte_end":8772623,"line_start":1219,"line_end":1219,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772624,"byte_end":8772627,"line_start":1220,"line_end":1220,"column_start":1,"column_end":4}},{"value":"/ Interfaces are also described as \"protocol buffer services\" in some contexts,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772628,"byte_end":8772709,"line_start":1221,"line_end":1221,"column_start":1,"column_end":82}},{"value":"/ such as by the \"service\" keyword in a .proto file, but they are different","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772710,"byte_end":8772787,"line_start":1222,"line_end":1222,"column_start":1,"column_end":78}},{"value":"/ from API Services, which represent a concrete implementation of an interface","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772788,"byte_end":8772868,"line_start":1223,"line_end":1223,"column_start":1,"column_end":81}},{"value":"/ as opposed to simply a description of methods and bindings. They are also","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772869,"byte_end":8772946,"line_start":1224,"line_end":1224,"column_start":1,"column_end":78}},{"value":"/ sometimes simply referred to as \"APIs\" in other contexts, such as the name of","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8772947,"byte_end":8773028,"line_start":1225,"line_end":1225,"column_start":1,"column_end":82}},{"value":"/ this message itself. See https://cloud.google.com/apis/design/glossary for","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773029,"byte_end":8773107,"line_start":1226,"line_end":1226,"column_start":1,"column_end":79}},{"value":"/ detailed terminology.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773108,"byte_end":8773133,"line_start":1227,"line_end":1227,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2520},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773359,"byte_end":8773363,"line_start":1233,"line_end":1233,"column_start":9,"column_end":13},"name":"name","qualname":"::Api::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" The fully qualified name of this interface, including package name\n followed by the interface's simple name.\n","sig":null,"attributes":[{"value":"/ The fully qualified name of this interface, including package name","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773201,"byte_end":8773271,"line_start":1230,"line_end":1230,"column_start":5,"column_end":75}},{"value":"/ followed by the interface's simple name.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773276,"byte_end":8773320,"line_start":1231,"line_end":1231,"column_start":5,"column_end":49}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773325,"byte_end":8773350,"line_start":1232,"line_end":1232,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773507,"byte_end":8773514,"line_start":1236,"line_end":1236,"column_start":9,"column_end":16},"name":"methods","qualname":"::Api::methods","value":"prost::alloc::vec::Vec<Method>","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" The methods of this interface, in unspecified order.\n","sig":null,"attributes":[{"value":"/ The methods of this interface, in unspecified order.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773401,"byte_end":8773457,"line_start":1234,"line_end":1234,"column_start":5,"column_end":61}},{"value":"prost(message, repeated, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773462,"byte_end":8773498,"line_start":1235,"line_end":1235,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2522},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773647,"byte_end":8773654,"line_start":1239,"line_end":1239,"column_start":9,"column_end":16},"name":"options","qualname":"::Api::options","value":"prost::alloc::vec::Vec<Option>","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" Any metadata attached to the interface.\n","sig":null,"attributes":[{"value":"/ Any metadata attached to the interface.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773554,"byte_end":8773597,"line_start":1237,"line_end":1237,"column_start":5,"column_end":48}},{"value":"prost(message, repeated, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773602,"byte_end":8773638,"line_start":1238,"line_end":1238,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774887,"byte_end":8774894,"line_start":1262,"line_end":1262,"column_start":9,"column_end":16},"name":"version","qualname":"::Api::version","value":"prost::alloc::string::String","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" A version string for this interface. If specified, must have the form\n `major-version.minor-version`, as in `1.10`. If the minor version is\n omitted, it defaults to zero. If the entire version field is empty, the\n major version is derived from the package name, as outlined below. If the\n field is not empty, the version in the package name will be verified to be\n consistent with what is provided here.","sig":null,"attributes":[{"value":"/ A version string for this interface. If specified, must have the form","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773694,"byte_end":8773767,"line_start":1240,"line_end":1240,"column_start":5,"column_end":78}},{"value":"/ `major-version.minor-version`, as in `1.10`. If the minor version is","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773772,"byte_end":8773844,"line_start":1241,"line_end":1241,"column_start":5,"column_end":77}},{"value":"/ omitted, it defaults to zero. If the entire version field is empty, the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773849,"byte_end":8773924,"line_start":1242,"line_end":1242,"column_start":5,"column_end":80}},{"value":"/ major version is derived from the package name, as outlined below. If the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8773929,"byte_end":8774006,"line_start":1243,"line_end":1243,"column_start":5,"column_end":82}},{"value":"/ field is not empty, the version in the package name will be verified to be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774011,"byte_end":8774089,"line_start":1244,"line_end":1244,"column_start":5,"column_end":83}},{"value":"/ consistent with what is provided here.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774094,"byte_end":8774136,"line_start":1245,"line_end":1245,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774141,"byte_end":8774144,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ The versioning schema uses [semantic","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774149,"byte_end":8774189,"line_start":1247,"line_end":1247,"column_start":5,"column_end":45}},{"value":"/ versioning](http://semver.org) where the major version number","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774194,"byte_end":8774259,"line_start":1248,"line_end":1248,"column_start":5,"column_end":70}},{"value":"/ indicates a breaking change and the minor version an additive,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774264,"byte_end":8774330,"line_start":1249,"line_end":1249,"column_start":5,"column_end":71}},{"value":"/ non-breaking change. Both version numbers are signals to users","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774335,"byte_end":8774401,"line_start":1250,"line_end":1250,"column_start":5,"column_end":71}},{"value":"/ what to expect from different versions, and should be carefully","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774406,"byte_end":8774473,"line_start":1251,"line_end":1251,"column_start":5,"column_end":72}},{"value":"/ chosen based on the product plan.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774478,"byte_end":8774515,"line_start":1252,"line_end":1252,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774520,"byte_end":8774523,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ The major version is also reflected in the package name of the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774528,"byte_end":8774594,"line_start":1254,"line_end":1254,"column_start":5,"column_end":71}},{"value":"/ interface, which must end in `v<major-version>`, as in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774599,"byte_end":8774657,"line_start":1255,"line_end":1255,"column_start":5,"column_end":63}},{"value":"/ `google.feature.v1`. For major versions 0 and 1, the suffix can","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774662,"byte_end":8774729,"line_start":1256,"line_end":1256,"column_start":5,"column_end":72}},{"value":"/ be omitted. Zero major versions must only be used for","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774734,"byte_end":8774791,"line_start":1257,"line_end":1257,"column_start":5,"column_end":62}},{"value":"/ experimental, non-GA interfaces.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774796,"byte_end":8774832,"line_start":1258,"line_end":1258,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774837,"byte_end":8774840,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774845,"byte_end":8774848,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"prost(string, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774853,"byte_end":8774878,"line_start":1261,"line_end":1261,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2524},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775069,"byte_end":8775083,"line_start":1266,"line_end":1266,"column_start":9,"column_end":23},"name":"source_context","qualname":"::Api::source_context","value":"core::option::Option<SourceContext>","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" Source context for the protocol buffer service represented by this\n message.\n","sig":null,"attributes":[{"value":"/ Source context for the protocol buffer service represented by this","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8774932,"byte_end":8775002,"line_start":1263,"line_end":1263,"column_start":5,"column_end":75}},{"value":"/ message.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775007,"byte_end":8775019,"line_start":1264,"line_end":1264,"column_start":5,"column_end":17}},{"value":"prost(message, optional, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775024,"byte_end":8775060,"line_start":1265,"line_end":1265,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775217,"byte_end":8775223,"line_start":1269,"line_end":1269,"column_start":9,"column_end":15},"name":"mixins","qualname":"::Api::mixins","value":"prost::alloc::vec::Vec<Mixin>","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" Included interfaces. See [Mixin][].\n","sig":null,"attributes":[{"value":"/ Included interfaces. See [Mixin][].","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775128,"byte_end":8775167,"line_start":1267,"line_end":1267,"column_start":5,"column_end":44}},{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775172,"byte_end":8775208,"line_start":1268,"line_end":1268,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775352,"byte_end":8775358,"line_start":1272,"line_end":1272,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Api::syntax","value":"i32","parent":{"krate":0,"index":2479},"children":[],"decl_id":null,"docs":" The source syntax of the service.\n","sig":null,"attributes":[{"value":"/ The source syntax of the service.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775262,"byte_end":8775299,"line_start":1270,"line_end":1270,"column_start":5,"column_end":42}},{"value":"prost(enumeration = \"Syntax\", tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775304,"byte_end":8775343,"line_start":1271,"line_end":1271,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775352,"byte_end":8775358,"line_start":1272,"line_end":1272,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Api>::syntax","value":"pub fn syntax(&Self) -> Syntax","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `syntax`, or the default if the field is set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775476,"byte_end":8775482,"line_start":1276,"line_end":1276,"column_start":12,"column_end":18},"name":"Method","qualname":"::Method","value":"Method { name, request_type_url, request_streaming, response_type_url, response_streaming, options, syntax }","parent":null,"children":[{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2579}],"decl_id":null,"docs":" Method represents a method of an API interface.\n","sig":null,"attributes":[{"value":"/ Method represents a method of an API interface.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775367,"byte_end":8775418,"line_start":1274,"line_end":1274,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2573},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775563,"byte_end":8775567,"line_start":1279,"line_end":1279,"column_start":9,"column_end":13},"name":"name","qualname":"::Method::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" The simple name of this method.\n","sig":null,"attributes":[{"value":"/ The simple name of this method.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775489,"byte_end":8775524,"line_start":1277,"line_end":1277,"column_start":5,"column_end":40}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775529,"byte_end":8775554,"line_start":1278,"line_end":1278,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2574},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775680,"byte_end":8775696,"line_start":1282,"line_end":1282,"column_start":9,"column_end":25},"name":"request_type_url","qualname":"::Method::request_type_url","value":"prost::alloc::string::String","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" A URL of the input message type.\n","sig":null,"attributes":[{"value":"/ A URL of the input message type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775605,"byte_end":8775641,"line_start":1280,"line_end":1280,"column_start":5,"column_end":41}},{"value":"prost(string, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775646,"byte_end":8775671,"line_start":1281,"line_end":1281,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775808,"byte_end":8775825,"line_start":1285,"line_end":1285,"column_start":9,"column_end":26},"name":"request_streaming","qualname":"::Method::request_streaming","value":"bool","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" If true, the request is streamed.\n","sig":null,"attributes":[{"value":"/ If true, the request is streamed.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775734,"byte_end":8775771,"line_start":1283,"line_end":1283,"column_start":5,"column_end":42}},{"value":"prost(bool, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775776,"byte_end":8775799,"line_start":1284,"line_end":1284,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2576},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775915,"byte_end":8775932,"line_start":1288,"line_end":1288,"column_start":9,"column_end":26},"name":"response_type_url","qualname":"::Method::response_type_url","value":"prost::alloc::string::String","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" The URL of the output message type.\n","sig":null,"attributes":[{"value":"/ The URL of the output message type.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775837,"byte_end":8775876,"line_start":1286,"line_end":1286,"column_start":5,"column_end":44}},{"value":"prost(string, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775881,"byte_end":8775906,"line_start":1287,"line_end":1287,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2577},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776045,"byte_end":8776063,"line_start":1291,"line_end":1291,"column_start":9,"column_end":27},"name":"response_streaming","qualname":"::Method::response_streaming","value":"bool","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" If true, the response is streamed.\n","sig":null,"attributes":[{"value":"/ If true, the response is streamed.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8775970,"byte_end":8776008,"line_start":1289,"line_end":1289,"column_start":5,"column_end":43}},{"value":"prost(bool, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776013,"byte_end":8776036,"line_start":1290,"line_end":1290,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2578},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776165,"byte_end":8776172,"line_start":1294,"line_end":1294,"column_start":9,"column_end":16},"name":"options","qualname":"::Method::options","value":"prost::alloc::vec::Vec<Option>","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" Any metadata attached to the method.\n","sig":null,"attributes":[{"value":"/ Any metadata attached to the method.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776075,"byte_end":8776115,"line_start":1292,"line_end":1292,"column_start":5,"column_end":45}},{"value":"prost(message, repeated, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776120,"byte_end":8776156,"line_start":1293,"line_end":1293,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2579},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776302,"byte_end":8776308,"line_start":1297,"line_end":1297,"column_start":9,"column_end":15},"name":"syntax","qualname":"::Method::syntax","value":"i32","parent":{"krate":0,"index":2527},"children":[],"decl_id":null,"docs":" The source syntax of this method.\n","sig":null,"attributes":[{"value":"/ The source syntax of this method.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776212,"byte_end":8776249,"line_start":1295,"line_end":1295,"column_start":5,"column_end":42}},{"value":"prost(enumeration = \"Syntax\", tag = \"7\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776254,"byte_end":8776293,"line_start":1296,"line_end":1296,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776302,"byte_end":8776308,"line_start":1297,"line_end":1297,"column_start":9,"column_end":15},"name":"syntax","qualname":"<Method>::syntax","value":"pub fn syntax(&Self) -> Syntax","parent":null,"children":[],"decl_id":null,"docs":"Returns the enum value of `syntax`, or the default if the field is set to an invalid enum value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2580},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779099,"byte_end":8779104,"line_start":1378,"line_end":1378,"column_start":12,"column_end":17},"name":"Mixin","qualname":"::Mixin","value":"Mixin { name, root }","parent":null,"children":[{"krate":0,"index":2605},{"krate":0,"index":2606}],"decl_id":null,"docs":" Declares an API Interface to be included in this interface. The including\n interface must redeclare all the methods from the included interface, but\n documentation and options are inherited as follows:","sig":null,"attributes":[{"value":"/ Declares an API Interface to be included in this interface. The including","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776317,"byte_end":8776394,"line_start":1299,"line_end":1299,"column_start":1,"column_end":78}},{"value":"/ interface must redeclare all the methods from the included interface, but","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776395,"byte_end":8776472,"line_start":1300,"line_end":1300,"column_start":1,"column_end":78}},{"value":"/ documentation and options are inherited as follows:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776473,"byte_end":8776528,"line_start":1301,"line_end":1301,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776529,"byte_end":8776532,"line_start":1302,"line_end":1302,"column_start":1,"column_end":4}},{"value":"/ - If after comment and whitespace stripping, the documentation","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776533,"byte_end":8776599,"line_start":1303,"line_end":1303,"column_start":1,"column_end":67}},{"value":"/   string of the redeclared method is empty, it will be inherited","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776600,"byte_end":8776668,"line_start":1304,"line_end":1304,"column_start":1,"column_end":69}},{"value":"/   from the original method.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776669,"byte_end":8776700,"line_start":1305,"line_end":1305,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776701,"byte_end":8776704,"line_start":1306,"line_end":1306,"column_start":1,"column_end":4}},{"value":"/ - Each annotation belonging to the service config (http,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776705,"byte_end":8776765,"line_start":1307,"line_end":1307,"column_start":1,"column_end":61}},{"value":"/   visibility) which is not set in the redeclared method will be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776766,"byte_end":8776833,"line_start":1308,"line_end":1308,"column_start":1,"column_end":68}},{"value":"/   inherited.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776834,"byte_end":8776850,"line_start":1309,"line_end":1309,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776851,"byte_end":8776854,"line_start":1310,"line_end":1310,"column_start":1,"column_end":4}},{"value":"/ - If an http annotation is inherited, the path pattern will be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776855,"byte_end":8776921,"line_start":1311,"line_end":1311,"column_start":1,"column_end":67}},{"value":"/   modified as follows. Any version prefix will be replaced by the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776922,"byte_end":8776991,"line_start":1312,"line_end":1312,"column_start":1,"column_end":70}},{"value":"/   version of the including interface plus the [root][] path if","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8776992,"byte_end":8777058,"line_start":1313,"line_end":1313,"column_start":1,"column_end":67}},{"value":"/   specified.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777059,"byte_end":8777075,"line_start":1314,"line_end":1314,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777076,"byte_end":8777079,"line_start":1315,"line_end":1315,"column_start":1,"column_end":4}},{"value":"/ Example of a simple mixin:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777080,"byte_end":8777110,"line_start":1316,"line_end":1316,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777111,"byte_end":8777114,"line_start":1317,"line_end":1317,"column_start":1,"column_end":4}},{"value":"/     package google.acl.v1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777115,"byte_end":8777145,"line_start":1318,"line_end":1318,"column_start":1,"column_end":31}},{"value":"/     service AccessControl {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777146,"byte_end":8777177,"line_start":1319,"line_end":1319,"column_start":1,"column_end":32}},{"value":"/       // Get the underlying ACL object.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777178,"byte_end":8777221,"line_start":1320,"line_end":1320,"column_start":1,"column_end":44}},{"value":"/       rpc GetAcl(GetAclRequest) returns (Acl) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777222,"byte_end":8777273,"line_start":1321,"line_end":1321,"column_start":1,"column_end":52}},{"value":"/         option (google.api.http).get = \"/v1/{resource=**}:getAcl\";","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777274,"byte_end":8777344,"line_start":1322,"line_end":1322,"column_start":1,"column_end":71}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777345,"byte_end":8777356,"line_start":1323,"line_end":1323,"column_start":1,"column_end":12}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777357,"byte_end":8777366,"line_start":1324,"line_end":1324,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777367,"byte_end":8777370,"line_start":1325,"line_end":1325,"column_start":1,"column_end":4}},{"value":"/     package google.storage.v2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777371,"byte_end":8777405,"line_start":1326,"line_end":1326,"column_start":1,"column_end":35}},{"value":"/     service Storage {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777406,"byte_end":8777431,"line_start":1327,"line_end":1327,"column_start":1,"column_end":26}},{"value":"/       rpc GetAcl(GetAclRequest) returns (Acl);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777432,"byte_end":8777482,"line_start":1328,"line_end":1328,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777483,"byte_end":8777486,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/       // Get a data record.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777487,"byte_end":8777518,"line_start":1330,"line_end":1330,"column_start":1,"column_end":32}},{"value":"/       rpc GetData(GetDataRequest) returns (Data) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777519,"byte_end":8777573,"line_start":1331,"line_end":1331,"column_start":1,"column_end":55}},{"value":"/         option (google.api.http).get = \"/v2/{resource=**}\";","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777574,"byte_end":8777637,"line_start":1332,"line_end":1332,"column_start":1,"column_end":64}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777638,"byte_end":8777649,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777650,"byte_end":8777659,"line_start":1334,"line_end":1334,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777660,"byte_end":8777663,"line_start":1335,"line_end":1335,"column_start":1,"column_end":4}},{"value":"/ Example of a mixin configuration:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777664,"byte_end":8777701,"line_start":1336,"line_end":1336,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777702,"byte_end":8777705,"line_start":1337,"line_end":1337,"column_start":1,"column_end":4}},{"value":"/     apis:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777706,"byte_end":8777719,"line_start":1338,"line_end":1338,"column_start":1,"column_end":14}},{"value":"/     - name: google.storage.v2.Storage","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777720,"byte_end":8777761,"line_start":1339,"line_end":1339,"column_start":1,"column_end":42}},{"value":"/       mixins:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777762,"byte_end":8777779,"line_start":1340,"line_end":1340,"column_start":1,"column_end":18}},{"value":"/       - name: google.acl.v1.AccessControl","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777780,"byte_end":8777825,"line_start":1341,"line_end":1341,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777826,"byte_end":8777829,"line_start":1342,"line_end":1342,"column_start":1,"column_end":4}},{"value":"/ The mixin construct implies that all methods in `AccessControl` are","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777830,"byte_end":8777901,"line_start":1343,"line_end":1343,"column_start":1,"column_end":72}},{"value":"/ also declared with same name and request/response types in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777902,"byte_end":8777964,"line_start":1344,"line_end":1344,"column_start":1,"column_end":63}},{"value":"/ `Storage`. A documentation generator or annotation processor will","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8777965,"byte_end":8778034,"line_start":1345,"line_end":1345,"column_start":1,"column_end":70}},{"value":"/ see the effective `Storage.GetAcl` method after inheriting","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778035,"byte_end":8778097,"line_start":1346,"line_end":1346,"column_start":1,"column_end":63}},{"value":"/ documentation and annotations as follows:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778098,"byte_end":8778143,"line_start":1347,"line_end":1347,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778144,"byte_end":8778147,"line_start":1348,"line_end":1348,"column_start":1,"column_end":4}},{"value":"/     service Storage {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778148,"byte_end":8778173,"line_start":1349,"line_end":1349,"column_start":1,"column_end":26}},{"value":"/       // Get the underlying ACL object.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778174,"byte_end":8778217,"line_start":1350,"line_end":1350,"column_start":1,"column_end":44}},{"value":"/       rpc GetAcl(GetAclRequest) returns (Acl) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778218,"byte_end":8778269,"line_start":1351,"line_end":1351,"column_start":1,"column_end":52}},{"value":"/         option (google.api.http).get = \"/v2/{resource=**}:getAcl\";","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778270,"byte_end":8778340,"line_start":1352,"line_end":1352,"column_start":1,"column_end":71}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778341,"byte_end":8778352,"line_start":1353,"line_end":1353,"column_start":1,"column_end":12}},{"value":"/       ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778353,"byte_end":8778366,"line_start":1354,"line_end":1354,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778367,"byte_end":8778376,"line_start":1355,"line_end":1355,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778377,"byte_end":8778380,"line_start":1356,"line_end":1356,"column_start":1,"column_end":4}},{"value":"/ Note how the version in the path pattern changed from `v1` to `v2`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778381,"byte_end":8778452,"line_start":1357,"line_end":1357,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778453,"byte_end":8778456,"line_start":1358,"line_end":1358,"column_start":1,"column_end":4}},{"value":"/ If the `root` field in the mixin is specified, it should be a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778457,"byte_end":8778522,"line_start":1359,"line_end":1359,"column_start":1,"column_end":66}},{"value":"/ relative path under which inherited HTTP paths are placed. Example:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778523,"byte_end":8778594,"line_start":1360,"line_end":1360,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778595,"byte_end":8778598,"line_start":1361,"line_end":1361,"column_start":1,"column_end":4}},{"value":"/     apis:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778599,"byte_end":8778612,"line_start":1362,"line_end":1362,"column_start":1,"column_end":14}},{"value":"/     - name: google.storage.v2.Storage","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778613,"byte_end":8778654,"line_start":1363,"line_end":1363,"column_start":1,"column_end":42}},{"value":"/       mixins:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778655,"byte_end":8778672,"line_start":1364,"line_end":1364,"column_start":1,"column_end":18}},{"value":"/       - name: google.acl.v1.AccessControl","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778673,"byte_end":8778718,"line_start":1365,"line_end":1365,"column_start":1,"column_end":46}},{"value":"/         root: acls","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778719,"byte_end":8778741,"line_start":1366,"line_end":1366,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778742,"byte_end":8778745,"line_start":1367,"line_end":1367,"column_start":1,"column_end":4}},{"value":"/ This implies the following inherited HTTP annotation:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778746,"byte_end":8778803,"line_start":1368,"line_end":1368,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778804,"byte_end":8778807,"line_start":1369,"line_end":1369,"column_start":1,"column_end":4}},{"value":"/     service Storage {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778808,"byte_end":8778833,"line_start":1370,"line_end":1370,"column_start":1,"column_end":26}},{"value":"/       // Get the underlying ACL object.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778834,"byte_end":8778877,"line_start":1371,"line_end":1371,"column_start":1,"column_end":44}},{"value":"/       rpc GetAcl(GetAclRequest) returns (Acl) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778878,"byte_end":8778929,"line_start":1372,"line_end":1372,"column_start":1,"column_end":52}},{"value":"/         option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\";","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8778930,"byte_end":8779005,"line_start":1373,"line_end":1373,"column_start":1,"column_end":76}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779006,"byte_end":8779017,"line_start":1374,"line_end":1374,"column_start":1,"column_end":12}},{"value":"/       ...","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779018,"byte_end":8779031,"line_start":1375,"line_end":1375,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779032,"byte_end":8779041,"line_start":1376,"line_end":1376,"column_start":1,"column_end":10}}]},{"kind":"Field","id":{"krate":0,"index":2605},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779214,"byte_end":8779218,"line_start":1381,"line_end":1381,"column_start":9,"column_end":13},"name":"name","qualname":"::Mixin::name","value":"prost::alloc::string::String","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" The fully qualified name of the interface which is included.\n","sig":null,"attributes":[{"value":"/ The fully qualified name of the interface which is included.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779111,"byte_end":8779175,"line_start":1379,"line_end":1379,"column_start":5,"column_end":69}},{"value":"prost(string, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779180,"byte_end":8779205,"line_start":1380,"line_end":1380,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2606},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779381,"byte_end":8779385,"line_start":1385,"line_end":1385,"column_start":9,"column_end":13},"name":"root","qualname":"::Mixin::root","value":"prost::alloc::string::String","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" If non-empty specifies a path under which inherited HTTP paths\n are rooted.\n","sig":null,"attributes":[{"value":"/ If non-empty specifies a path under which inherited HTTP paths","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779256,"byte_end":8779322,"line_start":1382,"line_end":1382,"column_start":5,"column_end":71}},{"value":"/ are rooted.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779327,"byte_end":8779342,"line_start":1383,"line_end":1383,"column_start":5,"column_end":20}},{"value":"prost(string, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779347,"byte_end":8779372,"line_start":1384,"line_end":1384,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2607},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781723,"byte_end":8781731,"line_start":1448,"line_end":1448,"column_start":12,"column_end":20},"name":"Duration","qualname":"::Duration","value":"Duration { seconds, nanos }","parent":null,"children":[{"krate":0,"index":2632},{"krate":0,"index":2633}],"decl_id":null,"docs":" A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.","sig":null,"attributes":[{"value":"/ A Duration represents a signed, fixed-length span of time represented","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779421,"byte_end":8779494,"line_start":1387,"line_end":1387,"column_start":1,"column_end":74}},{"value":"/ as a count of seconds and fractions of seconds at nanosecond","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779495,"byte_end":8779559,"line_start":1388,"line_end":1388,"column_start":1,"column_end":65}},{"value":"/ resolution. It is independent of any calendar and concepts like \"day\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779560,"byte_end":8779633,"line_start":1389,"line_end":1389,"column_start":1,"column_end":74}},{"value":"/ or \"month\". It is related to Timestamp in that the difference between","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779634,"byte_end":8779707,"line_start":1390,"line_end":1390,"column_start":1,"column_end":74}},{"value":"/ two Timestamp values is a Duration and it can be added or subtracted","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779708,"byte_end":8779780,"line_start":1391,"line_end":1391,"column_start":1,"column_end":73}},{"value":"/ from a Timestamp. Range is approximately +-10,000 years.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779781,"byte_end":8779841,"line_start":1392,"line_end":1392,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779842,"byte_end":8779845,"line_start":1393,"line_end":1393,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779846,"byte_end":8779860,"line_start":1394,"line_end":1394,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779861,"byte_end":8779864,"line_start":1395,"line_end":1395,"column_start":1,"column_end":4}},{"value":"/ Example 1: Compute Duration from two Timestamps in pseudo code.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779865,"byte_end":8779932,"line_start":1396,"line_end":1396,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779933,"byte_end":8779936,"line_start":1397,"line_end":1397,"column_start":1,"column_end":4}},{"value":"/     Timestamp start = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779937,"byte_end":8779967,"line_start":1398,"line_end":1398,"column_start":1,"column_end":31}},{"value":"/     Timestamp end = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779968,"byte_end":8779996,"line_start":1399,"line_end":1399,"column_start":1,"column_end":29}},{"value":"/     Duration duration = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8779997,"byte_end":8780029,"line_start":1400,"line_end":1400,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780030,"byte_end":8780033,"line_start":1401,"line_end":1401,"column_start":1,"column_end":4}},{"value":"/     duration.seconds = end.seconds - start.seconds;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780034,"byte_end":8780089,"line_start":1402,"line_end":1402,"column_start":1,"column_end":56}},{"value":"/     duration.nanos = end.nanos - start.nanos;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780090,"byte_end":8780139,"line_start":1403,"line_end":1403,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780140,"byte_end":8780143,"line_start":1404,"line_end":1404,"column_start":1,"column_end":4}},{"value":"/     if (duration.seconds < 0 && duration.nanos > 0) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780144,"byte_end":8780201,"line_start":1405,"line_end":1405,"column_start":1,"column_end":58}},{"value":"/       duration.seconds += 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780202,"byte_end":8780234,"line_start":1406,"line_end":1406,"column_start":1,"column_end":33}},{"value":"/       duration.nanos -= 1000000000;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780235,"byte_end":8780274,"line_start":1407,"line_end":1407,"column_start":1,"column_end":40}},{"value":"/     } else if (duration.seconds > 0 && duration.nanos < 0) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780275,"byte_end":8780339,"line_start":1408,"line_end":1408,"column_start":1,"column_end":65}},{"value":"/       duration.seconds -= 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780340,"byte_end":8780372,"line_start":1409,"line_end":1409,"column_start":1,"column_end":33}},{"value":"/       duration.nanos += 1000000000;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780373,"byte_end":8780412,"line_start":1410,"line_end":1410,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780413,"byte_end":8780422,"line_start":1411,"line_end":1411,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780423,"byte_end":8780426,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780427,"byte_end":8780501,"line_start":1413,"line_end":1413,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780502,"byte_end":8780505,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/     Timestamp start = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780506,"byte_end":8780536,"line_start":1415,"line_end":1415,"column_start":1,"column_end":31}},{"value":"/     Duration duration = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780537,"byte_end":8780569,"line_start":1416,"line_end":1416,"column_start":1,"column_end":33}},{"value":"/     Timestamp end = ...;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780570,"byte_end":8780598,"line_start":1417,"line_end":1417,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780599,"byte_end":8780602,"line_start":1418,"line_end":1418,"column_start":1,"column_end":4}},{"value":"/     end.seconds = start.seconds + duration.seconds;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780603,"byte_end":8780658,"line_start":1419,"line_end":1419,"column_start":1,"column_end":56}},{"value":"/     end.nanos = start.nanos + duration.nanos;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780659,"byte_end":8780708,"line_start":1420,"line_end":1420,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780709,"byte_end":8780712,"line_start":1421,"line_end":1421,"column_start":1,"column_end":4}},{"value":"/     if (end.nanos < 0) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780713,"byte_end":8780741,"line_start":1422,"line_end":1422,"column_start":1,"column_end":29}},{"value":"/       end.seconds -= 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780742,"byte_end":8780769,"line_start":1423,"line_end":1423,"column_start":1,"column_end":28}},{"value":"/       end.nanos += 1000000000;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780770,"byte_end":8780804,"line_start":1424,"line_end":1424,"column_start":1,"column_end":35}},{"value":"/     } else if (end.nanos >= 1000000000) {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780805,"byte_end":8780850,"line_start":1425,"line_end":1425,"column_start":1,"column_end":46}},{"value":"/       end.seconds += 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780851,"byte_end":8780878,"line_start":1426,"line_end":1426,"column_start":1,"column_end":28}},{"value":"/       end.nanos -= 1000000000;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780879,"byte_end":8780913,"line_start":1427,"line_end":1427,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780914,"byte_end":8780923,"line_start":1428,"line_end":1428,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780924,"byte_end":8780927,"line_start":1429,"line_end":1429,"column_start":1,"column_end":4}},{"value":"/ Example 3: Compute Duration from datetime.timedelta in Python.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780928,"byte_end":8780994,"line_start":1430,"line_end":1430,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780995,"byte_end":8780998,"line_start":1431,"line_end":1431,"column_start":1,"column_end":4}},{"value":"/     td = datetime.timedelta(days=3, minutes=10)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8780999,"byte_end":8781050,"line_start":1432,"line_end":1432,"column_start":1,"column_end":52}},{"value":"/     duration = Duration()","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781051,"byte_end":8781080,"line_start":1433,"line_end":1433,"column_start":1,"column_end":30}},{"value":"/     duration.FromTimedelta(td)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781081,"byte_end":8781115,"line_start":1434,"line_end":1434,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781116,"byte_end":8781119,"line_start":1435,"line_end":1435,"column_start":1,"column_end":4}},{"value":"/ # JSON Mapping","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781120,"byte_end":8781138,"line_start":1436,"line_end":1436,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781139,"byte_end":8781142,"line_start":1437,"line_end":1437,"column_start":1,"column_end":4}},{"value":"/ In JSON format, the Duration type is encoded as a string rather than an","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781143,"byte_end":8781218,"line_start":1438,"line_end":1438,"column_start":1,"column_end":76}},{"value":"/ object, where the string ends in the suffix \"s\" (indicating seconds) and","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781219,"byte_end":8781295,"line_start":1439,"line_end":1439,"column_start":1,"column_end":77}},{"value":"/ is preceded by the number of seconds, with nanoseconds expressed as","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781296,"byte_end":8781367,"line_start":1440,"line_end":1440,"column_start":1,"column_end":72}},{"value":"/ fractional seconds. For example, 3 seconds with 0 nanoseconds should be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781368,"byte_end":8781443,"line_start":1441,"line_end":1441,"column_start":1,"column_end":76}},{"value":"/ encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781444,"byte_end":8781519,"line_start":1442,"line_end":1442,"column_start":1,"column_end":76}},{"value":"/ be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781520,"byte_end":8781590,"line_start":1443,"line_end":1443,"column_start":1,"column_end":71}},{"value":"/ microsecond should be expressed in JSON format as \"3.000001s\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781591,"byte_end":8781657,"line_start":1444,"line_end":1444,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781658,"byte_end":8781661,"line_start":1445,"line_end":1445,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781662,"byte_end":8781665,"line_start":1446,"line_end":1446,"column_start":1,"column_end":4}}]},{"kind":"Field","id":{"krate":0,"index":2632},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781998,"byte_end":8782005,"line_start":1453,"line_end":1453,"column_start":9,"column_end":16},"name":"seconds","qualname":"::Duration::seconds","value":"i64","parent":{"krate":0,"index":2607},"children":[],"decl_id":null,"docs":" Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n","sig":null,"attributes":[{"value":"/ Signed seconds of the span of time. Must be from -315,576,000,000","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781738,"byte_end":8781807,"line_start":1449,"line_end":1449,"column_start":5,"column_end":74}},{"value":"/ to +315,576,000,000 inclusive. Note: these bounds are computed from:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781812,"byte_end":8781884,"line_start":1450,"line_end":1450,"column_start":5,"column_end":77}},{"value":"/ 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781889,"byte_end":8781960,"line_start":1451,"line_end":1451,"column_start":5,"column_end":76}},{"value":"prost(int64, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8781965,"byte_end":8781989,"line_start":1452,"line_end":1452,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2633},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782464,"byte_end":8782469,"line_start":1461,"line_end":1461,"column_start":9,"column_end":14},"name":"nanos","qualname":"::Duration::nanos","value":"i32","parent":{"krate":0,"index":2607},"children":[],"decl_id":null,"docs":" Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive.\n","sig":null,"attributes":[{"value":"/ Signed fractions of a second at nanosecond resolution of the span","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782016,"byte_end":8782085,"line_start":1454,"line_end":1454,"column_start":5,"column_end":74}},{"value":"/ of time. Durations less than one second are represented with a 0","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782090,"byte_end":8782158,"line_start":1455,"line_end":1455,"column_start":5,"column_end":73}},{"value":"/ `seconds` field and a positive or negative `nanos` field. For durations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782163,"byte_end":8782238,"line_start":1456,"line_end":1456,"column_start":5,"column_end":80}},{"value":"/ of one second or more, a non-zero value for the `nanos` field must be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782243,"byte_end":8782316,"line_start":1457,"line_end":1457,"column_start":5,"column_end":78}},{"value":"/ of the same sign as the `seconds` field. Must be from -999,999,999","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782321,"byte_end":8782391,"line_start":1458,"line_end":1458,"column_start":5,"column_end":75}},{"value":"/ to +999,999,999 inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782396,"byte_end":8782426,"line_start":1459,"line_end":1459,"column_start":5,"column_end":35}},{"value":"prost(int32, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782431,"byte_end":8782455,"line_start":1460,"line_end":1460,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2634},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788799,"byte_end":8788808,"line_start":1663,"line_end":1663,"column_start":12,"column_end":21},"name":"FieldMask","qualname":"::FieldMask","value":"FieldMask { paths }","parent":null,"children":[{"krate":0,"index":2663}],"decl_id":null,"docs":" `FieldMask` represents a set of symbolic field paths, for example:","sig":null,"attributes":[{"value":"/ `FieldMask` represents a set of symbolic field paths, for example:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782478,"byte_end":8782548,"line_start":1463,"line_end":1463,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782549,"byte_end":8782552,"line_start":1464,"line_end":1464,"column_start":1,"column_end":4}},{"value":"/     paths: \"f.a\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782553,"byte_end":8782573,"line_start":1465,"line_end":1465,"column_start":1,"column_end":21}},{"value":"/     paths: \"f.b.d\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782574,"byte_end":8782596,"line_start":1466,"line_end":1466,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782597,"byte_end":8782600,"line_start":1467,"line_end":1467,"column_start":1,"column_end":4}},{"value":"/ Here `f` represents a field in some root message, `a` and `b`","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782601,"byte_end":8782666,"line_start":1468,"line_end":1468,"column_start":1,"column_end":66}},{"value":"/ fields in the message found in `f`, and `d` a field found in the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782667,"byte_end":8782735,"line_start":1469,"line_end":1469,"column_start":1,"column_end":69}},{"value":"/ message in `f.b`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782736,"byte_end":8782757,"line_start":1470,"line_end":1470,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782758,"byte_end":8782761,"line_start":1471,"line_end":1471,"column_start":1,"column_end":4}},{"value":"/ Field masks are used to specify a subset of fields that should be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782762,"byte_end":8782831,"line_start":1472,"line_end":1472,"column_start":1,"column_end":70}},{"value":"/ returned by a get operation or modified by an update operation.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782832,"byte_end":8782899,"line_start":1473,"line_end":1473,"column_start":1,"column_end":68}},{"value":"/ Field masks also have a custom JSON encoding (see below).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782900,"byte_end":8782961,"line_start":1474,"line_end":1474,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782962,"byte_end":8782965,"line_start":1475,"line_end":1475,"column_start":1,"column_end":4}},{"value":"/ # Field Masks in Projections","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782966,"byte_end":8782998,"line_start":1476,"line_end":1476,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8782999,"byte_end":8783002,"line_start":1477,"line_end":1477,"column_start":1,"column_end":4}},{"value":"/ When used in the context of a projection, a response message or","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783003,"byte_end":8783070,"line_start":1478,"line_end":1478,"column_start":1,"column_end":68}},{"value":"/ sub-message is filtered by the API to only contain those fields as","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783071,"byte_end":8783141,"line_start":1479,"line_end":1479,"column_start":1,"column_end":71}},{"value":"/ specified in the mask. For example, if the mask in the previous","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783142,"byte_end":8783209,"line_start":1480,"line_end":1480,"column_start":1,"column_end":68}},{"value":"/ example is applied to a response message as follows:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783210,"byte_end":8783266,"line_start":1481,"line_end":1481,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783267,"byte_end":8783270,"line_start":1482,"line_end":1482,"column_start":1,"column_end":4}},{"value":"/     f {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783271,"byte_end":8783282,"line_start":1483,"line_end":1483,"column_start":1,"column_end":12}},{"value":"/       a : 22","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783283,"byte_end":8783299,"line_start":1484,"line_end":1484,"column_start":1,"column_end":17}},{"value":"/       b {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783300,"byte_end":8783313,"line_start":1485,"line_end":1485,"column_start":1,"column_end":14}},{"value":"/         d : 1","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783314,"byte_end":8783331,"line_start":1486,"line_end":1486,"column_start":1,"column_end":18}},{"value":"/         x : 2","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783332,"byte_end":8783349,"line_start":1487,"line_end":1487,"column_start":1,"column_end":18}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783350,"byte_end":8783361,"line_start":1488,"line_end":1488,"column_start":1,"column_end":12}},{"value":"/       y : 13","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783362,"byte_end":8783378,"line_start":1489,"line_end":1489,"column_start":1,"column_end":17}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783379,"byte_end":8783388,"line_start":1490,"line_end":1490,"column_start":1,"column_end":10}},{"value":"/     z: 8","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783389,"byte_end":8783401,"line_start":1491,"line_end":1491,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783402,"byte_end":8783405,"line_start":1492,"line_end":1492,"column_start":1,"column_end":4}},{"value":"/ The result will not contain specific values for fields x,y and z","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783406,"byte_end":8783474,"line_start":1493,"line_end":1493,"column_start":1,"column_end":69}},{"value":"/ (their value will be set to the default, and omitted in proto text","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783475,"byte_end":8783545,"line_start":1494,"line_end":1494,"column_start":1,"column_end":71}},{"value":"/ output):","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783546,"byte_end":8783558,"line_start":1495,"line_end":1495,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783559,"byte_end":8783562,"line_start":1496,"line_end":1496,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783563,"byte_end":8783566,"line_start":1497,"line_end":1497,"column_start":1,"column_end":4}},{"value":"/     f {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783567,"byte_end":8783578,"line_start":1498,"line_end":1498,"column_start":1,"column_end":12}},{"value":"/       a : 22","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783579,"byte_end":8783595,"line_start":1499,"line_end":1499,"column_start":1,"column_end":17}},{"value":"/       b {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783596,"byte_end":8783609,"line_start":1500,"line_end":1500,"column_start":1,"column_end":14}},{"value":"/         d : 1","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783610,"byte_end":8783627,"line_start":1501,"line_end":1501,"column_start":1,"column_end":18}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783628,"byte_end":8783639,"line_start":1502,"line_end":1502,"column_start":1,"column_end":12}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783640,"byte_end":8783649,"line_start":1503,"line_end":1503,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783650,"byte_end":8783653,"line_start":1504,"line_end":1504,"column_start":1,"column_end":4}},{"value":"/ A repeated field is not allowed except at the last position of a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783654,"byte_end":8783722,"line_start":1505,"line_end":1505,"column_start":1,"column_end":69}},{"value":"/ paths string.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783723,"byte_end":8783740,"line_start":1506,"line_end":1506,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783741,"byte_end":8783744,"line_start":1507,"line_end":1507,"column_start":1,"column_end":4}},{"value":"/ If a FieldMask object is not present in a get operation, the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783745,"byte_end":8783809,"line_start":1508,"line_end":1508,"column_start":1,"column_end":65}},{"value":"/ operation applies to all fields (as if a FieldMask of all fields","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783810,"byte_end":8783878,"line_start":1509,"line_end":1509,"column_start":1,"column_end":69}},{"value":"/ had been specified).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783879,"byte_end":8783903,"line_start":1510,"line_end":1510,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783904,"byte_end":8783907,"line_start":1511,"line_end":1511,"column_start":1,"column_end":4}},{"value":"/ Note that a field mask does not necessarily apply to the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783908,"byte_end":8783968,"line_start":1512,"line_end":1512,"column_start":1,"column_end":61}},{"value":"/ top-level response message. In case of a REST get operation, the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8783969,"byte_end":8784037,"line_start":1513,"line_end":1513,"column_start":1,"column_end":69}},{"value":"/ field mask applies directly to the response, but in case of a REST","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784038,"byte_end":8784108,"line_start":1514,"line_end":1514,"column_start":1,"column_end":71}},{"value":"/ list operation, the mask instead applies to each individual message","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784109,"byte_end":8784180,"line_start":1515,"line_end":1515,"column_start":1,"column_end":72}},{"value":"/ in the returned resource list. In case of a REST custom method,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784181,"byte_end":8784248,"line_start":1516,"line_end":1516,"column_start":1,"column_end":68}},{"value":"/ other definitions may be used. Where the mask applies will be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784249,"byte_end":8784314,"line_start":1517,"line_end":1517,"column_start":1,"column_end":66}},{"value":"/ clearly documented together with its declaration in the API.  In","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784315,"byte_end":8784383,"line_start":1518,"line_end":1518,"column_start":1,"column_end":69}},{"value":"/ any case, the effect on the returned resource/resources is required","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784384,"byte_end":8784455,"line_start":1519,"line_end":1519,"column_start":1,"column_end":72}},{"value":"/ behavior for APIs.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784456,"byte_end":8784478,"line_start":1520,"line_end":1520,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784479,"byte_end":8784482,"line_start":1521,"line_end":1521,"column_start":1,"column_end":4}},{"value":"/ # Field Masks in Update Operations","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784483,"byte_end":8784521,"line_start":1522,"line_end":1522,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784522,"byte_end":8784525,"line_start":1523,"line_end":1523,"column_start":1,"column_end":4}},{"value":"/ A field mask in update operations specifies which fields of the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784526,"byte_end":8784593,"line_start":1524,"line_end":1524,"column_start":1,"column_end":68}},{"value":"/ targeted resource are going to be updated. The API is required","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784594,"byte_end":8784660,"line_start":1525,"line_end":1525,"column_start":1,"column_end":67}},{"value":"/ to only change the values of the fields as specified in the mask","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784661,"byte_end":8784729,"line_start":1526,"line_end":1526,"column_start":1,"column_end":69}},{"value":"/ and leave the others untouched. If a resource is passed in to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784730,"byte_end":8784795,"line_start":1527,"line_end":1527,"column_start":1,"column_end":66}},{"value":"/ describe the updated values, the API ignores the values of all","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784796,"byte_end":8784862,"line_start":1528,"line_end":1528,"column_start":1,"column_end":67}},{"value":"/ fields not covered by the mask.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784863,"byte_end":8784898,"line_start":1529,"line_end":1529,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784899,"byte_end":8784902,"line_start":1530,"line_end":1530,"column_start":1,"column_end":4}},{"value":"/ If a repeated field is specified for an update operation, new values will","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784903,"byte_end":8784980,"line_start":1531,"line_end":1531,"column_start":1,"column_end":78}},{"value":"/ be appended to the existing repeated field in the target resource. Note that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8784981,"byte_end":8785061,"line_start":1532,"line_end":1532,"column_start":1,"column_end":81}},{"value":"/ a repeated field is only allowed in the last position of a `paths` string.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785062,"byte_end":8785140,"line_start":1533,"line_end":1533,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785141,"byte_end":8785144,"line_start":1534,"line_end":1534,"column_start":1,"column_end":4}},{"value":"/ If a sub-message is specified in the last position of the field mask for an","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785145,"byte_end":8785224,"line_start":1535,"line_end":1535,"column_start":1,"column_end":80}},{"value":"/ update operation, then new value will be merged into the existing sub-message","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785225,"byte_end":8785306,"line_start":1536,"line_end":1536,"column_start":1,"column_end":82}},{"value":"/ in the target resource.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785307,"byte_end":8785334,"line_start":1537,"line_end":1537,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785335,"byte_end":8785338,"line_start":1538,"line_end":1538,"column_start":1,"column_end":4}},{"value":"/ For example, given the target message:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785339,"byte_end":8785381,"line_start":1539,"line_end":1539,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785382,"byte_end":8785385,"line_start":1540,"line_end":1540,"column_start":1,"column_end":4}},{"value":"/     f {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785386,"byte_end":8785397,"line_start":1541,"line_end":1541,"column_start":1,"column_end":12}},{"value":"/       b {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785398,"byte_end":8785411,"line_start":1542,"line_end":1542,"column_start":1,"column_end":14}},{"value":"/         d: 1","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785412,"byte_end":8785428,"line_start":1543,"line_end":1543,"column_start":1,"column_end":17}},{"value":"/         x: 2","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785429,"byte_end":8785445,"line_start":1544,"line_end":1544,"column_start":1,"column_end":17}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785446,"byte_end":8785457,"line_start":1545,"line_end":1545,"column_start":1,"column_end":12}},{"value":"/       c: [1]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785458,"byte_end":8785474,"line_start":1546,"line_end":1546,"column_start":1,"column_end":17}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785475,"byte_end":8785484,"line_start":1547,"line_end":1547,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785485,"byte_end":8785488,"line_start":1548,"line_end":1548,"column_start":1,"column_end":4}},{"value":"/ And an update message:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785489,"byte_end":8785515,"line_start":1549,"line_end":1549,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785516,"byte_end":8785519,"line_start":1550,"line_end":1550,"column_start":1,"column_end":4}},{"value":"/     f {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785520,"byte_end":8785531,"line_start":1551,"line_end":1551,"column_start":1,"column_end":12}},{"value":"/       b {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785532,"byte_end":8785545,"line_start":1552,"line_end":1552,"column_start":1,"column_end":14}},{"value":"/         d: 10","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785546,"byte_end":8785563,"line_start":1553,"line_end":1553,"column_start":1,"column_end":18}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785564,"byte_end":8785575,"line_start":1554,"line_end":1554,"column_start":1,"column_end":12}},{"value":"/       c: [2]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785576,"byte_end":8785592,"line_start":1555,"line_end":1555,"column_start":1,"column_end":17}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785593,"byte_end":8785602,"line_start":1556,"line_end":1556,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785603,"byte_end":8785606,"line_start":1557,"line_end":1557,"column_start":1,"column_end":4}},{"value":"/ then if the field mask is:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785607,"byte_end":8785637,"line_start":1558,"line_end":1558,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785638,"byte_end":8785641,"line_start":1559,"line_end":1559,"column_start":1,"column_end":4}},{"value":"/  paths: [\"f.b\", \"f.c\"]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785642,"byte_end":8785668,"line_start":1560,"line_end":1560,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785669,"byte_end":8785672,"line_start":1561,"line_end":1561,"column_start":1,"column_end":4}},{"value":"/ then the result will be:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785673,"byte_end":8785701,"line_start":1562,"line_end":1562,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785702,"byte_end":8785705,"line_start":1563,"line_end":1563,"column_start":1,"column_end":4}},{"value":"/     f {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785706,"byte_end":8785717,"line_start":1564,"line_end":1564,"column_start":1,"column_end":12}},{"value":"/       b {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785718,"byte_end":8785731,"line_start":1565,"line_end":1565,"column_start":1,"column_end":14}},{"value":"/         d: 10","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785732,"byte_end":8785749,"line_start":1566,"line_end":1566,"column_start":1,"column_end":18}},{"value":"/         x: 2","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785750,"byte_end":8785766,"line_start":1567,"line_end":1567,"column_start":1,"column_end":17}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785767,"byte_end":8785778,"line_start":1568,"line_end":1568,"column_start":1,"column_end":12}},{"value":"/       c: [1, 2]","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785779,"byte_end":8785798,"line_start":1569,"line_end":1569,"column_start":1,"column_end":20}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785799,"byte_end":8785808,"line_start":1570,"line_end":1570,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785809,"byte_end":8785812,"line_start":1571,"line_end":1571,"column_start":1,"column_end":4}},{"value":"/ An implementation may provide options to override this default behavior for","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785813,"byte_end":8785892,"line_start":1572,"line_end":1572,"column_start":1,"column_end":80}},{"value":"/ repeated and message fields.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785893,"byte_end":8785925,"line_start":1573,"line_end":1573,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785926,"byte_end":8785929,"line_start":1574,"line_end":1574,"column_start":1,"column_end":4}},{"value":"/ In order to reset a field's value to the default, the field must","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785930,"byte_end":8785998,"line_start":1575,"line_end":1575,"column_start":1,"column_end":69}},{"value":"/ be in the mask and set to the default value in the provided resource.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8785999,"byte_end":8786072,"line_start":1576,"line_end":1576,"column_start":1,"column_end":74}},{"value":"/ Hence, in order to reset all fields of a resource, provide a default","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786073,"byte_end":8786145,"line_start":1577,"line_end":1577,"column_start":1,"column_end":73}},{"value":"/ instance of the resource and set all fields in the mask, or do","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786146,"byte_end":8786212,"line_start":1578,"line_end":1578,"column_start":1,"column_end":67}},{"value":"/ not provide a mask as described below.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786213,"byte_end":8786255,"line_start":1579,"line_end":1579,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786256,"byte_end":8786259,"line_start":1580,"line_end":1580,"column_start":1,"column_end":4}},{"value":"/ If a field mask is not present on update, the operation applies to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786260,"byte_end":8786330,"line_start":1581,"line_end":1581,"column_start":1,"column_end":71}},{"value":"/ all fields (as if a field mask of all fields has been specified).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786331,"byte_end":8786400,"line_start":1582,"line_end":1582,"column_start":1,"column_end":70}},{"value":"/ Note that in the presence of schema evolution, this may mean that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786401,"byte_end":8786470,"line_start":1583,"line_end":1583,"column_start":1,"column_end":70}},{"value":"/ fields the client does not know and has therefore not filled into","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786471,"byte_end":8786540,"line_start":1584,"line_end":1584,"column_start":1,"column_end":70}},{"value":"/ the request will be reset to their default. If this is unwanted","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786541,"byte_end":8786608,"line_start":1585,"line_end":1585,"column_start":1,"column_end":68}},{"value":"/ behavior, a specific service may require a client to always specify","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786609,"byte_end":8786680,"line_start":1586,"line_end":1586,"column_start":1,"column_end":72}},{"value":"/ a field mask, producing an error if not.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786681,"byte_end":8786725,"line_start":1587,"line_end":1587,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786726,"byte_end":8786729,"line_start":1588,"line_end":1588,"column_start":1,"column_end":4}},{"value":"/ As with get operations, the location of the resource which","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786730,"byte_end":8786792,"line_start":1589,"line_end":1589,"column_start":1,"column_end":63}},{"value":"/ describes the updated values in the request message depends on the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786793,"byte_end":8786863,"line_start":1590,"line_end":1590,"column_start":1,"column_end":71}},{"value":"/ operation kind. In any case, the effect of the field mask is","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786864,"byte_end":8786928,"line_start":1591,"line_end":1591,"column_start":1,"column_end":65}},{"value":"/ required to be honored by the API.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786929,"byte_end":8786967,"line_start":1592,"line_end":1592,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786968,"byte_end":8786971,"line_start":1593,"line_end":1593,"column_start":1,"column_end":4}},{"value":"/ ## Considerations for HTTP REST","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8786972,"byte_end":8787007,"line_start":1594,"line_end":1594,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787008,"byte_end":8787011,"line_start":1595,"line_end":1595,"column_start":1,"column_end":4}},{"value":"/ The HTTP kind of an update operation which uses a field mask must","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787012,"byte_end":8787081,"line_start":1596,"line_end":1596,"column_start":1,"column_end":70}},{"value":"/ be set to PATCH instead of PUT in order to satisfy HTTP semantics","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787082,"byte_end":8787151,"line_start":1597,"line_end":1597,"column_start":1,"column_end":70}},{"value":"/ (PUT must only be used for full updates).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787152,"byte_end":8787197,"line_start":1598,"line_end":1598,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787198,"byte_end":8787201,"line_start":1599,"line_end":1599,"column_start":1,"column_end":4}},{"value":"/ # JSON Encoding of Field Masks","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787202,"byte_end":8787236,"line_start":1600,"line_end":1600,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787237,"byte_end":8787240,"line_start":1601,"line_end":1601,"column_start":1,"column_end":4}},{"value":"/ In JSON, a field mask is encoded as a single string where paths are","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787241,"byte_end":8787312,"line_start":1602,"line_end":1602,"column_start":1,"column_end":72}},{"value":"/ separated by a comma. Fields name in each path are converted","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787313,"byte_end":8787377,"line_start":1603,"line_end":1603,"column_start":1,"column_end":65}},{"value":"/ to/from lower-camel naming conventions.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787378,"byte_end":8787421,"line_start":1604,"line_end":1604,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787422,"byte_end":8787425,"line_start":1605,"line_end":1605,"column_start":1,"column_end":4}},{"value":"/ As an example, consider the following message declarations:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787426,"byte_end":8787489,"line_start":1606,"line_end":1606,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787490,"byte_end":8787493,"line_start":1607,"line_end":1607,"column_start":1,"column_end":4}},{"value":"/     message Profile {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787494,"byte_end":8787519,"line_start":1608,"line_end":1608,"column_start":1,"column_end":26}},{"value":"/       User user = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787520,"byte_end":8787544,"line_start":1609,"line_end":1609,"column_start":1,"column_end":25}},{"value":"/       Photo photo = 2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787545,"byte_end":8787571,"line_start":1610,"line_end":1610,"column_start":1,"column_end":27}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787572,"byte_end":8787581,"line_start":1611,"line_end":1611,"column_start":1,"column_end":10}},{"value":"/     message User {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787582,"byte_end":8787604,"line_start":1612,"line_end":1612,"column_start":1,"column_end":23}},{"value":"/       string display_name = 1;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787605,"byte_end":8787639,"line_start":1613,"line_end":1613,"column_start":1,"column_end":35}},{"value":"/       string address = 2;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787640,"byte_end":8787669,"line_start":1614,"line_end":1614,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787670,"byte_end":8787679,"line_start":1615,"line_end":1615,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787680,"byte_end":8787683,"line_start":1616,"line_end":1616,"column_start":1,"column_end":4}},{"value":"/ In proto a field mask for `Profile` may look as such:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787684,"byte_end":8787741,"line_start":1617,"line_end":1617,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787742,"byte_end":8787745,"line_start":1618,"line_end":1618,"column_start":1,"column_end":4}},{"value":"/     mask {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787746,"byte_end":8787760,"line_start":1619,"line_end":1619,"column_start":1,"column_end":15}},{"value":"/       paths: \"user.display_name\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787761,"byte_end":8787797,"line_start":1620,"line_end":1620,"column_start":1,"column_end":37}},{"value":"/       paths: \"photo\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787798,"byte_end":8787822,"line_start":1621,"line_end":1621,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787823,"byte_end":8787832,"line_start":1622,"line_end":1622,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787833,"byte_end":8787836,"line_start":1623,"line_end":1623,"column_start":1,"column_end":4}},{"value":"/ In JSON, the same mask is represented as below:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787837,"byte_end":8787888,"line_start":1624,"line_end":1624,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787889,"byte_end":8787892,"line_start":1625,"line_end":1625,"column_start":1,"column_end":4}},{"value":"/     {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787893,"byte_end":8787902,"line_start":1626,"line_end":1626,"column_start":1,"column_end":10}},{"value":"/       mask: \"user.displayName,photo\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787903,"byte_end":8787943,"line_start":1627,"line_end":1627,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787944,"byte_end":8787953,"line_start":1628,"line_end":1628,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787954,"byte_end":8787957,"line_start":1629,"line_end":1629,"column_start":1,"column_end":4}},{"value":"/ # Field Masks and Oneof Fields","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787958,"byte_end":8787992,"line_start":1630,"line_end":1630,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787993,"byte_end":8787996,"line_start":1631,"line_end":1631,"column_start":1,"column_end":4}},{"value":"/ Field masks treat fields in oneofs just as regular fields. Consider the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8787997,"byte_end":8788072,"line_start":1632,"line_end":1632,"column_start":1,"column_end":76}},{"value":"/ following message:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788073,"byte_end":8788095,"line_start":1633,"line_end":1633,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788096,"byte_end":8788099,"line_start":1634,"line_end":1634,"column_start":1,"column_end":4}},{"value":"/     message SampleMessage {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788100,"byte_end":8788131,"line_start":1635,"line_end":1635,"column_start":1,"column_end":32}},{"value":"/       oneof test_oneof {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788132,"byte_end":8788160,"line_start":1636,"line_end":1636,"column_start":1,"column_end":29}},{"value":"/         string name = 4;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788161,"byte_end":8788189,"line_start":1637,"line_end":1637,"column_start":1,"column_end":29}},{"value":"/         SubMessage sub_message = 9;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788190,"byte_end":8788229,"line_start":1638,"line_end":1638,"column_start":1,"column_end":40}},{"value":"/       }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788230,"byte_end":8788241,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788242,"byte_end":8788251,"line_start":1640,"line_end":1640,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788252,"byte_end":8788255,"line_start":1641,"line_end":1641,"column_start":1,"column_end":4}},{"value":"/ The field mask can be:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788256,"byte_end":8788282,"line_start":1642,"line_end":1642,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788283,"byte_end":8788286,"line_start":1643,"line_end":1643,"column_start":1,"column_end":4}},{"value":"/     mask {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788287,"byte_end":8788301,"line_start":1644,"line_end":1644,"column_start":1,"column_end":15}},{"value":"/       paths: \"name\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788302,"byte_end":8788325,"line_start":1645,"line_end":1645,"column_start":1,"column_end":24}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788326,"byte_end":8788335,"line_start":1646,"line_end":1646,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788336,"byte_end":8788339,"line_start":1647,"line_end":1647,"column_start":1,"column_end":4}},{"value":"/ Or:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788340,"byte_end":8788347,"line_start":1648,"line_end":1648,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788348,"byte_end":8788351,"line_start":1649,"line_end":1649,"column_start":1,"column_end":4}},{"value":"/     mask {","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788352,"byte_end":8788366,"line_start":1650,"line_end":1650,"column_start":1,"column_end":15}},{"value":"/       paths: \"sub_message\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788367,"byte_end":8788397,"line_start":1651,"line_end":1651,"column_start":1,"column_end":31}},{"value":"/     }","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788398,"byte_end":8788407,"line_start":1652,"line_end":1652,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788408,"byte_end":8788411,"line_start":1653,"line_end":1653,"column_start":1,"column_end":4}},{"value":"/ Note that oneof type names (\"test_oneof\" in this case) cannot be used in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788412,"byte_end":8788488,"line_start":1654,"line_end":1654,"column_start":1,"column_end":77}},{"value":"/ paths.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788489,"byte_end":8788499,"line_start":1655,"line_end":1655,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788500,"byte_end":8788503,"line_start":1656,"line_end":1656,"column_start":1,"column_end":4}},{"value":"/ ## Field Mask Verification","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788504,"byte_end":8788534,"line_start":1657,"line_end":1657,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788535,"byte_end":8788538,"line_start":1658,"line_end":1658,"column_start":1,"column_end":4}},{"value":"/ The implementation of any API method which has a FieldMask type field in the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788539,"byte_end":8788619,"line_start":1659,"line_end":1659,"column_start":1,"column_end":81}},{"value":"/ request should verify the included field paths, and return an","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788620,"byte_end":8788685,"line_start":1660,"line_end":1660,"column_start":1,"column_end":66}},{"value":"/ `INVALID_ARGUMENT` error if any path is unmappable.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788686,"byte_end":8788741,"line_start":1661,"line_end":1661,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2663},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788896,"byte_end":8788901,"line_start":1666,"line_end":1666,"column_start":9,"column_end":14},"name":"paths","qualname":"::FieldMask::paths","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":2634},"children":[],"decl_id":null,"docs":" The set of field mask paths.\n","sig":null,"attributes":[{"value":"/ The set of field mask paths.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788815,"byte_end":8788847,"line_start":1664,"line_end":1664,"column_start":5,"column_end":37}},{"value":"prost(string, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788852,"byte_end":8788887,"line_start":1665,"line_end":1665,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2664},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789466,"byte_end":8789472,"line_start":1677,"line_end":1677,"column_start":12,"column_end":18},"name":"Struct","qualname":"::Struct","value":"Struct { fields }","parent":null,"children":[{"krate":0,"index":2697}],"decl_id":null,"docs":" `Struct` represents a structured data value, consisting of fields\n which map to dynamically typed values. In some languages, `Struct`\n might be supported by a native representation. For example, in\n scripting languages like JS a struct is represented as an\n object. The details of that representation are described together\n with the proto support for the language.","sig":null,"attributes":[{"value":"/ `Struct` represents a structured data value, consisting of fields","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8788963,"byte_end":8789032,"line_start":1668,"line_end":1668,"column_start":1,"column_end":70}},{"value":"/ which map to dynamically typed values. In some languages, `Struct`","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789033,"byte_end":8789103,"line_start":1669,"line_end":1669,"column_start":1,"column_end":71}},{"value":"/ might be supported by a native representation. For example, in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789104,"byte_end":8789170,"line_start":1670,"line_end":1670,"column_start":1,"column_end":67}},{"value":"/ scripting languages like JS a struct is represented as an","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789171,"byte_end":8789232,"line_start":1671,"line_end":1671,"column_start":1,"column_end":62}},{"value":"/ object. The details of that representation are described together","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789233,"byte_end":8789302,"line_start":1672,"line_end":1672,"column_start":1,"column_end":70}},{"value":"/ with the proto support for the language.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789303,"byte_end":8789347,"line_start":1673,"line_end":1673,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789348,"byte_end":8789351,"line_start":1674,"line_end":1674,"column_start":1,"column_end":4}},{"value":"/ The JSON representation for `Struct` is JSON object.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789352,"byte_end":8789408,"line_start":1675,"line_end":1675,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":2697},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789585,"byte_end":8789591,"line_start":1680,"line_end":1680,"column_start":9,"column_end":15},"name":"fields","qualname":"::Struct::fields","value":"prost::alloc::collections::BTreeMap<prost::alloc::string::String, Value>","parent":{"krate":0,"index":2664},"children":[],"decl_id":null,"docs":" Unordered map of dynamically typed values.\n","sig":null,"attributes":[{"value":"/ Unordered map of dynamically typed values.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789479,"byte_end":8789525,"line_start":1678,"line_end":1678,"column_start":5,"column_end":51}},{"value":"prost(btree_map = \"string, message\", tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789530,"byte_end":8789576,"line_start":1679,"line_end":1679,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2698},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790058,"byte_end":8790063,"line_start":1689,"line_end":1689,"column_start":12,"column_end":17},"name":"Value","qualname":"::Value","value":"Value { kind }","parent":null,"children":[{"krate":0,"index":2718}],"decl_id":null,"docs":" `Value` represents a dynamically typed value which can be either\n null, a number, a string, a boolean, a recursive struct value, or a\n list of values. A producer of value is expected to set one of that\n variants, absence of any variant indicates an error.","sig":null,"attributes":[{"value":"/ `Value` represents a dynamically typed value which can be either","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789673,"byte_end":8789741,"line_start":1682,"line_end":1682,"column_start":1,"column_end":69}},{"value":"/ null, a number, a string, a boolean, a recursive struct value, or a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789742,"byte_end":8789813,"line_start":1683,"line_end":1683,"column_start":1,"column_end":72}},{"value":"/ list of values. A producer of value is expected to set one of that","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789814,"byte_end":8789884,"line_start":1684,"line_end":1684,"column_start":1,"column_end":71}},{"value":"/ variants, absence of any variant indicates an error.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789885,"byte_end":8789941,"line_start":1685,"line_end":1685,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789942,"byte_end":8789945,"line_start":1686,"line_end":1686,"column_start":1,"column_end":4}},{"value":"/ The JSON representation for `Value` is JSON value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8789946,"byte_end":8790000,"line_start":1687,"line_end":1687,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2718},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790160,"byte_end":8790164,"line_start":1692,"line_end":1692,"column_start":9,"column_end":13},"name":"kind","qualname":"::Value::kind","value":"core::option::Option<value::Kind>","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":" The kind of value.\n","sig":null,"attributes":[{"value":"/ The kind of value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790070,"byte_end":8790092,"line_start":1690,"line_end":1690,"column_start":5,"column_end":27}},{"value":"prost(oneof = \"value::Kind\", tags = \"1, 2, 3, 4, 5, 6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790097,"byte_end":8790151,"line_start":1691,"line_end":1691,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790259,"byte_end":8790264,"line_start":1695,"line_end":1695,"column_start":9,"column_end":14},"name":"value","qualname":"::value","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","parent":null,"children":[{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2726},{"krate":0,"index":2738}],"decl_id":null,"docs":" Nested message and enum types in `Value`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `Value`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790205,"byte_end":8790250,"line_start":1694,"line_end":1694,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2753},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790465,"byte_end":8790474,"line_start":1701,"line_end":1701,"column_start":9,"column_end":18},"name":"NullValue","qualname":"::value::Kind::NullValue","value":"Kind::NullValue(i32)","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":" Represents a null value.\n","sig":null,"attributes":[{"value":"/ Represents a null value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790370,"byte_end":8790398,"line_start":1699,"line_end":1699,"column_start":9,"column_end":37}},{"value":"prost(enumeration = \"super::NullValue\", tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790407,"byte_end":8790456,"line_start":1700,"line_end":1700,"column_start":9,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2756},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790562,"byte_end":8790573,"line_start":1704,"line_end":1704,"column_start":9,"column_end":20},"name":"NumberValue","qualname":"::value::Kind::NumberValue","value":"Kind::NumberValue(f64)","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":" Represents a double value.\n","sig":null,"attributes":[{"value":"/ Represents a double value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790489,"byte_end":8790519,"line_start":1702,"line_end":1702,"column_start":9,"column_end":39}},{"value":"prost(double, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790528,"byte_end":8790553,"line_start":1703,"line_end":1703,"column_start":9,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2759},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790661,"byte_end":8790672,"line_start":1707,"line_end":1707,"column_start":9,"column_end":20},"name":"StringValue","qualname":"::value::Kind::StringValue","value":"Kind::StringValue(::prost::alloc::string::String)","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":" Represents a string value.\n","sig":null,"attributes":[{"value":"/ Represents a string value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790588,"byte_end":8790618,"line_start":1705,"line_end":1705,"column_start":9,"column_end":39}},{"value":"prost(string, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790627,"byte_end":8790652,"line_start":1706,"line_end":1706,"column_start":9,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2762},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790786,"byte_end":8790795,"line_start":1710,"line_end":1710,"column_start":9,"column_end":18},"name":"BoolValue","qualname":"::value::Kind::BoolValue","value":"Kind::BoolValue(bool)","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":" Represents a boolean value.\n","sig":null,"attributes":[{"value":"/ Represents a boolean value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790714,"byte_end":8790745,"line_start":1708,"line_end":1708,"column_start":9,"column_end":40}},{"value":"prost(bool, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790754,"byte_end":8790777,"line_start":1709,"line_end":1709,"column_start":9,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2765},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790889,"byte_end":8790900,"line_start":1713,"line_end":1713,"column_start":9,"column_end":20},"name":"StructValue","qualname":"::value::Kind::StructValue","value":"Kind::StructValue(super::Struct)","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":" Represents a structured value.\n","sig":null,"attributes":[{"value":"/ Represents a structured value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790811,"byte_end":8790845,"line_start":1711,"line_end":1711,"column_start":9,"column_end":43}},{"value":"prost(message, tag = \"5\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790854,"byte_end":8790880,"line_start":1712,"line_end":1712,"column_start":9,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2768},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791003,"byte_end":8791012,"line_start":1716,"line_end":1716,"column_start":9,"column_end":18},"name":"ListValue","qualname":"::value::Kind::ListValue","value":"Kind::ListValue(super::ListValue)","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":" Represents a repeated `Value`.\n","sig":null,"attributes":[{"value":"/ Represents a repeated `Value`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790925,"byte_end":8790959,"line_start":1714,"line_end":1714,"column_start":9,"column_end":43}},{"value":"prost(message, tag = \"6\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790968,"byte_end":8790994,"line_start":1715,"line_end":1715,"column_start":9,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":2719},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790355,"byte_end":8790359,"line_start":1698,"line_end":1698,"column_start":14,"column_end":18},"name":"Kind","qualname":"::value::Kind","value":"pub enum Kind {\n    NullValue(i32),\n    NumberValue(f64),\n    StringValue(::prost::alloc::string::String),\n    BoolValue(bool),\n    StructValue(super::Struct),\n    ListValue(super::ListValue),\n}","parent":null,"children":[{"krate":0,"index":2753},{"krate":0,"index":2756},{"krate":0,"index":2759},{"krate":0,"index":2762},{"krate":0,"index":2765},{"krate":0,"index":2768}],"decl_id":null,"docs":" The kind of value.\n","sig":null,"attributes":[{"value":"/ The kind of value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8790271,"byte_end":8790293,"line_start":1696,"line_end":1696,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2771},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791224,"byte_end":8791233,"line_start":1723,"line_end":1723,"column_start":12,"column_end":21},"name":"ListValue","qualname":"::ListValue","value":"ListValue { values }","parent":null,"children":[{"krate":0,"index":2791}],"decl_id":null,"docs":" `ListValue` is a wrapper around a repeated field of values.","sig":null,"attributes":[{"value":"/ `ListValue` is a wrapper around a repeated field of values.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791040,"byte_end":8791103,"line_start":1719,"line_end":1719,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791104,"byte_end":8791107,"line_start":1720,"line_end":1720,"column_start":1,"column_end":4}},{"value":"/ The JSON representation for `ListValue` is JSON array.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791108,"byte_end":8791166,"line_start":1721,"line_end":1721,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2791},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791337,"byte_end":8791343,"line_start":1726,"line_end":1726,"column_start":9,"column_end":15},"name":"values","qualname":"::ListValue::values","value":"prost::alloc::vec::Vec<Value>","parent":{"krate":0,"index":2771},"children":[],"decl_id":null,"docs":" Repeated field of dynamically typed values.\n","sig":null,"attributes":[{"value":"/ Repeated field of dynamically typed values.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791240,"byte_end":8791287,"line_start":1724,"line_end":1724,"column_start":5,"column_end":52}},{"value":"prost(message, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791292,"byte_end":8791328,"line_start":1725,"line_end":1725,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2793},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791696,"byte_end":8791705,"line_start":1736,"line_end":1736,"column_start":5,"column_end":14},"name":"NullValue","qualname":"::NullValue::NullValue","value":"NullValue::NullValue","parent":{"krate":0,"index":2792},"children":[],"decl_id":null,"docs":" Null value.\n","sig":null,"attributes":[{"value":"/ Null value.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791676,"byte_end":8791691,"line_start":1735,"line_end":1735,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":2792},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791660,"byte_end":8791669,"line_start":1734,"line_end":1734,"column_start":10,"column_end":19},"name":"NullValue","qualname":"::NullValue","value":"pub enum NullValue { NullValue = , }","parent":null,"children":[{"krate":0,"index":2793}],"decl_id":null,"docs":" `NullValue` is a singleton enumeration to represent the null value for the\n `Value` type union.","sig":null,"attributes":[{"value":"/ `NullValue` is a singleton enumeration to represent the null value for the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791380,"byte_end":8791458,"line_start":1728,"line_end":1728,"column_start":1,"column_end":79}},{"value":"/ `Value` type union.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791459,"byte_end":8791482,"line_start":1729,"line_end":1729,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791483,"byte_end":8791486,"line_start":1730,"line_end":1730,"column_start":1,"column_end":4}},{"value":"/  The JSON representation for `NullValue` is JSON `null`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791487,"byte_end":8791547,"line_start":1731,"line_end":1731,"column_start":1,"column_end":61}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791638,"byte_end":8791650,"line_start":1733,"line_end":1733,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":2821},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795840,"byte_end":8795849,"line_start":1832,"line_end":1832,"column_start":12,"column_end":21},"name":"Timestamp","qualname":"::Timestamp","value":"Timestamp { seconds, nanos }","parent":null,"children":[{"krate":0,"index":2846},{"krate":0,"index":2847}],"decl_id":null,"docs":" A Timestamp represents a point in time independent of any time zone or local\n calendar, encoded as a count of seconds and fractions of seconds at\n nanosecond resolution. The count is relative to an epoch at UTC midnight on\n January 1, 1970, in the proleptic Gregorian calendar which extends the\n Gregorian calendar backwards to year one.","sig":null,"attributes":[{"value":"/ A Timestamp represents a point in time independent of any time zone or local","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791713,"byte_end":8791793,"line_start":1738,"line_end":1738,"column_start":1,"column_end":81}},{"value":"/ calendar, encoded as a count of seconds and fractions of seconds at","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791794,"byte_end":8791865,"line_start":1739,"line_end":1739,"column_start":1,"column_end":72}},{"value":"/ nanosecond resolution. The count is relative to an epoch at UTC midnight on","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791866,"byte_end":8791945,"line_start":1740,"line_end":1740,"column_start":1,"column_end":80}},{"value":"/ January 1, 1970, in the proleptic Gregorian calendar which extends the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8791946,"byte_end":8792020,"line_start":1741,"line_end":1741,"column_start":1,"column_end":75}},{"value":"/ Gregorian calendar backwards to year one.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792021,"byte_end":8792066,"line_start":1742,"line_end":1742,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792067,"byte_end":8792070,"line_start":1743,"line_end":1743,"column_start":1,"column_end":4}},{"value":"/ All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792071,"byte_end":8792150,"line_start":1744,"line_end":1744,"column_start":1,"column_end":80}},{"value":"/ second table is needed for interpretation, using a [24-hour linear","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792151,"byte_end":8792221,"line_start":1745,"line_end":1745,"column_start":1,"column_end":71}},{"value":"/ smear](https://developers.google.com/time/smear).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792222,"byte_end":8792275,"line_start":1746,"line_end":1746,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792276,"byte_end":8792279,"line_start":1747,"line_end":1747,"column_start":1,"column_end":4}},{"value":"/ The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792280,"byte_end":8792360,"line_start":1748,"line_end":1748,"column_start":1,"column_end":81}},{"value":"/ restricting to that range, we ensure that we can convert to and from [RFC","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792361,"byte_end":8792438,"line_start":1749,"line_end":1749,"column_start":1,"column_end":78}},{"value":"/ 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792439,"byte_end":8792500,"line_start":1750,"line_end":1750,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792501,"byte_end":8792504,"line_start":1751,"line_end":1751,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792505,"byte_end":8792519,"line_start":1752,"line_end":1752,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792520,"byte_end":8792523,"line_start":1753,"line_end":1753,"column_start":1,"column_end":4}},{"value":"/ Example 1: Compute Timestamp from POSIX `time()`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792524,"byte_end":8792577,"line_start":1754,"line_end":1754,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792578,"byte_end":8792581,"line_start":1755,"line_end":1755,"column_start":1,"column_end":4}},{"value":"/     Timestamp timestamp;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792582,"byte_end":8792610,"line_start":1756,"line_end":1756,"column_start":1,"column_end":29}},{"value":"/     timestamp.set_seconds(time(NULL));","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792611,"byte_end":8792653,"line_start":1757,"line_end":1757,"column_start":1,"column_end":43}},{"value":"/     timestamp.set_nanos(0);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792654,"byte_end":8792685,"line_start":1758,"line_end":1758,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792686,"byte_end":8792689,"line_start":1759,"line_end":1759,"column_start":1,"column_end":4}},{"value":"/ Example 2: Compute Timestamp from POSIX `gettimeofday()`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792690,"byte_end":8792751,"line_start":1760,"line_end":1760,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792752,"byte_end":8792755,"line_start":1761,"line_end":1761,"column_start":1,"column_end":4}},{"value":"/     struct timeval tv;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792756,"byte_end":8792782,"line_start":1762,"line_end":1762,"column_start":1,"column_end":27}},{"value":"/     gettimeofday(&tv, NULL);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792783,"byte_end":8792815,"line_start":1763,"line_end":1763,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792816,"byte_end":8792819,"line_start":1764,"line_end":1764,"column_start":1,"column_end":4}},{"value":"/     Timestamp timestamp;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792820,"byte_end":8792848,"line_start":1765,"line_end":1765,"column_start":1,"column_end":29}},{"value":"/     timestamp.set_seconds(tv.tv_sec);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792849,"byte_end":8792890,"line_start":1766,"line_end":1766,"column_start":1,"column_end":42}},{"value":"/     timestamp.set_nanos(tv.tv_usec * 1000);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792891,"byte_end":8792938,"line_start":1767,"line_end":1767,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792939,"byte_end":8792942,"line_start":1768,"line_end":1768,"column_start":1,"column_end":4}},{"value":"/ Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8792943,"byte_end":8793015,"line_start":1769,"line_end":1769,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793016,"byte_end":8793019,"line_start":1770,"line_end":1770,"column_start":1,"column_end":4}},{"value":"/     FILETIME ft;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793020,"byte_end":8793040,"line_start":1771,"line_end":1771,"column_start":1,"column_end":21}},{"value":"/     GetSystemTimeAsFileTime(&ft);","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793041,"byte_end":8793078,"line_start":1772,"line_end":1772,"column_start":1,"column_end":38}},{"value":"/     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793079,"byte_end":8793157,"line_start":1773,"line_end":1773,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793158,"byte_end":8793161,"line_start":1774,"line_end":1774,"column_start":1,"column_end":4}},{"value":"/     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793162,"byte_end":8793242,"line_start":1775,"line_end":1775,"column_start":1,"column_end":81}},{"value":"/     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793243,"byte_end":8793316,"line_start":1776,"line_end":1776,"column_start":1,"column_end":74}},{"value":"/     Timestamp timestamp;","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793317,"byte_end":8793345,"line_start":1777,"line_end":1777,"column_start":1,"column_end":29}},{"value":"/     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793346,"byte_end":8793422,"line_start":1778,"line_end":1778,"column_start":1,"column_end":77}},{"value":"/     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793423,"byte_end":8793487,"line_start":1779,"line_end":1779,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793488,"byte_end":8793491,"line_start":1780,"line_end":1780,"column_start":1,"column_end":4}},{"value":"/ Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793492,"byte_end":8793564,"line_start":1781,"line_end":1781,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793565,"byte_end":8793568,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/     long millis = System.currentTimeMillis();","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793569,"byte_end":8793618,"line_start":1783,"line_end":1783,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793619,"byte_end":8793622,"line_start":1784,"line_end":1784,"column_start":1,"column_end":4}},{"value":"/     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793623,"byte_end":8793701,"line_start":1785,"line_end":1785,"column_start":1,"column_end":79}},{"value":"/         .setNanos((int) ((millis % 1000) * 1000000)).build();","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793702,"byte_end":8793767,"line_start":1786,"line_end":1786,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793768,"byte_end":8793771,"line_start":1787,"line_end":1787,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793772,"byte_end":8793775,"line_start":1788,"line_end":1788,"column_start":1,"column_end":4}},{"value":"/ Example 5: Compute Timestamp from Java `Instant.now()`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793776,"byte_end":8793835,"line_start":1789,"line_end":1789,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793836,"byte_end":8793839,"line_start":1790,"line_end":1790,"column_start":1,"column_end":4}},{"value":"/     Instant now = Instant.now();","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793840,"byte_end":8793876,"line_start":1791,"line_end":1791,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793877,"byte_end":8793880,"line_start":1792,"line_end":1792,"column_start":1,"column_end":4}},{"value":"/     Timestamp timestamp =","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793881,"byte_end":8793910,"line_start":1793,"line_end":1793,"column_start":1,"column_end":30}},{"value":"/         Timestamp.newBuilder().setSeconds(now.getEpochSecond())","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793911,"byte_end":8793978,"line_start":1794,"line_end":1794,"column_start":1,"column_end":68}},{"value":"/             .setNanos(now.getNano()).build();","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8793979,"byte_end":8794028,"line_start":1795,"line_end":1795,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794029,"byte_end":8794032,"line_start":1796,"line_end":1796,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794033,"byte_end":8794036,"line_start":1797,"line_end":1797,"column_start":1,"column_end":4}},{"value":"/ Example 6: Compute Timestamp from current time in Python.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794037,"byte_end":8794098,"line_start":1798,"line_end":1798,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794099,"byte_end":8794102,"line_start":1799,"line_end":1799,"column_start":1,"column_end":4}},{"value":"/     timestamp = Timestamp()","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794103,"byte_end":8794134,"line_start":1800,"line_end":1800,"column_start":1,"column_end":32}},{"value":"/     timestamp.GetCurrentTime()","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794135,"byte_end":8794169,"line_start":1801,"line_end":1801,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794170,"byte_end":8794173,"line_start":1802,"line_end":1802,"column_start":1,"column_end":4}},{"value":"/ # JSON Mapping","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794174,"byte_end":8794192,"line_start":1803,"line_end":1803,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794193,"byte_end":8794196,"line_start":1804,"line_end":1804,"column_start":1,"column_end":4}},{"value":"/ In JSON format, the Timestamp type is encoded as a string in the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794197,"byte_end":8794265,"line_start":1805,"line_end":1805,"column_start":1,"column_end":69}},{"value":"/ [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794266,"byte_end":8794339,"line_start":1806,"line_end":1806,"column_start":1,"column_end":74}},{"value":"/ format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794340,"byte_end":8794409,"line_start":1807,"line_end":1807,"column_start":1,"column_end":70}},{"value":"/ where {year} is always expressed using four digits while {month}, {day},","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794410,"byte_end":8794486,"line_start":1808,"line_end":1808,"column_start":1,"column_end":77}},{"value":"/ {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794487,"byte_end":8794566,"line_start":1809,"line_end":1809,"column_start":1,"column_end":80}},{"value":"/ seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794567,"byte_end":8794645,"line_start":1810,"line_end":1810,"column_start":1,"column_end":79}},{"value":"/ are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794646,"byte_end":8794723,"line_start":1811,"line_end":1811,"column_start":1,"column_end":78}},{"value":"/ is required. A proto3 JSON serializer should always use UTC (as indicated by","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794724,"byte_end":8794804,"line_start":1812,"line_end":1812,"column_start":1,"column_end":81}},{"value":"/ \"Z\") when printing the Timestamp type and a proto3 JSON parser should be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794805,"byte_end":8794881,"line_start":1813,"line_end":1813,"column_start":1,"column_end":77}},{"value":"/ able to accept both UTC and other timezones (as indicated by an offset).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794882,"byte_end":8794958,"line_start":1814,"line_end":1814,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794959,"byte_end":8794962,"line_start":1815,"line_end":1815,"column_start":1,"column_end":4}},{"value":"/ For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8794963,"byte_end":8795032,"line_start":1816,"line_end":1816,"column_start":1,"column_end":70}},{"value":"/ 01:30 UTC on January 15, 2017.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795033,"byte_end":8795067,"line_start":1817,"line_end":1817,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795068,"byte_end":8795071,"line_start":1818,"line_end":1818,"column_start":1,"column_end":4}},{"value":"/ In JavaScript, one can convert a Date object to this format using the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795072,"byte_end":8795145,"line_start":1819,"line_end":1819,"column_start":1,"column_end":74}},{"value":"/ standard","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795146,"byte_end":8795158,"line_start":1820,"line_end":1820,"column_start":1,"column_end":13}},{"value":"/ [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795159,"byte_end":8795277,"line_start":1821,"line_end":1821,"column_start":1,"column_end":119}},{"value":"/ method. In Python, a standard `datetime.datetime` object can be converted","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795278,"byte_end":8795355,"line_start":1822,"line_end":1822,"column_start":1,"column_end":78}},{"value":"/ to this format using","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795356,"byte_end":8795380,"line_start":1823,"line_end":1823,"column_start":1,"column_end":25}},{"value":"/ [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795381,"byte_end":8795461,"line_start":1824,"line_end":1824,"column_start":1,"column_end":81}},{"value":"/ the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795462,"byte_end":8795542,"line_start":1825,"line_end":1825,"column_start":1,"column_end":81}},{"value":"/ the Joda Time's [`ISODateTimeFormat.dateTime()`](","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795543,"byte_end":8795596,"line_start":1826,"line_end":1826,"column_start":1,"column_end":54}},{"value":"/ http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795597,"byte_end":8795697,"line_start":1827,"line_end":1827,"column_start":1,"column_end":101}},{"value":"/ ) to obtain a formatter capable of generating timestamps in this format.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795698,"byte_end":8795774,"line_start":1828,"line_end":1828,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795775,"byte_end":8795778,"line_start":1829,"line_end":1829,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795779,"byte_end":8795782,"line_start":1830,"line_end":1830,"column_start":1,"column_end":4}}]},{"kind":"Field","id":{"krate":0,"index":2846},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796052,"byte_end":8796059,"line_start":1837,"line_end":1837,"column_start":9,"column_end":16},"name":"seconds","qualname":"::Timestamp::seconds","value":"i64","parent":{"krate":0,"index":2821},"children":[],"decl_id":null,"docs":" Represents seconds of UTC time since Unix epoch\n 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n 9999-12-31T23:59:59Z inclusive.\n","sig":null,"attributes":[{"value":"/ Represents seconds of UTC time since Unix epoch","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795856,"byte_end":8795907,"line_start":1833,"line_end":1833,"column_start":5,"column_end":56}},{"value":"/ 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795912,"byte_end":8795974,"line_start":1834,"line_end":1834,"column_start":5,"column_end":67}},{"value":"/ 9999-12-31T23:59:59Z inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8795979,"byte_end":8796014,"line_start":1835,"line_end":1835,"column_start":5,"column_end":40}},{"value":"prost(int64, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796019,"byte_end":8796043,"line_start":1836,"line_end":1836,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":2847},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796345,"byte_end":8796350,"line_start":1843,"line_end":1843,"column_start":9,"column_end":14},"name":"nanos","qualname":"::Timestamp::nanos","value":"i32","parent":{"krate":0,"index":2821},"children":[],"decl_id":null,"docs":" Non-negative fractions of a second at nanosecond resolution. Negative\n second values with fractions must still have non-negative nanos values\n that count forward in time. Must be from 0 to 999,999,999\n inclusive.\n","sig":null,"attributes":[{"value":"/ Non-negative fractions of a second at nanosecond resolution. Negative","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796070,"byte_end":8796143,"line_start":1838,"line_end":1838,"column_start":5,"column_end":78}},{"value":"/ second values with fractions must still have non-negative nanos values","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796148,"byte_end":8796222,"line_start":1839,"line_end":1839,"column_start":5,"column_end":79}},{"value":"/ that count forward in time. Must be from 0 to 999,999,999","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796227,"byte_end":8796288,"line_start":1840,"line_end":1840,"column_start":5,"column_end":66}},{"value":"/ inclusive.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796293,"byte_end":8796307,"line_start":1841,"line_end":1841,"column_start":5,"column_end":19}},{"value":"prost(int32, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/protobuf.rs","byte_start":8796312,"byte_end":8796336,"line_start":1842,"line_end":1842,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":585,"byte_end":593,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"compiler","qualname":"::compiler","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2849},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2872},{"krate":0,"index":2874},{"krate":0,"index":2912},{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2924},{"krate":0,"index":2925},{"krate":0,"index":2928},{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":2964},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":2977},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":3012},{"krate":0,"index":2848}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2849},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8885978,"byte_end":8885985,"line_start":3,"line_end":3,"column_start":12,"column_end":19},"name":"Version","qualname":"::compiler::Version","value":"Version { major, minor, patch, suffix }","parent":null,"children":[{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2919},{"krate":0,"index":2920}],"decl_id":null,"docs":" The version number of protocol compiler.\n","sig":null,"attributes":[{"value":"/ The version number of protocol compiler.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8885876,"byte_end":8885920,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2917},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886035,"byte_end":8886040,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"major","qualname":"::compiler::Version::major","value":"core::option::Option<i32>","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8885992,"byte_end":8886026,"line_start":4,"line_end":4,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2918},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886118,"byte_end":8886123,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"minor","qualname":"::compiler::Version::minor","value":"core::option::Option<i32>","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886075,"byte_end":8886109,"line_start":6,"line_end":6,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2919},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886201,"byte_end":8886206,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"patch","qualname":"::compiler::Version::patch","value":"core::option::Option<i32>","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(int32, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886158,"byte_end":8886192,"line_start":8,"line_end":8,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2920},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886414,"byte_end":8886420,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"suffix","qualname":"::compiler::Version::suffix","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":" A suffix for alpha, beta or rc release, e.g., \"alpha-1\", \"rc2\". It should\n be empty for mainline stable releases.\n","sig":null,"attributes":[{"value":"/ A suffix for alpha, beta or rc release, e.g., \"alpha-1\", \"rc2\". It should","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886241,"byte_end":8886318,"line_start":10,"line_end":10,"column_start":5,"column_end":82}},{"value":"/ be empty for mainline stable releases.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886323,"byte_end":8886365,"line_start":11,"line_end":11,"column_start":5,"column_end":47}},{"value":"prost(string, optional, tag = \"4\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886370,"byte_end":8886405,"line_start":12,"line_end":12,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2913},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886035,"byte_end":8886040,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"major","qualname":"<Version>::major","value":"pub fn major(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `major`, or the default value if `major` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2914},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886118,"byte_end":8886123,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"minor","qualname":"<Version>::minor","value":"pub fn minor(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `minor`, or the default value if `minor` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2915},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886201,"byte_end":8886206,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"patch","qualname":"<Version>::patch","value":"pub fn patch(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `patch`, or the default value if `patch` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2916},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886414,"byte_end":8886420,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"suffix","qualname":"<Version>::suffix","value":"pub fn suffix(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `suffix`, or the default value if `suffix` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2921},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886607,"byte_end":8886627,"line_start":17,"line_end":17,"column_start":12,"column_end":32},"name":"CodeGeneratorRequest","qualname":"::compiler::CodeGeneratorRequest","value":"CodeGeneratorRequest { file_to_generate, parameter, proto_file, compiler_version }","parent":null,"children":[{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969}],"decl_id":null,"docs":" An encoded CodeGeneratorRequest is written to the plugin's stdin.\n","sig":null,"attributes":[{"value":"/ An encoded CodeGeneratorRequest is written to the plugin's stdin.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886480,"byte_end":8886549,"line_start":15,"line_end":15,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":2966},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886894,"byte_end":8886910,"line_start":22,"line_end":22,"column_start":9,"column_end":25},"name":"file_to_generate","qualname":"::compiler::CodeGeneratorRequest::file_to_generate","value":"prost::alloc::vec::Vec<prost::alloc::string::String>","parent":{"krate":0,"index":2921},"children":[],"decl_id":null,"docs":" The .proto files that were explicitly listed on the command-line.  The\n code generator should generate code only for these files.  Each file's\n descriptor will be included in proto_file, below.\n","sig":null,"attributes":[{"value":"/ The .proto files that were explicitly listed on the command-line.  The","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886634,"byte_end":8886708,"line_start":18,"line_end":18,"column_start":5,"column_end":79}},{"value":"/ code generator should generate code only for these files.  Each file's","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886713,"byte_end":8886787,"line_start":19,"line_end":19,"column_start":5,"column_end":79}},{"value":"/ descriptor will be included in proto_file, below.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886792,"byte_end":8886845,"line_start":20,"line_end":20,"column_start":5,"column_end":58}},{"value":"prost(string, repeated, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886850,"byte_end":8886885,"line_start":21,"line_end":21,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2967},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887078,"byte_end":8887087,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"name":"parameter","qualname":"::compiler::CodeGeneratorRequest::parameter","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":2921},"children":[],"decl_id":null,"docs":" The generator parameter passed on the command-line.\n","sig":null,"attributes":[{"value":"/ The generator parameter passed on the command-line.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8886974,"byte_end":8887029,"line_start":23,"line_end":23,"column_start":5,"column_end":60}},{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887034,"byte_end":8887069,"line_start":24,"line_end":24,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2968},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888054,"byte_end":8888064,"line_start":41,"line_end":41,"column_start":9,"column_end":19},"name":"proto_file","qualname":"::compiler::CodeGeneratorRequest::proto_file","value":"prost::alloc::vec::Vec<FileDescriptorProto>","parent":{"krate":0,"index":2921},"children":[],"decl_id":null,"docs":" FileDescriptorProtos for all files in files_to_generate and everything\n they import.  The files will appear in topological order, so each file\n appears before any file that imports it.","sig":null,"attributes":[{"value":"/ FileDescriptorProtos for all files in files_to_generate and everything","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887149,"byte_end":8887223,"line_start":26,"line_end":26,"column_start":5,"column_end":79}},{"value":"/ they import.  The files will appear in topological order, so each file","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887228,"byte_end":8887302,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ appears before any file that imports it.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887307,"byte_end":8887351,"line_start":28,"line_end":28,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887356,"byte_end":8887359,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ protoc guarantees that all proto_files will be written after","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887364,"byte_end":8887428,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/ the fields above, even though this is not technically guaranteed by the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887433,"byte_end":8887508,"line_start":31,"line_end":31,"column_start":5,"column_end":80}},{"value":"/ protobuf wire format.  This theoretically could allow a plugin to stream","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887513,"byte_end":8887589,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ in the FileDescriptorProtos and handle them one by one rather than read","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887594,"byte_end":8887669,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ the entire set into memory at once.  However, as of this writing, this","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887674,"byte_end":8887748,"line_start":34,"line_end":34,"column_start":5,"column_end":79}},{"value":"/ is not similarly optimized on protoc's end -- it will store all fields in","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887753,"byte_end":8887830,"line_start":35,"line_end":35,"column_start":5,"column_end":82}},{"value":"/ memory at once before sending them to the plugin.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887835,"byte_end":8887888,"line_start":36,"line_end":36,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887893,"byte_end":8887896,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Type names of fields and extensions in the FileDescriptorProto are always","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887901,"byte_end":8887978,"line_start":38,"line_end":38,"column_start":5,"column_end":82}},{"value":"/ fully qualified.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887983,"byte_end":8888003,"line_start":39,"line_end":39,"column_start":5,"column_end":25}},{"value":"prost(message, repeated, tag = \"15\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888008,"byte_end":8888045,"line_start":40,"line_end":40,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":2969},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888218,"byte_end":8888234,"line_start":44,"line_end":44,"column_start":9,"column_end":25},"name":"compiler_version","qualname":"::compiler::CodeGeneratorRequest::compiler_version","value":"core::option::Option<compiler::Version>","parent":{"krate":0,"index":2921},"children":[],"decl_id":null,"docs":" The version number of protocol compiler.\n","sig":null,"attributes":[{"value":"/ The version number of protocol compiler.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888124,"byte_end":8888168,"line_start":42,"line_end":42,"column_start":5,"column_end":49}},{"value":"prost(message, optional, tag = \"3\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888173,"byte_end":8888209,"line_start":43,"line_end":43,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8887078,"byte_end":8887087,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"name":"parameter","qualname":"<CodeGeneratorRequest>::parameter","value":"pub fn parameter(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `parameter`, or the default value if `parameter` is unset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2970},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888394,"byte_end":8888415,"line_start":48,"line_end":48,"column_start":12,"column_end":33},"name":"CodeGeneratorResponse","qualname":"::compiler::CodeGeneratorResponse","value":"CodeGeneratorResponse { error, supported_features, file }","parent":null,"children":[{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3017}],"decl_id":null,"docs":" The plugin writes an encoded CodeGeneratorResponse to stdout.\n","sig":null,"attributes":[{"value":"/ The plugin writes an encoded CodeGeneratorResponse to stdout.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888271,"byte_end":8888336,"line_start":46,"line_end":46,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3015},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889001,"byte_end":8889006,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"error","qualname":"::compiler::CodeGeneratorResponse::error","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" Error message.  If non-empty, code generation failed.  The plugin process\n should exit with status code zero even if it reports an error in this way.","sig":null,"attributes":[{"value":"/ Error message.  If non-empty, code generation failed.  The plugin process","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888422,"byte_end":8888499,"line_start":49,"line_end":49,"column_start":5,"column_end":82}},{"value":"/ should exit with status code zero even if it reports an error in this way.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888504,"byte_end":8888582,"line_start":50,"line_end":50,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888587,"byte_end":8888590,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This should be used to indicate errors in .proto files which prevent the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888595,"byte_end":8888671,"line_start":52,"line_end":52,"column_start":5,"column_end":81}},{"value":"/ code generator from generating correct code.  Errors which indicate a","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888676,"byte_end":8888749,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ problem in protoc itself -- such as the input CodeGeneratorRequest being","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888754,"byte_end":8888830,"line_start":54,"line_end":54,"column_start":5,"column_end":81}},{"value":"/ unparseable -- should be reported by writing a message to stderr and","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888835,"byte_end":8888907,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ exiting with a non-zero status code.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888912,"byte_end":8888952,"line_start":56,"line_end":56,"column_start":5,"column_end":45}},{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8888957,"byte_end":8888992,"line_start":57,"line_end":57,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3016},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889250,"byte_end":8889268,"line_start":62,"line_end":62,"column_start":9,"column_end":27},"name":"supported_features","qualname":"::compiler::CodeGeneratorResponse::supported_features","value":"core::option::Option<u64>","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" A bitmask of supported features that the code generator supports.\n This is a bitwise \"or\" of values from the Feature enum.\n","sig":null,"attributes":[{"value":"/ A bitmask of supported features that the code generator supports.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889068,"byte_end":8889137,"line_start":59,"line_end":59,"column_start":5,"column_end":74}},{"value":"/ This is a bitwise \"or\" of values from the Feature enum.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889142,"byte_end":8889201,"line_start":60,"line_end":60,"column_start":5,"column_end":64}},{"value":"prost(uint64, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889206,"byte_end":8889241,"line_start":61,"line_end":61,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3017},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889349,"byte_end":8889353,"line_start":64,"line_end":64,"column_start":9,"column_end":13},"name":"file","qualname":"::compiler::CodeGeneratorResponse::file","value":"prost::alloc::vec::Vec<compiler::code_generator_response::File>","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"prost(message, repeated, tag = \"15\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889303,"byte_end":8889340,"line_start":63,"line_end":63,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3013},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889001,"byte_end":8889006,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"error","qualname":"<CodeGeneratorResponse>::error","value":"pub fn error(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `error`, or the default value if `error` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889250,"byte_end":8889268,"line_start":62,"line_end":62,"column_start":9,"column_end":27},"name":"supported_features","qualname":"<CodeGeneratorResponse>::supported_features","value":"pub fn supported_features(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `supported_features`, or the default value if `supported_features` is unset.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2848},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889484,"byte_end":8889507,"line_start":67,"line_end":67,"column_start":9,"column_end":32},"name":"code_generator_response","qualname":"::compiler::code_generator_response","value":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","parent":null,"children":[{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3025},{"krate":0,"index":3041},{"krate":0,"index":3043},{"krate":0,"index":3072},{"krate":0,"index":3080},{"krate":0,"index":3087},{"krate":0,"index":3089},{"krate":0,"index":3090},{"krate":0,"index":3092},{"krate":0,"index":3093},{"krate":0,"index":3095},{"krate":0,"index":3096},{"krate":0,"index":3098},{"krate":0,"index":3101},{"krate":0,"index":3103},{"krate":0,"index":3105},{"krate":0,"index":3108},{"krate":0,"index":3110}],"decl_id":null,"docs":" Nested message and enum types in `CodeGeneratorResponse`.\n","sig":null,"attributes":[{"value":"/ Nested message and enum types in `CodeGeneratorResponse`.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889414,"byte_end":8889475,"line_start":66,"line_end":66,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3018},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889619,"byte_end":8889623,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"name":"File","qualname":"::compiler::code_generator_response::File","value":"File { name, insertion_point, content, generated_code_info }","parent":null,"children":[{"krate":0,"index":3076},{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":3079}],"decl_id":null,"docs":" Represents a single generated file.\n","sig":null,"attributes":[{"value":"/ Represents a single generated file.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889514,"byte_end":8889553,"line_start":68,"line_end":68,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3076},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890472,"byte_end":8890476,"line_start":83,"line_end":83,"column_start":13,"column_end":17},"name":"name","qualname":"::compiler::code_generator_response::File::name","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":3018},"children":[],"decl_id":null,"docs":" The file name, relative to the output directory.  The name must not\n contain \".\" or \"..\" components and must be relative, not be absolute (so,\n the file cannot lie outside the output directory).  \"/\" must be used as\n the path separator, not \"\\\".","sig":null,"attributes":[{"value":"/ The file name, relative to the output directory.  The name must not","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889634,"byte_end":8889705,"line_start":71,"line_end":71,"column_start":9,"column_end":80}},{"value":"/ contain \".\" or \"..\" components and must be relative, not be absolute (so,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889714,"byte_end":8889791,"line_start":72,"line_end":72,"column_start":9,"column_end":86}},{"value":"/ the file cannot lie outside the output directory).  \"/\" must be used as","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889800,"byte_end":8889875,"line_start":73,"line_end":73,"column_start":9,"column_end":84}},{"value":"/ the path separator, not \"\\\".","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889884,"byte_end":8889916,"line_start":74,"line_end":74,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889925,"byte_end":8889928,"line_start":75,"line_end":75,"column_start":9,"column_end":12}},{"value":"/ If the name is omitted, the content will be appended to the previous","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8889937,"byte_end":8890009,"line_start":76,"line_end":76,"column_start":9,"column_end":81}},{"value":"/ file.  This allows the generator to break large files into small chunks,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890018,"byte_end":8890094,"line_start":77,"line_end":77,"column_start":9,"column_end":85}},{"value":"/ and allows the generated text to be streamed back to protoc so that large","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890103,"byte_end":8890180,"line_start":78,"line_end":78,"column_start":9,"column_end":86}},{"value":"/ files need not reside completely in memory at one time.  Note that as of","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890189,"byte_end":8890265,"line_start":79,"line_end":79,"column_start":9,"column_end":85}},{"value":"/ this writing protoc does not optimize for this -- it will read the entire","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890274,"byte_end":8890351,"line_start":80,"line_end":80,"column_start":9,"column_end":86}},{"value":"/ CodeGeneratorResponse before writing files to disk.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890360,"byte_end":8890415,"line_start":81,"line_end":81,"column_start":9,"column_end":64}},{"value":"prost(string, optional, tag = \"1\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890424,"byte_end":8890459,"line_start":82,"line_end":82,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3077},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893074,"byte_end":8893089,"line_start":122,"line_end":122,"column_start":13,"column_end":28},"name":"insertion_point","qualname":"::compiler::code_generator_response::File::insertion_point","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":3018},"children":[],"decl_id":null,"docs":" If non-empty, indicates that the named file should already exist, and the\n content here is to be inserted into that file at a defined insertion\n point.  This feature allows a code generator to extend the output\n produced by another code generator.  The original generator may provide\n insertion points by placing special annotations in the file that look\n like:\n   @@protoc_insertion_point(NAME)\n The annotation can have arbitrary text before and after it on the line,\n which allows it to be placed in a comment.  NAME should be replaced with\n an identifier naming the point -- this is what other generators will use\n as the insertion_point.  Code inserted at this point will be placed\n immediately above the line containing the insertion point (thus multiple\n insertions to the same point will come out in the order they were added).\n The double-@ is intended to make it unlikely that the generated code\n could contain things that look like insertion points by accident.","sig":null,"attributes":[{"value":"/ If non-empty, indicates that the named file should already exist, and the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890542,"byte_end":8890619,"line_start":84,"line_end":84,"column_start":9,"column_end":86}},{"value":"/ content here is to be inserted into that file at a defined insertion","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890628,"byte_end":8890700,"line_start":85,"line_end":85,"column_start":9,"column_end":81}},{"value":"/ point.  This feature allows a code generator to extend the output","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890709,"byte_end":8890778,"line_start":86,"line_end":86,"column_start":9,"column_end":78}},{"value":"/ produced by another code generator.  The original generator may provide","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890787,"byte_end":8890862,"line_start":87,"line_end":87,"column_start":9,"column_end":84}},{"value":"/ insertion points by placing special annotations in the file that look","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890871,"byte_end":8890944,"line_start":88,"line_end":88,"column_start":9,"column_end":82}},{"value":"/ like:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890953,"byte_end":8890962,"line_start":89,"line_end":89,"column_start":9,"column_end":18}},{"value":"/   @@protoc_insertion_point(NAME)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890971,"byte_end":8891007,"line_start":90,"line_end":90,"column_start":9,"column_end":45}},{"value":"/ The annotation can have arbitrary text before and after it on the line,","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891016,"byte_end":8891091,"line_start":91,"line_end":91,"column_start":9,"column_end":84}},{"value":"/ which allows it to be placed in a comment.  NAME should be replaced with","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891100,"byte_end":8891176,"line_start":92,"line_end":92,"column_start":9,"column_end":85}},{"value":"/ an identifier naming the point -- this is what other generators will use","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891185,"byte_end":8891261,"line_start":93,"line_end":93,"column_start":9,"column_end":85}},{"value":"/ as the insertion_point.  Code inserted at this point will be placed","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891270,"byte_end":8891341,"line_start":94,"line_end":94,"column_start":9,"column_end":80}},{"value":"/ immediately above the line containing the insertion point (thus multiple","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891350,"byte_end":8891426,"line_start":95,"line_end":95,"column_start":9,"column_end":85}},{"value":"/ insertions to the same point will come out in the order they were added).","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891435,"byte_end":8891512,"line_start":96,"line_end":96,"column_start":9,"column_end":86}},{"value":"/ The double-@ is intended to make it unlikely that the generated code","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891521,"byte_end":8891593,"line_start":97,"line_end":97,"column_start":9,"column_end":81}},{"value":"/ could contain things that look like insertion points by accident.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891602,"byte_end":8891671,"line_start":98,"line_end":98,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891680,"byte_end":8891683,"line_start":99,"line_end":99,"column_start":9,"column_end":12}},{"value":"/ For example, the C++ code generator places the following line in the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891692,"byte_end":8891764,"line_start":100,"line_end":100,"column_start":9,"column_end":81}},{"value":"/ .pb.h files that it generates:","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891773,"byte_end":8891807,"line_start":101,"line_end":101,"column_start":9,"column_end":43}},{"value":"/   // @@protoc_insertion_point(namespace_scope)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891816,"byte_end":8891866,"line_start":102,"line_end":102,"column_start":9,"column_end":59}},{"value":"/ This line appears within the scope of the file's package namespace, but","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891875,"byte_end":8891950,"line_start":103,"line_end":103,"column_start":9,"column_end":84}},{"value":"/ outside of any particular class.  Another plugin can then specify the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8891959,"byte_end":8892032,"line_start":104,"line_end":104,"column_start":9,"column_end":82}},{"value":"/ insertion_point \"namespace_scope\" to generate additional classes or","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892041,"byte_end":8892112,"line_start":105,"line_end":105,"column_start":9,"column_end":80}},{"value":"/ other declarations that should be placed in this scope.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892121,"byte_end":8892180,"line_start":106,"line_end":106,"column_start":9,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892189,"byte_end":8892192,"line_start":107,"line_end":107,"column_start":9,"column_end":12}},{"value":"/ Note that if the line containing the insertion point begins with","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892201,"byte_end":8892269,"line_start":108,"line_end":108,"column_start":9,"column_end":77}},{"value":"/ whitespace, the same whitespace will be added to every line of the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892278,"byte_end":8892348,"line_start":109,"line_end":109,"column_start":9,"column_end":79}},{"value":"/ inserted text.  This is useful for languages like Python, where","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892357,"byte_end":8892424,"line_start":110,"line_end":110,"column_start":9,"column_end":76}},{"value":"/ indentation matters.  In these languages, the insertion point comment","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892433,"byte_end":8892506,"line_start":111,"line_end":111,"column_start":9,"column_end":82}},{"value":"/ should be indented the same amount as any inserted code will need to be","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892515,"byte_end":8892590,"line_start":112,"line_end":112,"column_start":9,"column_end":84}},{"value":"/ in order to work correctly in that context.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892599,"byte_end":8892646,"line_start":113,"line_end":113,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892655,"byte_end":8892658,"line_start":114,"line_end":114,"column_start":9,"column_end":12}},{"value":"/ The code generator that generates the initial file and the one which","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892667,"byte_end":8892739,"line_start":115,"line_end":115,"column_start":9,"column_end":81}},{"value":"/ inserts into it must both run as part of a single invocation of protoc.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892748,"byte_end":8892823,"line_start":116,"line_end":116,"column_start":9,"column_end":84}},{"value":"/ Code generators are executed in the order in which they appear on the","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892832,"byte_end":8892905,"line_start":117,"line_end":117,"column_start":9,"column_end":82}},{"value":"/ command line.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892914,"byte_end":8892931,"line_start":118,"line_end":118,"column_start":9,"column_end":26}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892940,"byte_end":8892943,"line_start":119,"line_end":119,"column_start":9,"column_end":12}},{"value":"/ If |insertion_point| is present, |name| must also be present.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8892952,"byte_end":8893017,"line_start":120,"line_end":120,"column_start":9,"column_end":74}},{"value":"prost(string, optional, tag = \"2\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893026,"byte_end":8893061,"line_start":121,"line_end":121,"column_start":9,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3078},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893235,"byte_end":8893242,"line_start":125,"line_end":125,"column_start":13,"column_end":20},"name":"content","qualname":"::compiler::code_generator_response::File::content","value":"core::option::Option<prost::alloc::string::String>","parent":{"krate":0,"index":3018},"children":[],"decl_id":null,"docs":" The file contents.\n","sig":null,"attributes":[{"value":"/ The file contents.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893155,"byte_end":8893177,"line_start":123,"line_end":123,"column_start":9,"column_end":31}},{"value":"prost(string, optional, tag = \"15\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893186,"byte_end":8893222,"line_start":124,"line_end":124,"column_start":9,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3079},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893599,"byte_end":8893618,"line_start":130,"line_end":130,"column_start":13,"column_end":32},"name":"generated_code_info","qualname":"::compiler::code_generator_response::File::generated_code_info","value":"core::option::Option<GeneratedCodeInfo>","parent":{"krate":0,"index":3018},"children":[],"decl_id":null,"docs":" Information describing the file content being inserted. If an insertion\n point is used, this information will be appropriately offset and inserted\n into the code generation metadata for the generated files.\n","sig":null,"attributes":[{"value":"/ Information describing the file content being inserted. If an insertion","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893308,"byte_end":8893383,"line_start":126,"line_end":126,"column_start":9,"column_end":84}},{"value":"/ point is used, this information will be appropriately offset and inserted","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893392,"byte_end":8893469,"line_start":127,"line_end":127,"column_start":9,"column_end":86}},{"value":"/ into the code generation metadata for the generated files.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893478,"byte_end":8893540,"line_start":128,"line_end":128,"column_start":9,"column_end":71}},{"value":"prost(message, optional, tag = \"16\")","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893549,"byte_end":8893586,"line_start":129,"line_end":129,"column_start":9,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8890472,"byte_end":8890476,"line_start":83,"line_end":83,"column_start":13,"column_end":17},"name":"name","qualname":"<File>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `name`, or the default value if `name` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893074,"byte_end":8893089,"line_start":122,"line_end":122,"column_start":13,"column_end":28},"name":"insertion_point","qualname":"<File>::insertion_point","value":"pub fn insertion_point(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `insertion_point`, or the default value if `insertion_point` is unset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3075},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893235,"byte_end":8893242,"line_start":125,"line_end":125,"column_start":13,"column_end":20},"name":"content","qualname":"<File>::content","value":"pub fn content(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"Returns the value of `content`, or the default value if `content` is unset.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3081},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893861,"byte_end":8893865,"line_start":136,"line_end":136,"column_start":9,"column_end":13},"name":"None","qualname":"::compiler::code_generator_response::Feature::None","value":"Feature::None","parent":{"krate":0,"index":3080},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3084},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893879,"byte_end":8893893,"line_start":137,"line_end":137,"column_start":9,"column_end":23},"name":"Proto3Optional","qualname":"::compiler::code_generator_response::Feature::Proto3Optional","value":"Feature::Proto3Optional","parent":{"krate":0,"index":3080},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3080},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893843,"byte_end":8893850,"line_start":135,"line_end":135,"column_start":14,"column_end":21},"name":"Feature","qualname":"::compiler::code_generator_response::Feature","value":"pub enum Feature { None = , Proto3Optional = , }","parent":null,"children":[{"krate":0,"index":3081},{"krate":0,"index":3084}],"decl_id":null,"docs":" Sync with code_generator.h.\n","sig":null,"attributes":[{"value":"/ Sync with code_generator.h.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893687,"byte_end":8893718,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"repr(i32)","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/compiler.rs","byte_start":8893817,"byte_end":8893829,"line_start":134,"line_end":134,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":1171,"byte_end":1180,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Duration>::normalize","value":"pub fn normalize(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Normalizes the duration to a canonical format.","sig":null,"attributes":[{"value":"/ Normalizes the duration to a canonical format.","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":928,"byte_end":978,"line_start":31,"line_end":31,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":983,"byte_end":986,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Based on [`google::protobuf::util::CreateNormalized`][1].","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":991,"byte_end":1052,"line_start":33,"line_end":33,"column_start":5,"column_end":66}},{"value":"/ [1]: https://github.com/google/protobuf/blob/v3.3.2/src/google/protobuf/util/time_util.cc#L79-L100","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":1057,"byte_end":1159,"line_start":34,"line_end":34,"column_start":5,"column_end":107}}]}],"impls":[{"id":195,"kind":"Inherent","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":913,"byte_end":921,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":2044,"byte_end":2052,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":2591,"byte_end":2599,"line_start":77,"line_end":77,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":3217,"byte_end":3226,"line_start":98,"line_end":98,"column_start":6,"column_end":15},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":913,"byte_end":921,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":2044,"byte_end":2052,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2607},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":2591,"byte_end":2599,"line_start":77,"line_end":77,"column_start":34,"column_end":42},"kind":{"Impl":{"id":197}},"from":{"krate":1,"index":42540},"to":{"krate":1,"index":2753}},{"span":{"file_name":"/Users/raunak/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-types-0.7.0/src/lib.rs","byte_start":3217,"byte_end":3226,"line_start":98,"line_end":98,"column_start":6,"column_end":15},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2821},"to":{"krate":4294967295,"index":4294967295}}]}